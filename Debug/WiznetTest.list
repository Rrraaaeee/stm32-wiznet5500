
WiznetTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006288  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08006348  08006348  00016348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006644  08006644  000200a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006644  08006644  000200a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006644  08006644  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006644  08006644  00016644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006648  08006648  00016648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800664c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  200000a0  080066ec  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  080066ec  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000982d  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002136  00000000  00000000  000298f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000910  00000000  00000000  0002ba30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000808  00000000  00000000  0002c340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fc0  00000000  00000000  0002cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b1f4  00000000  00000000  00046b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c42  00000000  00000000  00051cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e493e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026e0  00000000  00000000  000e4994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a0 	.word	0x200000a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006330 	.word	0x08006330

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a4 	.word	0x200000a4
 8000104:	08006330 	.word	0x08006330

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <W5500_Select>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void W5500_Select(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_RESET);
 8000238:	2380      	movs	r3, #128	; 0x80
 800023a:	015b      	lsls	r3, r3, #5
 800023c:	4803      	ldr	r0, [pc, #12]	; (800024c <W5500_Select+0x18>)
 800023e:	2200      	movs	r2, #0
 8000240:	0019      	movs	r1, r3
 8000242:	f001 fa5b 	bl	80016fc <HAL_GPIO_WritePin>
}
 8000246:	46c0      	nop			; (mov r8, r8)
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	48000400 	.word	0x48000400

08000250 <W5500_Unselect>:

void W5500_Unselect(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(W5500_CS_GPIO_Port, W5500_CS_Pin, GPIO_PIN_SET);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	015b      	lsls	r3, r3, #5
 8000258:	4803      	ldr	r0, [pc, #12]	; (8000268 <W5500_Unselect+0x18>)
 800025a:	2201      	movs	r2, #1
 800025c:	0019      	movs	r1, r3
 800025e:	f001 fa4d 	bl	80016fc <HAL_GPIO_WritePin>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	48000400 	.word	0x48000400

0800026c <W5500_ReadBuff>:

void W5500_ReadBuff(uint8_t* buff, uint16_t len) {
 800026c:	b590      	push	{r4, r7, lr}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
 8000274:	000a      	movs	r2, r1
 8000276:	1cbb      	adds	r3, r7, #2
 8000278:	801a      	strh	r2, [r3, #0]
    HAL_SPI_Receive(&hspi2, buff, len, HAL_MAX_DELAY);
 800027a:	2301      	movs	r3, #1
 800027c:	425c      	negs	r4, r3
 800027e:	1cbb      	adds	r3, r7, #2
 8000280:	881a      	ldrh	r2, [r3, #0]
 8000282:	6879      	ldr	r1, [r7, #4]
 8000284:	4803      	ldr	r0, [pc, #12]	; (8000294 <W5500_ReadBuff+0x28>)
 8000286:	0023      	movs	r3, r4
 8000288:	f002 fa44 	bl	8002714 <HAL_SPI_Receive>
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b003      	add	sp, #12
 8000292:	bd90      	pop	{r4, r7, pc}
 8000294:	200000f0 	.word	0x200000f0

08000298 <W5500_WriteBuff>:

void W5500_WriteBuff(uint8_t* buff, uint16_t len) {
 8000298:	b5b0      	push	{r4, r5, r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
 80002a0:	000a      	movs	r2, r1
 80002a2:	1cbb      	adds	r3, r7, #2
 80002a4:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef ret = HAL_SPI_Transmit(&hspi2, buff, len, HAL_MAX_DELAY);
 80002a6:	230f      	movs	r3, #15
 80002a8:	18fc      	adds	r4, r7, r3
 80002aa:	2301      	movs	r3, #1
 80002ac:	425d      	negs	r5, r3
 80002ae:	1cbb      	adds	r3, r7, #2
 80002b0:	881a      	ldrh	r2, [r3, #0]
 80002b2:	6879      	ldr	r1, [r7, #4]
 80002b4:	4804      	ldr	r0, [pc, #16]	; (80002c8 <W5500_WriteBuff+0x30>)
 80002b6:	002b      	movs	r3, r5
 80002b8:	f002 f8d4 	bl	8002464 <HAL_SPI_Transmit>
 80002bc:	0003      	movs	r3, r0
 80002be:	7023      	strb	r3, [r4, #0]
}
 80002c0:	46c0      	nop			; (mov r8, r8)
 80002c2:	46bd      	mov	sp, r7
 80002c4:	b004      	add	sp, #16
 80002c6:	bdb0      	pop	{r4, r5, r7, pc}
 80002c8:	200000f0 	.word	0x200000f0

080002cc <W5500_ReadByte>:


uint8_t W5500_ReadByte(void) {
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
    uint8_t byte;
    W5500_ReadBuff(&byte, sizeof(byte));
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	2101      	movs	r1, #1
 80002d6:	0018      	movs	r0, r3
 80002d8:	f7ff ffc8 	bl	800026c <W5500_ReadBuff>
    return byte;
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	781b      	ldrb	r3, [r3, #0]
}
 80002e0:	0018      	movs	r0, r3
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b002      	add	sp, #8
 80002e6:	bd80      	pop	{r7, pc}

080002e8 <W5500_WriteByte>:


void W5500_WriteByte(uint8_t byte) {
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
    W5500_WriteBuff(&byte, sizeof(byte));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f7ff ffcd 	bl	8000298 <W5500_WriteBuff>
}
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	46bd      	mov	sp, r7
 8000302:	b002      	add	sp, #8
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <setwiz>:


void setwiz() {
 8000308:	b590      	push	{r4, r7, lr}
 800030a:	b08b      	sub	sp, #44	; 0x2c
 800030c:	af00      	add	r7, sp, #0
	/*initialisation*/

    //specify functions pointers
    reg_wizchip_cs_cbfunc(W5500_Select, W5500_Unselect);
 800030e:	4a2e      	ldr	r2, [pc, #184]	; (80003c8 <setwiz+0xc0>)
 8000310:	4b2e      	ldr	r3, [pc, #184]	; (80003cc <setwiz+0xc4>)
 8000312:	0011      	movs	r1, r2
 8000314:	0018      	movs	r0, r3
 8000316:	f004 fabb 	bl	8004890 <reg_wizchip_cs_cbfunc>
    reg_wizchip_spi_cbfunc(W5500_ReadByte, W5500_WriteByte);
 800031a:	4a2d      	ldr	r2, [pc, #180]	; (80003d0 <setwiz+0xc8>)
 800031c:	4b2d      	ldr	r3, [pc, #180]	; (80003d4 <setwiz+0xcc>)
 800031e:	0011      	movs	r1, r2
 8000320:	0018      	movs	r0, r3
 8000322:	f004 fad9 	bl	80048d8 <reg_wizchip_spi_cbfunc>
    reg_wizchip_spiburst_cbfunc(W5500_ReadBuff, W5500_WriteBuff);
 8000326:	4a2c      	ldr	r2, [pc, #176]	; (80003d8 <setwiz+0xd0>)
 8000328:	4b2c      	ldr	r3, [pc, #176]	; (80003dc <setwiz+0xd4>)
 800032a:	0011      	movs	r1, r2
 800032c:	0018      	movs	r0, r3
 800032e:	f004 faff 	bl	8004930 <reg_wizchip_spiburst_cbfunc>

    //Buffer initialisation
    uint8_t rx_tx_buff_sizes[] = {2, 2, 2, 2, 2, 2, 2, 2};
 8000332:	211c      	movs	r1, #28
 8000334:	187b      	adds	r3, r7, r1
 8000336:	4a2a      	ldr	r2, [pc, #168]	; (80003e0 <setwiz+0xd8>)
 8000338:	ca11      	ldmia	r2!, {r0, r4}
 800033a:	c311      	stmia	r3!, {r0, r4}
    wizchip_init(rx_tx_buff_sizes, rx_tx_buff_sizes);
 800033c:	187a      	adds	r2, r7, r1
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0011      	movs	r1, r2
 8000342:	0018      	movs	r0, r3
 8000344:	f004 fc4b 	bl	8004bde <wizchip_init>

    //***********************set MAC & IP address**********************//
    wiz_NetInfo net_info = {
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	0018      	movs	r0, r3
 800034c:	2317      	movs	r3, #23
 800034e:	001a      	movs	r2, r3
 8000350:	2100      	movs	r1, #0
 8000352:	f004 ffca 	bl	80052ea <memset>
 8000356:	1d3b      	adds	r3, r7, #4
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <setwiz+0xdc>)
 800035a:	6811      	ldr	r1, [r2, #0]
 800035c:	6019      	str	r1, [r3, #0]
 800035e:	8892      	ldrh	r2, [r2, #4]
 8000360:	809a      	strh	r2, [r3, #4]
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2206      	movs	r2, #6
 8000366:	4920      	ldr	r1, [pc, #128]	; (80003e8 <setwiz+0xe0>)
 8000368:	189b      	adds	r3, r3, r2
 800036a:	2204      	movs	r2, #4
 800036c:	0018      	movs	r0, r3
 800036e:	f004 ffb3 	bl	80052d8 <memcpy>
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	220a      	movs	r2, #10
 8000376:	491d      	ldr	r1, [pc, #116]	; (80003ec <setwiz+0xe4>)
 8000378:	189b      	adds	r3, r3, r2
 800037a:	2204      	movs	r2, #4
 800037c:	0018      	movs	r0, r3
 800037e:	f004 ffab 	bl	80052d8 <memcpy>
 8000382:	1d3b      	adds	r3, r7, #4
 8000384:	2201      	movs	r2, #1
 8000386:	759a      	strb	r2, [r3, #22]
		//dns  = {192,168,1.1},  ///< DNS server IP Address
		.sn   = {255, 255, 255, 0},
        .dhcp = NETINFO_STATIC	//static ip
    };
    // wizchip_getnetinfo(&net_info);
    wizchip_setnetinfo(&net_info);
 8000388:	1d3b      	adds	r3, r7, #4
 800038a:	0018      	movs	r0, r3
 800038c:	f004 ff38 	bl	8005200 <wizchip_setnetinfo>

    //reset PHY
    ctlwizchip_type PHY_ctr = CW_SET_PHYCONF;
 8000390:	2127      	movs	r1, #39	; 0x27
 8000392:	187b      	adds	r3, r7, r1
 8000394:	220a      	movs	r2, #10
 8000396:	701a      	strb	r2, [r3, #0]
    wiz_PhyConf PHY_conf;
    PHY_conf.by = PHY_CONFBY_SW;   ///< set by @ref PHY_CONFBY_HW or @ref PHY_CONFBY_SW
 8000398:	003b      	movs	r3, r7
 800039a:	2201      	movs	r2, #1
 800039c:	701a      	strb	r2, [r3, #0]
    PHY_conf.mode =  PHY_MODE_MANUAL;    ///< set by @ref PHY_MODE_MANUAL or @ref PHY_MODE_AUTONEGO
 800039e:	003b      	movs	r3, r7
 80003a0:	2200      	movs	r2, #0
 80003a2:	705a      	strb	r2, [r3, #1]
	PHY_conf.speed =   PHY_SPEED_100;  ///< set by @ref PHY_SPEED_10 or @ref PHY_SPEED_100
 80003a4:	003b      	movs	r3, r7
 80003a6:	2201      	movs	r2, #1
 80003a8:	709a      	strb	r2, [r3, #2]
	PHY_conf.duplex =   PHY_DUPLEX_FULL;  ///< set by @ref PHY_DUPLEX_HALF @ref PHY_DUPLEX_FULL
 80003aa:	003b      	movs	r3, r7
 80003ac:	2201      	movs	r2, #1
 80003ae:	70da      	strb	r2, [r3, #3]

    ctlwizchip(PHY_ctr, &PHY_conf);
 80003b0:	003a      	movs	r2, r7
 80003b2:	187b      	adds	r3, r7, r1
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	0011      	movs	r1, r2
 80003b8:	0018      	movs	r0, r3
 80003ba:	f004 fae5 	bl	8004988 <ctlwizchip>
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b00b      	add	sp, #44	; 0x2c
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	08000251 	.word	0x08000251
 80003cc:	08000235 	.word	0x08000235
 80003d0:	080002e9 	.word	0x080002e9
 80003d4:	080002cd 	.word	0x080002cd
 80003d8:	08000299 	.word	0x08000299
 80003dc:	0800026d 	.word	0x0800026d
 80003e0:	08006348 	.word	0x08006348
 80003e4:	08006350 	.word	0x08006350
 80003e8:	08006358 	.word	0x08006358
 80003ec:	0800635c 	.word	0x0800635c

080003f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f6:	f000 fecd 	bl	8001194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fa:	f000 f8e3 	bl	80005c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003fe:	f000 f98f 	bl	8000720 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000402:	f000 f945 	bl	8000690 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  setwiz();
 8000406:	f7ff ff7f 	bl	8000308 <setwiz>

  int8_t ret;

  reestablish:
  //create socket
    while( (ret = wiz_socket(sock, Sn_MR_TCP, port, 0 )) != sock){
 800040a:	e002      	b.n	8000412 <main+0x22>
    	HAL_Delay(100);
 800040c:	2064      	movs	r0, #100	; 0x64
 800040e:	f000 ff25 	bl	800125c <HAL_Delay>
    while( (ret = wiz_socket(sock, Sn_MR_TCP, port, 0 )) != sock){
 8000412:	251f      	movs	r5, #31
 8000414:	197c      	adds	r4, r7, r5
 8000416:	4a67      	ldr	r2, [pc, #412]	; (80005b4 <main+0x1c4>)
 8000418:	2300      	movs	r3, #0
 800041a:	2101      	movs	r1, #1
 800041c:	2001      	movs	r0, #1
 800041e:	f003 fa09 	bl	8003834 <wiz_socket>
 8000422:	0003      	movs	r3, r0
 8000424:	7023      	strb	r3, [r4, #0]
 8000426:	197b      	adds	r3, r7, r5
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	b25b      	sxtb	r3, r3
 800042c:	2b01      	cmp	r3, #1
 800042e:	d1ed      	bne.n	800040c <main+0x1c>
    }
    //Listen mode

    while(1){
    	ret = wiz_listen(sock);
 8000430:	251f      	movs	r5, #31
 8000432:	197c      	adds	r4, r7, r5
 8000434:	2001      	movs	r0, #1
 8000436:	f003 fb95 	bl	8003b64 <wiz_listen>
 800043a:	0003      	movs	r3, r0
 800043c:	7023      	strb	r3, [r4, #0]
		if (ret == SOCKERR_SOCKCLOSED) {
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	b25b      	sxtb	r3, r3
 8000444:	3304      	adds	r3, #4
 8000446:	d100      	bne.n	800044a <main+0x5a>
			goto reestablish;
 8000448:	e7df      	b.n	800040a <main+0x1a>
		} else if (ret == SOCK_OK) {
 800044a:	231f      	movs	r3, #31
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	2b01      	cmp	r3, #1
 8000454:	d100      	bne.n	8000458 <main+0x68>
			break;
 8000456:	e003      	b.n	8000460 <main+0x70>
		}
		HAL_Delay(100);
 8000458:	2064      	movs	r0, #100	; 0x64
 800045a:	f000 feff 	bl	800125c <HAL_Delay>
    	ret = wiz_listen(sock);
 800045e:	e7e7      	b.n	8000430 <main+0x40>

    }

    while(1)
    {
  	  if(ret = getSn_SR(sock) == SOCK_ESTABLISHED)
 8000460:	23ca      	movs	r3, #202	; 0xca
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	0018      	movs	r0, r3
 8000466:	f002 fe3b 	bl	80030e0 <WIZCHIP_READ>
 800046a:	0003      	movs	r3, r0
 800046c:	3b17      	subs	r3, #23
 800046e:	425a      	negs	r2, r3
 8000470:	4153      	adcs	r3, r2
 8000472:	b2da      	uxtb	r2, r3
 8000474:	211f      	movs	r1, #31
 8000476:	187b      	adds	r3, r7, r1
 8000478:	701a      	strb	r2, [r3, #0]
 800047a:	187b      	adds	r3, r7, r1
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	b25b      	sxtb	r3, r3
 8000480:	2b00      	cmp	r3, #0
 8000482:	d0ed      	beq.n	8000460 <main+0x70>
  	  {
  		  uint8_t buf[8] = {0};
 8000484:	2314      	movs	r3, #20
 8000486:	18fb      	adds	r3, r7, r3
 8000488:	2200      	movs	r2, #0
 800048a:	601a      	str	r2, [r3, #0]
 800048c:	2200      	movs	r2, #0
 800048e:	605a      	str	r2, [r3, #4]

  		  while(ret = wiz_recv( sock, buf, sizeof(buf)) == 0);
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	2314      	movs	r3, #20
 8000494:	18fb      	adds	r3, r7, r3
 8000496:	2208      	movs	r2, #8
 8000498:	0019      	movs	r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	f003 fce0 	bl	8003e60 <wiz_recv>
 80004a0:	0003      	movs	r3, r0
 80004a2:	425a      	negs	r2, r3
 80004a4:	4153      	adcs	r3, r2
 80004a6:	b2da      	uxtb	r2, r3
 80004a8:	211f      	movs	r1, #31
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	701a      	strb	r2, [r3, #0]
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d1ec      	bne.n	8000492 <main+0xa2>
  		  //something is received
  		  while(ret = wiz_send(sock, buf, sizeof(buf)) == 0);//echo
 80004b8:	46c0      	nop			; (mov r8, r8)
 80004ba:	2414      	movs	r4, #20
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2208      	movs	r2, #8
 80004c0:	0019      	movs	r1, r3
 80004c2:	2001      	movs	r0, #1
 80004c4:	f003 fb96 	bl	8003bf4 <wiz_send>
 80004c8:	0003      	movs	r3, r0
 80004ca:	425a      	negs	r2, r3
 80004cc:	4153      	adcs	r3, r2
 80004ce:	b2da      	uxtb	r2, r3
 80004d0:	211f      	movs	r1, #31
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d1ec      	bne.n	80004ba <main+0xca>

  		  if(buf[0]=='c' && buf[1] == 'l' && buf[2] == 's')
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	2b63      	cmp	r3, #99	; 0x63
 80004e6:	d10f      	bne.n	8000508 <main+0x118>
 80004e8:	193b      	adds	r3, r7, r4
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	2b6c      	cmp	r3, #108	; 0x6c
 80004ee:	d10b      	bne.n	8000508 <main+0x118>
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	789b      	ldrb	r3, [r3, #2]
 80004f4:	2b73      	cmp	r3, #115	; 0x73
 80004f6:	d107      	bne.n	8000508 <main+0x118>
  		  {
  			  while(wiz_close(sock)!=SOCK_OK);
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	2001      	movs	r0, #1
 80004fc:	f003 faca 	bl	8003a94 <wiz_close>
 8000500:	0003      	movs	r3, r0
 8000502:	2b01      	cmp	r3, #1
 8000504:	d1f9      	bne.n	80004fa <main+0x10a>
 8000506:	e784      	b.n	8000412 <main+0x22>
  			  goto reestablish;
  		  }

  		  else if(buf[0] == 'p' && buf[1] =='i' && buf[2] == 'n' && buf[3] =='g')
 8000508:	2214      	movs	r2, #20
 800050a:	18bb      	adds	r3, r7, r2
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b70      	cmp	r3, #112	; 0x70
 8000510:	d1a6      	bne.n	8000460 <main+0x70>
 8000512:	18bb      	adds	r3, r7, r2
 8000514:	785b      	ldrb	r3, [r3, #1]
 8000516:	2b69      	cmp	r3, #105	; 0x69
 8000518:	d1a2      	bne.n	8000460 <main+0x70>
 800051a:	18bb      	adds	r3, r7, r2
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	2b6e      	cmp	r3, #110	; 0x6e
 8000520:	d19e      	bne.n	8000460 <main+0x70>
 8000522:	18bb      	adds	r3, r7, r2
 8000524:	78db      	ldrb	r3, [r3, #3]
 8000526:	2b67      	cmp	r3, #103	; 0x67
 8000528:	d19a      	bne.n	8000460 <main+0x70>
  		  {
  			  int8_t tmp = 0;
 800052a:	241e      	movs	r4, #30
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
  			  tmp = ping_auto(0,pDestaddr);
 8000532:	4b21      	ldr	r3, [pc, #132]	; (80005b8 <main+0x1c8>)
 8000534:	0019      	movs	r1, r3
 8000536:	2000      	movs	r0, #0
 8000538:	f000 f942 	bl	80007c0 <ping_auto>
 800053c:	0003      	movs	r3, r0
 800053e:	001a      	movs	r2, r3
 8000540:	193b      	adds	r3, r7, r4
 8000542:	701a      	strb	r2, [r3, #0]
  			      //tmp = ping_count(0,3,pDestaddr);
  			      if(tmp == SUCCESS)
 8000544:	193b      	adds	r3, r7, r4
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b25b      	sxtb	r3, r3
 800054a:	2b03      	cmp	r3, #3
 800054c:	d119      	bne.n	8000582 <main+0x192>
  			      {
  			    	 uint8_t reply[8] = {'S','U','C','C','E','S','\n'};
 800054e:	230c      	movs	r3, #12
 8000550:	18fb      	adds	r3, r7, r3
 8000552:	4a1a      	ldr	r2, [pc, #104]	; (80005bc <main+0x1cc>)
 8000554:	ca03      	ldmia	r2!, {r0, r1}
 8000556:	c303      	stmia	r3!, {r0, r1}
  			    	 while(ret = wiz_send(sock,reply, sizeof(reply)) == 0);
 8000558:	46c0      	nop			; (mov r8, r8)
 800055a:	230c      	movs	r3, #12
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	2208      	movs	r2, #8
 8000560:	0019      	movs	r1, r3
 8000562:	2001      	movs	r0, #1
 8000564:	f003 fb46 	bl	8003bf4 <wiz_send>
 8000568:	0003      	movs	r3, r0
 800056a:	425a      	negs	r2, r3
 800056c:	4153      	adcs	r3, r2
 800056e:	b2da      	uxtb	r2, r3
 8000570:	211f      	movs	r1, #31
 8000572:	187b      	adds	r3, r7, r1
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	187b      	adds	r3, r7, r1
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b25b      	sxtb	r3, r3
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1ec      	bne.n	800055a <main+0x16a>
 8000580:	e76e      	b.n	8000460 <main+0x70>
  			      }
  			      else
  			      {
  			    	  uint8_t reply[8] = {'F','A','I','L','E','D','\n'};
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	4a0e      	ldr	r2, [pc, #56]	; (80005c0 <main+0x1d0>)
 8000586:	ca03      	ldmia	r2!, {r0, r1}
 8000588:	c303      	stmia	r3!, {r0, r1}
  			    	  while(ret = wiz_send(sock, reply, sizeof(reply)) == 0);
 800058a:	46c0      	nop			; (mov r8, r8)
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2208      	movs	r2, #8
 8000590:	0019      	movs	r1, r3
 8000592:	2001      	movs	r0, #1
 8000594:	f003 fb2e 	bl	8003bf4 <wiz_send>
 8000598:	0003      	movs	r3, r0
 800059a:	425a      	negs	r2, r3
 800059c:	4153      	adcs	r3, r2
 800059e:	b2da      	uxtb	r2, r3
 80005a0:	211f      	movs	r1, #31
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d1ed      	bne.n	800058c <main+0x19c>
  	  if(ret = getSn_SR(sock) == SOCK_ESTABLISHED)
 80005b0:	e756      	b.n	8000460 <main+0x70>
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	000005dc 	.word	0x000005dc
 80005b8:	20000000 	.word	0x20000000
 80005bc:	08006360 	.word	0x08006360
 80005c0:	08006368 	.word	0x08006368

080005c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b099      	sub	sp, #100	; 0x64
 80005c8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ca:	242c      	movs	r4, #44	; 0x2c
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	0018      	movs	r0, r3
 80005d0:	2334      	movs	r3, #52	; 0x34
 80005d2:	001a      	movs	r2, r3
 80005d4:	2100      	movs	r1, #0
 80005d6:	f004 fe88 	bl	80052ea <memset>
	  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005da:	231c      	movs	r3, #28
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2310      	movs	r3, #16
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f004 fe80 	bl	80052ea <memset>
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ea:	003b      	movs	r3, r7
 80005ec:	0018      	movs	r0, r3
 80005ee:	231c      	movs	r3, #28
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f004 fe79 	bl	80052ea <memset>

	  /** Initializes the CPU, AHB and APB busses clocks
	  */
	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005f8:	0021      	movs	r1, r4
 80005fa:	187b      	adds	r3, r7, r1
 80005fc:	2222      	movs	r2, #34	; 0x22
 80005fe:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	187b      	adds	r3, r7, r1
 8000602:	2201      	movs	r2, #1
 8000604:	60da      	str	r2, [r3, #12]
	  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2201      	movs	r2, #1
 800060a:	621a      	str	r2, [r3, #32]
	  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2210      	movs	r2, #16
 8000610:	611a      	str	r2, [r3, #16]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2202      	movs	r2, #2
 8000616:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2280      	movs	r2, #128	; 0x80
 800061c:	0212      	lsls	r2, r2, #8
 800061e:	629a      	str	r2, [r3, #40]	; 0x28
	  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2280      	movs	r2, #128	; 0x80
 8000624:	0352      	lsls	r2, r2, #13
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
	  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000628:	187b      	adds	r3, r7, r1
 800062a:	2200      	movs	r2, #0
 800062c:	631a      	str	r2, [r3, #48]	; 0x30
	  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062e:	187b      	adds	r3, r7, r1
 8000630:	0018      	movs	r0, r3
 8000632:	f001 f881 	bl	8001738 <HAL_RCC_OscConfig>
 8000636:	1e03      	subs	r3, r0, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0x7a>
	  {
	    Error_Handler();
 800063a:	f000 f8bb 	bl	80007b4 <Error_Handler>
	  }
	  /** Initializes the CPU, AHB and APB busses clocks
	  */
	  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063e:	211c      	movs	r1, #28
 8000640:	187b      	adds	r3, r7, r1
 8000642:	2207      	movs	r2, #7
 8000644:	601a      	str	r2, [r3, #0]
	                              |RCC_CLOCKTYPE_PCLK1;
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2202      	movs	r2, #2
 800064a:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]

	  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000658:	187b      	adds	r3, r7, r1
 800065a:	2101      	movs	r1, #1
 800065c:	0018      	movs	r0, r3
 800065e:	f001 fbf1 	bl	8001e44 <HAL_RCC_ClockConfig>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa6>
	  {
	    Error_Handler();
 8000666:	f000 f8a5 	bl	80007b4 <Error_Handler>
	  }
	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800066a:	003b      	movs	r3, r7
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	0292      	lsls	r2, r2, #10
 8000670:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000672:	003b      	movs	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	619a      	str	r2, [r3, #24]

	  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000678:	003b      	movs	r3, r7
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fd3c 	bl	80020f8 <HAL_RCCEx_PeriphCLKConfig>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0xc4>
	  {
	    Error_Handler();
 8000684:	f000 f896 	bl	80007b4 <Error_Handler>
	  }
}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b019      	add	sp, #100	; 0x64
 800068e:	bd90      	pop	{r4, r7, pc}

08000690 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
	__HAL_RCC_SPI2_CLK_ENABLE();
 8000696:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <MX_SPI2_Init+0x84>)
 8000698:	69da      	ldr	r2, [r3, #28]
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_SPI2_Init+0x84>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	01c9      	lsls	r1, r1, #7
 80006a0:	430a      	orrs	r2, r1
 80006a2:	61da      	str	r2, [r3, #28]
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_SPI2_Init+0x84>)
 80006a6:	69da      	ldr	r2, [r3, #28]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	01db      	lsls	r3, r3, #7
 80006ac:	4013      	ands	r3, r2
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

	  /* SPI2 parameter configuration*/
	  hspi2.Instance = SPI2;
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <MX_SPI2_Init+0x88>)
 80006b4:	4a19      	ldr	r2, [pc, #100]	; (800071c <MX_SPI2_Init+0x8c>)
 80006b6:	601a      	str	r2, [r3, #0]
	  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b8:	4b17      	ldr	r3, [pc, #92]	; (8000718 <MX_SPI2_Init+0x88>)
 80006ba:	2282      	movs	r2, #130	; 0x82
 80006bc:	0052      	lsls	r2, r2, #1
 80006be:	605a      	str	r2, [r3, #4]
	  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006c0:	4b15      	ldr	r3, [pc, #84]	; (8000718 <MX_SPI2_Init+0x88>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
	  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c6:	4b14      	ldr	r3, [pc, #80]	; (8000718 <MX_SPI2_Init+0x88>)
 80006c8:	22e0      	movs	r2, #224	; 0xe0
 80006ca:	00d2      	lsls	r2, r2, #3
 80006cc:	60da      	str	r2, [r3, #12]
	  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <MX_SPI2_Init+0x88>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
	  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b10      	ldr	r3, [pc, #64]	; (8000718 <MX_SPI2_Init+0x88>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
	  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b0f      	ldr	r3, [pc, #60]	; (8000718 <MX_SPI2_Init+0x88>)
 80006dc:	2280      	movs	r2, #128	; 0x80
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	619a      	str	r2, [r3, #24]
	  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;//initially is 32
 80006e2:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <MX_SPI2_Init+0x88>)
 80006e4:	2220      	movs	r2, #32
 80006e6:	61da      	str	r2, [r3, #28]
	  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <MX_SPI2_Init+0x88>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	621a      	str	r2, [r3, #32]
	  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <MX_SPI2_Init+0x88>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	625a      	str	r2, [r3, #36]	; 0x24
	  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <MX_SPI2_Init+0x88>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	629a      	str	r2, [r3, #40]	; 0x28

	  //hspi2.Init.CRCPolynomial = 10;
	  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <MX_SPI2_Init+0x88>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f001 fdf9 	bl	80022f4 <HAL_SPI_Init>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d001      	beq.n	800070a <MX_SPI2_Init+0x7a>
	  {
	    Error_Handler();
 8000706:	f000 f855 	bl	80007b4 <Error_Handler>
	  }
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	40021000 	.word	0x40021000
 8000718:	200000f0 	.word	0x200000f0
 800071c:	40003800 	.word	0x40003800

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	240c      	movs	r4, #12
 8000728:	193b      	adds	r3, r7, r4
 800072a:	0018      	movs	r0, r3
 800072c:	2314      	movs	r3, #20
 800072e:	001a      	movs	r2, r3
 8000730:	2100      	movs	r1, #0
 8000732:	f004 fdda 	bl	80052ea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000738:	695a      	ldr	r2, [r3, #20]
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_GPIO_Init+0x8c>)
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0309      	lsls	r1, r1, #12
 8000740:	430a      	orrs	r2, r1
 8000742:	615a      	str	r2, [r3, #20]
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	2380      	movs	r3, #128	; 0x80
 800074a:	031b      	lsls	r3, r3, #12
 800074c:	4013      	ands	r3, r2
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b16      	ldr	r3, [pc, #88]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000754:	695a      	ldr	r2, [r3, #20]
 8000756:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000758:	2180      	movs	r1, #128	; 0x80
 800075a:	02c9      	lsls	r1, r1, #11
 800075c:	430a      	orrs	r2, r1
 800075e:	615a      	str	r2, [r3, #20]
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_GPIO_Init+0x8c>)
 8000762:	695a      	ldr	r2, [r3, #20]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	02db      	lsls	r3, r3, #11
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 800076e:	2380      	movs	r3, #128	; 0x80
 8000770:	015b      	lsls	r3, r3, #5
 8000772:	480f      	ldr	r0, [pc, #60]	; (80007b0 <MX_GPIO_Init+0x90>)
 8000774:	2200      	movs	r2, #0
 8000776:	0019      	movs	r1, r3
 8000778:	f000 ffc0 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : W5500_CS_Pin */
    GPIO_InitStruct.Pin = W5500_CS_Pin;
 800077c:	193b      	adds	r3, r7, r4
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	0152      	lsls	r2, r2, #5
 8000782:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2201      	movs	r2, #1
 8000788:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2201      	movs	r2, #1
 800078e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000790:	193b      	adds	r3, r7, r4
 8000792:	2200      	movs	r2, #0
 8000794:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(W5500_CS_GPIO_Port, &GPIO_InitStruct);
 8000796:	193b      	adds	r3, r7, r4
 8000798:	4a05      	ldr	r2, [pc, #20]	; (80007b0 <MX_GPIO_Init+0x90>)
 800079a:	0019      	movs	r1, r3
 800079c:	0010      	movs	r0, r2
 800079e:	f000 fe35 	bl	800140c <HAL_GPIO_Init>


}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b009      	add	sp, #36	; 0x24
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	40021000 	.word	0x40021000
 80007b0:	48000400 	.word	0x48000400

080007b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b8:	b672      	cpsid	i
}
 80007ba:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007bc:	e7fe      	b.n	80007bc <Error_Handler+0x8>
	...

080007c0 <ping_auto>:
uint8_t rep=0;



uint8_t ping_auto(uint8_t s, uint8_t *addr)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	0002      	movs	r2, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	1dfb      	adds	r3, r7, #7
 80007cc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	int32_t len = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
	uint8_t cnt=0;
 80007d2:	230e      	movs	r3, #14
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
for(i = 0; i<=3;i++){
 80007da:	230f      	movs	r3, #15
 80007dc:	18fb      	adds	r3, r7, r3
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	e07e      	b.n	80008e2 <ping_auto+0x122>

		switch(getSn_SR(0))
 80007e4:	23c2      	movs	r3, #194	; 0xc2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	0018      	movs	r0, r3
 80007ea:	f002 fc79 	bl	80030e0 <WIZCHIP_READ>
 80007ee:	1e03      	subs	r3, r0, #0
 80007f0:	d002      	beq.n	80007f8 <ping_auto+0x38>
 80007f2:	2b32      	cmp	r3, #50	; 0x32
 80007f4:	d021      	beq.n	800083a <ping_auto+0x7a>
    	// wait_time for 2 seconds, Break on fail
    			}

    			break;
			default:
				break;
 80007f6:	e056      	b.n	80008a6 <ping_auto+0xe6>
				wiz_close(0);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f003 f94b 	bl	8003a94 <wiz_close>
				IINCHIP_WRITE(Sn_PROTO(0), IPPROTO_ICMP);              // set ICMP Protocol
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <ping_auto+0x138>)
 8000800:	2101      	movs	r1, #1
 8000802:	0018      	movs	r0, r3
 8000804:	f002 fcbe 	bl	8003184 <WIZCHIP_WRITE>
				if(wiz_socket(0,Sn_MR_IPRAW,3000,0)!=0){       // open the SOCKET with IPRAW mode, if fail then Error
 8000808:	4a3c      	ldr	r2, [pc, #240]	; (80008fc <ping_auto+0x13c>)
 800080a:	2300      	movs	r3, #0
 800080c:	2103      	movs	r1, #3
 800080e:	2000      	movs	r0, #0
 8000810:	f003 f810 	bl	8003834 <wiz_socket>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d006      	beq.n	8000826 <ping_auto+0x66>
					printf( "\r\n socket %d fail r\n",   (0)) ;
 8000818:	4b39      	ldr	r3, [pc, #228]	; (8000900 <ping_auto+0x140>)
 800081a:	2100      	movs	r1, #0
 800081c:	0018      	movs	r0, r3
 800081e:	f004 fd6d 	bl	80052fc <iprintf>
					return SOCKET_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e063      	b.n	80008ee <ping_auto+0x12e>
				while(getSn_SR(0)!=SOCK_IPRAW);
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	23c2      	movs	r3, #194	; 0xc2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fc57 	bl	80030e0 <WIZCHIP_READ>
 8000832:	0003      	movs	r3, r0
 8000834:	2b32      	cmp	r3, #50	; 0x32
 8000836:	d1f7      	bne.n	8000828 <ping_auto+0x68>
					break;
 8000838:	e035      	b.n	80008a6 <ping_auto+0xe6>
    			ping_request(0, addr);
 800083a:	683b      	ldr	r3, [r7, #0]
 800083c:	0019      	movs	r1, r3
 800083e:	2000      	movs	r0, #0
 8000840:	f000 f868 	bl	8000914 <ping_request>
    			req++;
 8000844:	4b2f      	ldr	r3, [pc, #188]	; (8000904 <ping_auto+0x144>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	b2da      	uxtb	r2, r3
 800084c:	4b2d      	ldr	r3, [pc, #180]	; (8000904 <ping_auto+0x144>)
 800084e:	701a      	strb	r2, [r3, #0]
    				if ( (len = getSn_RX_RSR(0) ) > 0)
 8000850:	2000      	movs	r0, #0
 8000852:	f002 fe35 	bl	80034c0 <getSn_RX_RSR>
 8000856:	0003      	movs	r3, r0
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b00      	cmp	r3, #0
 800085e:	dd0d      	ble.n	800087c <ping_auto+0xbc>
    					ping_reply(0, addr, len);
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	b29a      	uxth	r2, r3
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	0019      	movs	r1, r3
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f907 	bl	8000a7c <ping_reply>
    					rep++;
 800086e:	4b26      	ldr	r3, [pc, #152]	; (8000908 <ping_auto+0x148>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <ping_auto+0x148>)
 8000878:	701a      	strb	r2, [r3, #0]
    					break;
 800087a:	e013      	b.n	80008a4 <ping_auto+0xe4>
    				else if(cnt > 100)
 800087c:	240e      	movs	r4, #14
 800087e:	193b      	adds	r3, r7, r4
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b64      	cmp	r3, #100	; 0x64
 8000884:	d907      	bls.n	8000896 <ping_auto+0xd6>
    					printf( "Request Time out. \r\n");
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <ping_auto+0x14c>)
 8000888:	0018      	movs	r0, r3
 800088a:	f004 fdc3 	bl	8005414 <puts>
    					cnt = 0;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
    					break;
 8000894:	e006      	b.n	80008a4 <ping_auto+0xe4>
    					cnt++;
 8000896:	210e      	movs	r1, #14
 8000898:	187b      	adds	r3, r7, r1
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	187b      	adds	r3, r7, r1
 800089e:	3201      	adds	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
    				if ( (len = getSn_RX_RSR(0) ) > 0)
 80008a2:	e7d5      	b.n	8000850 <ping_auto+0x90>
    			break;
 80008a4:	46c0      	nop			; (mov r8, r8)

		}
#ifdef PING_DEBUG
		if(req>=3)
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <ping_auto+0x144>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	d913      	bls.n	80008d6 <ping_auto+0x116>
	   	{

	  		printf("Ping Request = %d, PING_Reply = %d\r\n",req,rep);
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <ping_auto+0x144>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	0019      	movs	r1, r3
 80008b4:	4b14      	ldr	r3, [pc, #80]	; (8000908 <ping_auto+0x148>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	001a      	movs	r2, r3
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <ping_auto+0x150>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f004 fd1d 	bl	80052fc <iprintf>

	  		if(rep == req)
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <ping_auto+0x148>)
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <ping_auto+0x144>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	d101      	bne.n	80008d2 <ping_auto+0x112>
	  			return SUCCESS;
 80008ce:	2303      	movs	r3, #3
 80008d0:	e00d      	b.n	80008ee <ping_auto+0x12e>
	  		else
	  			return REPLY_ERROR;
 80008d2:	2304      	movs	r3, #4
 80008d4:	e00b      	b.n	80008ee <ping_auto+0x12e>
for(i = 0; i<=3;i++){
 80008d6:	210f      	movs	r1, #15
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	781a      	ldrb	r2, [r3, #0]
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	3201      	adds	r2, #1
 80008e0:	701a      	strb	r2, [r3, #0]
 80008e2:	230f      	movs	r3, #15
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d800      	bhi.n	80008ee <ping_auto+0x12e>
 80008ec:	e77a      	b.n	80007e4 <ping_auto+0x24>

	  	}
#endif
	}
}
 80008ee:	0018      	movs	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b005      	add	sp, #20
 80008f4:	bd90      	pop	{r4, r7, pc}
 80008f6:	46c0      	nop			; (mov r8, r8)
 80008f8:	00001408 	.word	0x00001408
 80008fc:	00000bb8 	.word	0x00000bb8
 8000900:	08006370 	.word	0x08006370
 8000904:	200000bd 	.word	0x200000bd
 8000908:	200000be 	.word	0x200000be
 800090c:	08006388 	.word	0x08006388
 8000910:	0800639c 	.word	0x0800639c

08000914 <ping_request>:
   }


}

uint8_t ping_request(uint8_t s, uint8_t *addr){
 8000914:	b5b0      	push	{r4, r5, r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af02      	add	r7, sp, #8
 800091a:	0002      	movs	r2, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	701a      	strb	r2, [r3, #0]
  uint16_t i;

	//Initailize flag for ping reply
	ping_reply_received = 0;
 8000922:	4b4d      	ldr	r3, [pc, #308]	; (8000a58 <ping_request+0x144>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
	/* make header of the ping-request  */
	PingRequest.Type = PING_REQUEST;                   // Ping-Request
 8000928:	4b4c      	ldr	r3, [pc, #304]	; (8000a5c <ping_request+0x148>)
 800092a:	2208      	movs	r2, #8
 800092c:	701a      	strb	r2, [r3, #0]
	PingRequest.Code = CODE_ZERO;	                   // Always '0'
 800092e:	4b4b      	ldr	r3, [pc, #300]	; (8000a5c <ping_request+0x148>)
 8000930:	2200      	movs	r2, #0
 8000932:	705a      	strb	r2, [r3, #1]
	PingRequest.ID = htons(RandomID++);	       // set ping-request's ID to random integer value
 8000934:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <ping_request+0x14c>)
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	1c5a      	adds	r2, r3, #1
 800093a:	b291      	uxth	r1, r2
 800093c:	4a48      	ldr	r2, [pc, #288]	; (8000a60 <ping_request+0x14c>)
 800093e:	8011      	strh	r1, [r2, #0]
 8000940:	0018      	movs	r0, r3
 8000942:	f000 fab2 	bl	8000eaa <htons>
 8000946:	0003      	movs	r3, r0
 8000948:	b21a      	sxth	r2, r3
 800094a:	4b44      	ldr	r3, [pc, #272]	; (8000a5c <ping_request+0x148>)
 800094c:	809a      	strh	r2, [r3, #4]
	PingRequest.SeqNum =htons(RandomSeqNum++);// set ping-request's sequence number to ramdom integer value
 800094e:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <ping_request+0x150>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	b291      	uxth	r1, r2
 8000956:	4a43      	ldr	r2, [pc, #268]	; (8000a64 <ping_request+0x150>)
 8000958:	8011      	strh	r1, [r2, #0]
 800095a:	0018      	movs	r0, r3
 800095c:	f000 faa5 	bl	8000eaa <htons>
 8000960:	0003      	movs	r3, r0
 8000962:	b21a      	sxth	r2, r3
 8000964:	4b3d      	ldr	r3, [pc, #244]	; (8000a5c <ping_request+0x148>)
 8000966:	80da      	strh	r2, [r3, #6]
	//size = 32;                                 // set Data size

	/* Fill in Data[]  as size of BIF_LEN (Default = 32)*/
  	for(i = 0 ; i < BUF_LEN; i++){
 8000968:	230e      	movs	r3, #14
 800096a:	18fb      	adds	r3, r7, r3
 800096c:	2200      	movs	r2, #0
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	e011      	b.n	8000996 <ping_request+0x82>
		PingRequest.Data[i] = (i) % 8;		  //'0'~'8' number into ping-request's data
 8000972:	200e      	movs	r0, #14
 8000974:	183b      	adds	r3, r7, r0
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b25a      	sxtb	r2, r3
 800097a:	183b      	adds	r3, r7, r0
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	2107      	movs	r1, #7
 8000980:	400a      	ands	r2, r1
 8000982:	b251      	sxtb	r1, r2
 8000984:	4a35      	ldr	r2, [pc, #212]	; (8000a5c <ping_request+0x148>)
 8000986:	18d3      	adds	r3, r2, r3
 8000988:	1c0a      	adds	r2, r1, #0
 800098a:	721a      	strb	r2, [r3, #8]
  	for(i = 0 ; i < BUF_LEN; i++){
 800098c:	183b      	adds	r3, r7, r0
 800098e:	881a      	ldrh	r2, [r3, #0]
 8000990:	183b      	adds	r3, r7, r0
 8000992:	3201      	adds	r2, #1
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	230e      	movs	r3, #14
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	2b1f      	cmp	r3, #31
 800099e:	d9e8      	bls.n	8000972 <ping_request+0x5e>
	}
	 /* Do checksum of Ping Request */
	PingRequest.CheckSum = 0;		               // value of checksum before calucating checksum of ping-request packet
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <ping_request+0x148>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	805a      	strh	r2, [r3, #2]
	PingRequest.CheckSum = htons(checksum((uint8_t*)&PingRequest,sizeof(PingRequest)));  // Calculate checksum
 80009a6:	4b2d      	ldr	r3, [pc, #180]	; (8000a5c <ping_request+0x148>)
 80009a8:	2128      	movs	r1, #40	; 0x28
 80009aa:	0018      	movs	r0, r3
 80009ac:	f000 fa0a 	bl	8000dc4 <checksum>
 80009b0:	0003      	movs	r3, r0
 80009b2:	0018      	movs	r0, r3
 80009b4:	f000 fa79 	bl	8000eaa <htons>
 80009b8:	0003      	movs	r3, r0
 80009ba:	b21a      	sxth	r2, r3
 80009bc:	4b27      	ldr	r3, [pc, #156]	; (8000a5c <ping_request+0x148>)
 80009be:	805a      	strh	r2, [r3, #2]

     /* sendto ping_request to destination */
	if(wiz_sendto(s,(uint8_t *)&PingRequest,sizeof(PingRequest),addr,3000)==0){  // Send Ping-Request to the specified peer.
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	7818      	ldrb	r0, [r3, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	4925      	ldr	r1, [pc, #148]	; (8000a5c <ping_request+0x148>)
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <ping_request+0x154>)
 80009ca:	9200      	str	r2, [sp, #0]
 80009cc:	2228      	movs	r2, #40	; 0x28
 80009ce:	f003 fb2f 	bl	8004030 <wiz_sendto>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d104      	bne.n	80009e0 <ping_request+0xcc>
	  	 printf( "\r\n Fail to send ping-reply packet  r\n") ;
 80009d6:	4b25      	ldr	r3, [pc, #148]	; (8000a6c <ping_request+0x158>)
 80009d8:	0018      	movs	r0, r3
 80009da:	f004 fd1b 	bl	8005414 <puts>
 80009de:	e035      	b.n	8000a4c <ping_request+0x138>
	}else{
	 	  printf( "Send Ping Request  to Destination (") ;
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <ping_request+0x15c>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 fc8a 	bl	80052fc <iprintf>
          printf( "%d.%d.%d.%d )",   (addr[0]),  (addr[1]),  (addr[2]),  (addr[3])) ;
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	0019      	movs	r1, r3
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	3301      	adds	r3, #1
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	001a      	movs	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	3302      	adds	r3, #2
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	001c      	movs	r4, r3
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	3303      	adds	r3, #3
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	481b      	ldr	r0, [pc, #108]	; (8000a74 <ping_request+0x160>)
 8000a06:	9300      	str	r3, [sp, #0]
 8000a08:	0023      	movs	r3, r4
 8000a0a:	f004 fc77 	bl	80052fc <iprintf>
		  printf( " ID:%x  SeqNum:%x CheckSum:%x\r\n",   htons(PingRequest.ID),  htons(PingRequest.SeqNum),  htons(PingRequest.CheckSum)) ;
 8000a0e:	4b13      	ldr	r3, [pc, #76]	; (8000a5c <ping_request+0x148>)
 8000a10:	2204      	movs	r2, #4
 8000a12:	5e9b      	ldrsh	r3, [r3, r2]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fa47 	bl	8000eaa <htons>
 8000a1c:	0003      	movs	r3, r0
 8000a1e:	001c      	movs	r4, r3
 8000a20:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <ping_request+0x148>)
 8000a22:	2206      	movs	r2, #6
 8000a24:	5e9b      	ldrsh	r3, [r3, r2]
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f000 fa3e 	bl	8000eaa <htons>
 8000a2e:	0003      	movs	r3, r0
 8000a30:	001d      	movs	r5, r3
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <ping_request+0x148>)
 8000a34:	2202      	movs	r2, #2
 8000a36:	5e9b      	ldrsh	r3, [r3, r2]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fa35 	bl	8000eaa <htons>
 8000a40:	0003      	movs	r3, r0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <ping_request+0x164>)
 8000a44:	002a      	movs	r2, r5
 8000a46:	0021      	movs	r1, r4
 8000a48:	f004 fc58 	bl	80052fc <iprintf>
	}
	return 0;
 8000a4c:	2300      	movs	r3, #0
} // ping request
 8000a4e:	0018      	movs	r0, r3
 8000a50:	46bd      	mov	sp, r7
 8000a52:	b004      	add	sp, #16
 8000a54:	bdb0      	pop	{r4, r5, r7, pc}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	200000bc 	.word	0x200000bc
 8000a5c:	20000154 	.word	0x20000154
 8000a60:	20000004 	.word	0x20000004
 8000a64:	20000006 	.word	0x20000006
 8000a68:	00000bb8 	.word	0x00000bb8
 8000a6c:	080063e8 	.word	0x080063e8
 8000a70:	08006410 	.word	0x08006410
 8000a74:	08006434 	.word	0x08006434
 8000a78:	08006444 	.word	0x08006444

08000a7c <ping_reply>:

uint8_t ping_reply(uint8_t s, uint8_t *addr,  uint16_t rlen){
 8000a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a7e:	46ce      	mov	lr, r9
 8000a80:	4647      	mov	r7, r8
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b0b5      	sub	sp, #212	; 0xd4
 8000a86:	af04      	add	r7, sp, #16
 8000a88:	6039      	str	r1, [r7, #0]
 8000a8a:	0011      	movs	r1, r2
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	1c02      	adds	r2, r0, #0
 8000a90:	701a      	strb	r2, [r3, #0]
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	1c0a      	adds	r2, r1, #0
 8000a96:	801a      	strh	r2, [r3, #0]

	 uint16_t tmp_checksum;
	 uint16_t len;
	 uint16_t i;
	 uint8_t data_buf[128];
	 uint16_t port = 3000;
 8000a98:	2636      	movs	r6, #54	; 0x36
 8000a9a:	19bb      	adds	r3, r7, r6
 8000a9c:	4ac0      	ldr	r2, [pc, #768]	; (8000da0 <ping_reply+0x324>)
 8000a9e:	801a      	strh	r2, [r3, #0]
	 PINGMSGR PingReply;
		/* receive data from a destination */
	  	len = wiz_recvfrom(s, (uint8_t *)data_buf,rlen,addr,&port);
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	7818      	ldrb	r0, [r3, #0]
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	881a      	ldrh	r2, [r3, #0]
 8000aa8:	683c      	ldr	r4, [r7, #0]
 8000aaa:	2538      	movs	r5, #56	; 0x38
 8000aac:	1979      	adds	r1, r7, r5
 8000aae:	19bb      	adds	r3, r7, r6
 8000ab0:	9300      	str	r3, [sp, #0]
 8000ab2:	0023      	movs	r3, r4
 8000ab4:	f003 fc1a 	bl	80042ec <wiz_recvfrom>
 8000ab8:	0002      	movs	r2, r0
 8000aba:	23bc      	movs	r3, #188	; 0xbc
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	801a      	strh	r2, [r3, #0]
			if(data_buf[0] == PING_REPLY) {
 8000ac0:	0029      	movs	r1, r5
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d000      	beq.n	8000acc <ping_reply+0x50>
 8000aca:	e0ab      	b.n	8000c24 <ping_reply+0x1a8>
				PingReply.Type 		 = data_buf[0];
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	200c      	movs	r0, #12
 8000ad2:	183b      	adds	r3, r7, r0
 8000ad4:	701a      	strb	r2, [r3, #0]
				PingReply.Code 		 = data_buf[1];
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	785a      	ldrb	r2, [r3, #1]
 8000ada:	183b      	adds	r3, r7, r0
 8000adc:	705a      	strb	r2, [r3, #1]
				PingReply.CheckSum   = (data_buf[3]<<8) + data_buf[2];
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	78db      	ldrb	r3, [r3, #3]
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	021b      	lsls	r3, r3, #8
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	18d3      	adds	r3, r2, r3
 8000af0:	b29b      	uxth	r3, r3
 8000af2:	b21a      	sxth	r2, r3
 8000af4:	183b      	adds	r3, r7, r0
 8000af6:	805a      	strh	r2, [r3, #2]
				PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	187b      	adds	r3, r7, r1
 8000b04:	791b      	ldrb	r3, [r3, #4]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	18d3      	adds	r3, r2, r3
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	b21a      	sxth	r2, r3
 8000b0e:	183b      	adds	r3, r7, r0
 8000b10:	809a      	strh	r2, [r3, #4]
				PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	79db      	ldrb	r3, [r3, #7]
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	021b      	lsls	r3, r3, #8
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	799b      	ldrb	r3, [r3, #6]
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	18d3      	adds	r3, r2, r3
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	183b      	adds	r3, r7, r0
 8000b2a:	80da      	strh	r2, [r3, #6]

				for(i=0; i<len-8 ; i++)
 8000b2c:	23be      	movs	r3, #190	; 0xbe
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2200      	movs	r2, #0
 8000b32:	801a      	strh	r2, [r3, #0]
 8000b34:	e013      	b.n	8000b5e <ping_reply+0xe2>
				{
					PingReply.Data[i] = data_buf[8+i];
 8000b36:	20be      	movs	r0, #190	; 0xbe
 8000b38:	183b      	adds	r3, r7, r0
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	2238      	movs	r2, #56	; 0x38
 8000b40:	18ba      	adds	r2, r7, r2
 8000b42:	5cd2      	ldrb	r2, [r2, r3]
 8000b44:	183b      	adds	r3, r7, r0
 8000b46:	881b      	ldrh	r3, [r3, #0]
 8000b48:	b251      	sxtb	r1, r2
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	18d3      	adds	r3, r2, r3
 8000b50:	1c0a      	adds	r2, r1, #0
 8000b52:	721a      	strb	r2, [r3, #8]
				for(i=0; i<len-8 ; i++)
 8000b54:	183b      	adds	r3, r7, r0
 8000b56:	881a      	ldrh	r2, [r3, #0]
 8000b58:	183b      	adds	r3, r7, r0
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	801a      	strh	r2, [r3, #0]
 8000b5e:	23be      	movs	r3, #190	; 0xbe
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	881a      	ldrh	r2, [r3, #0]
 8000b64:	21bc      	movs	r1, #188	; 0xbc
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	3b08      	subs	r3, #8
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	dbe2      	blt.n	8000b36 <ping_reply+0xba>
				}
					/* check Checksum of Ping Reply */
				tmp_checksum = ~checksum(&data_buf,len);
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	881a      	ldrh	r2, [r3, #0]
 8000b74:	2338      	movs	r3, #56	; 0x38
 8000b76:	18fb      	adds	r3, r7, r3
 8000b78:	0011      	movs	r1, r2
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f000 f922 	bl	8000dc4 <checksum>
 8000b80:	0003      	movs	r3, r0
 8000b82:	001a      	movs	r2, r3
 8000b84:	21ba      	movs	r1, #186	; 0xba
 8000b86:	187b      	adds	r3, r7, r1
 8000b88:	43d2      	mvns	r2, r2
 8000b8a:	801a      	strh	r2, [r3, #0]
				if(tmp_checksum != 0xffff)
 8000b8c:	187b      	adds	r3, r7, r1
 8000b8e:	881b      	ldrh	r3, [r3, #0]
 8000b90:	4a84      	ldr	r2, [pc, #528]	; (8000da4 <ping_reply+0x328>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d007      	beq.n	8000ba6 <ping_reply+0x12a>
					printf("tmp_checksum = %x\r\n",tmp_checksum);
 8000b96:	187b      	adds	r3, r7, r1
 8000b98:	881a      	ldrh	r2, [r3, #0]
 8000b9a:	4b83      	ldr	r3, [pc, #524]	; (8000da8 <ping_reply+0x32c>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f004 fbac 	bl	80052fc <iprintf>
 8000ba4:	e0f4      	b.n	8000d90 <ping_reply+0x314>
				else{
					/*  Output the Destination IP and the size of the Ping Reply Message*/
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	781b      	ldrb	r3, [r3, #0]
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000baa:	001e      	movs	r6, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	781b      	ldrb	r3, [r3, #0]
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000bb2:	4698      	mov	r8, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	781b      	ldrb	r3, [r3, #0]
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000bba:	4699      	mov	r9, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	3303      	adds	r3, #3
 8000bc0:	781b      	ldrb	r3, [r3, #0]
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000bc2:	001c      	movs	r4, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2204      	movs	r2, #4
 8000bca:	5e9b      	ldrsh	r3, [r3, r2]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 f96b 	bl	8000eaa <htons>
 8000bd4:	0003      	movs	r3, r0
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000bd6:	001d      	movs	r5, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  htons(PingReply.ID),  htons(PingReply.SeqNum),  (rlen+6) );
 8000bd8:	230c      	movs	r3, #12
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	2206      	movs	r2, #6
 8000bde:	5e9b      	ldrsh	r3, [r3, r2]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	0018      	movs	r0, r3
 8000be4:	f000 f961 	bl	8000eaa <htons>
 8000be8:	0003      	movs	r3, r0
				    	printf("Reply from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000bea:	001a      	movs	r2, r3
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	3306      	adds	r3, #6
 8000bf2:	486e      	ldr	r0, [pc, #440]	; (8000dac <ping_reply+0x330>)
 8000bf4:	9303      	str	r3, [sp, #12]
 8000bf6:	9202      	str	r2, [sp, #8]
 8000bf8:	9501      	str	r5, [sp, #4]
 8000bfa:	9400      	str	r4, [sp, #0]
 8000bfc:	464b      	mov	r3, r9
 8000bfe:	4642      	mov	r2, r8
 8000c00:	0031      	movs	r1, r6
 8000c02:	f004 fb7b 	bl	80052fc <iprintf>
				    	printf("\r\n");
 8000c06:	4b6a      	ldr	r3, [pc, #424]	; (8000db0 <ping_reply+0x334>)
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f004 fc03 	bl	8005414 <puts>
				    	/*  SET ping_reply_receiver to '1' and go out the while_loop (waitting for ping reply)*/
					ping_reply_received =1;
 8000c0e:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <ping_reply+0x338>)
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]

					wiz_send(1,&PingReply, sizeof(PingReply));
 8000c14:	230c      	movs	r3, #12
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	2228      	movs	r2, #40	; 0x28
 8000c1a:	0019      	movs	r1, r3
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	f002 ffe9 	bl	8003bf4 <wiz_send>
 8000c22:	e0b5      	b.n	8000d90 <ping_reply+0x314>

				}
			}
			else if(data_buf[0] == PING_REQUEST){
 8000c24:	2138      	movs	r1, #56	; 0x38
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b08      	cmp	r3, #8
 8000c2c:	d000      	beq.n	8000c30 <ping_reply+0x1b4>
 8000c2e:	e0ab      	b.n	8000d88 <ping_reply+0x30c>
				PingReply.Code 	 = data_buf[1];
 8000c30:	187b      	adds	r3, r7, r1
 8000c32:	785a      	ldrb	r2, [r3, #1]
 8000c34:	200c      	movs	r0, #12
 8000c36:	183b      	adds	r3, r7, r0
 8000c38:	705a      	strb	r2, [r3, #1]
				PingReply.Type 	 = data_buf[2];
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	789a      	ldrb	r2, [r3, #2]
 8000c3e:	183b      	adds	r3, r7, r0
 8000c40:	701a      	strb	r2, [r3, #0]
				PingReply.CheckSum  = (data_buf[3]<<8) + data_buf[2];
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	78db      	ldrb	r3, [r3, #3]
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	021b      	lsls	r3, r3, #8
 8000c4a:	b29a      	uxth	r2, r3
 8000c4c:	187b      	adds	r3, r7, r1
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	18d3      	adds	r3, r2, r3
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	b21a      	sxth	r2, r3
 8000c58:	183b      	adds	r3, r7, r0
 8000c5a:	805a      	strh	r2, [r3, #2]
				PingReply.ID 		 = (data_buf[5]<<8) + data_buf[4];
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	795b      	ldrb	r3, [r3, #5]
 8000c60:	b29b      	uxth	r3, r3
 8000c62:	021b      	lsls	r3, r3, #8
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	187b      	adds	r3, r7, r1
 8000c68:	791b      	ldrb	r3, [r3, #4]
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	18d3      	adds	r3, r2, r3
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	b21a      	sxth	r2, r3
 8000c72:	183b      	adds	r3, r7, r0
 8000c74:	809a      	strh	r2, [r3, #4]
				PingReply.SeqNum 	 = (data_buf[7]<<8) + data_buf[6];
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	79db      	ldrb	r3, [r3, #7]
 8000c7a:	b29b      	uxth	r3, r3
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	799b      	ldrb	r3, [r3, #6]
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	18d3      	adds	r3, r2, r3
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	b21a      	sxth	r2, r3
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	80da      	strh	r2, [r3, #6]

				for(i=0; i<len-8 ; i++)
 8000c90:	23be      	movs	r3, #190	; 0xbe
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	e013      	b.n	8000cc2 <ping_reply+0x246>
				{
					PingReply.Data[i] = data_buf[8+i];
 8000c9a:	20be      	movs	r0, #190	; 0xbe
 8000c9c:	183b      	adds	r3, r7, r0
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	3308      	adds	r3, #8
 8000ca2:	2238      	movs	r2, #56	; 0x38
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	5cd2      	ldrb	r2, [r2, r3]
 8000ca8:	183b      	adds	r3, r7, r0
 8000caa:	881b      	ldrh	r3, [r3, #0]
 8000cac:	b251      	sxtb	r1, r2
 8000cae:	220c      	movs	r2, #12
 8000cb0:	18ba      	adds	r2, r7, r2
 8000cb2:	18d3      	adds	r3, r2, r3
 8000cb4:	1c0a      	adds	r2, r1, #0
 8000cb6:	721a      	strb	r2, [r3, #8]
				for(i=0; i<len-8 ; i++)
 8000cb8:	183b      	adds	r3, r7, r0
 8000cba:	881a      	ldrh	r2, [r3, #0]
 8000cbc:	183b      	adds	r3, r7, r0
 8000cbe:	3201      	adds	r2, #1
 8000cc0:	801a      	strh	r2, [r3, #0]
 8000cc2:	23be      	movs	r3, #190	; 0xbe
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	881a      	ldrh	r2, [r3, #0]
 8000cc8:	21bc      	movs	r1, #188	; 0xbc
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3b08      	subs	r3, #8
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	dbe2      	blt.n	8000c9a <ping_reply+0x21e>
				}
					/* check Checksum of Ping Reply */
				tmp_checksum = PingReply.CheckSum;
 8000cd4:	240c      	movs	r4, #12
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2202      	movs	r2, #2
 8000cda:	5e9a      	ldrsh	r2, [r3, r2]
 8000cdc:	25ba      	movs	r5, #186	; 0xba
 8000cde:	197b      	adds	r3, r7, r5
 8000ce0:	801a      	strh	r2, [r3, #0]
				PingReply.CheckSum = 0;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	805a      	strh	r2, [r3, #2]
				PingReply.CheckSum = htons(checksum(&PingReply,len));
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	881a      	ldrh	r2, [r3, #0]
 8000cec:	193b      	adds	r3, r7, r4
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 f867 	bl	8000dc4 <checksum>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f000 f8d6 	bl	8000eaa <htons>
 8000cfe:	0003      	movs	r3, r0
 8000d00:	b21a      	sxth	r2, r3
 8000d02:	0021      	movs	r1, r4
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	805a      	strh	r2, [r3, #2]

						if(tmp_checksum != PingReply.CheckSum){
 8000d08:	197b      	adds	r3, r7, r5
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	187a      	adds	r2, r7, r1
 8000d0e:	2002      	movs	r0, #2
 8000d10:	5e12      	ldrsh	r2, [r2, r0]
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d00f      	beq.n	8000d36 <ping_reply+0x2ba>
							printf( " \n CheckSum is in correct %x shold be %x \n",   (tmp_checksum),  htons(PingReply.CheckSum)) ;
 8000d16:	197b      	adds	r3, r7, r5
 8000d18:	881c      	ldrh	r4, [r3, #0]
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	5e9b      	ldrsh	r3, [r3, r2]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f8c1 	bl	8000eaa <htons>
 8000d28:	0003      	movs	r3, r0
 8000d2a:	001a      	movs	r2, r3
 8000d2c:	4b22      	ldr	r3, [pc, #136]	; (8000db8 <ping_reply+0x33c>)
 8000d2e:	0021      	movs	r1, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	f004 fae3 	bl	80052fc <iprintf>
							//printf( "\r\n Checksum is correct  \r\n") ;
						}

					/*  Output the Destination IP and the size of the Ping Reply Message*/
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	781b      	ldrb	r3, [r3, #0]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d3a:	001d      	movs	r5, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	781b      	ldrb	r3, [r3, #0]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d42:	001e      	movs	r6, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	3302      	adds	r3, #2
 8000d48:	781b      	ldrb	r3, [r3, #0]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d4a:	469c      	mov	ip, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	3303      	adds	r3, #3
 8000d50:	781b      	ldrb	r3, [r3, #0]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d52:	001a      	movs	r2, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d54:	200c      	movs	r0, #12
 8000d56:	183b      	adds	r3, r7, r0
 8000d58:	2104      	movs	r1, #4
 8000d5a:	5e5b      	ldrsh	r3, [r3, r1]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d5c:	0019      	movs	r1, r3
						  (addr[0]),  (addr[1]),  (addr[2]),  (addr[3]),  (PingReply.ID),  (PingReply.SeqNum),  (rlen+6) );
 8000d5e:	183b      	adds	r3, r7, r0
 8000d60:	2006      	movs	r0, #6
 8000d62:	5e1b      	ldrsh	r3, [r3, r0]
				    	printf("Request from %d.%d.%d.%d  ID:%x SeqNum:%x  :data size %d bytes\r\n",
 8000d64:	001c      	movs	r4, r3
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	3306      	adds	r3, #6
 8000d6c:	4813      	ldr	r0, [pc, #76]	; (8000dbc <ping_reply+0x340>)
 8000d6e:	9303      	str	r3, [sp, #12]
 8000d70:	9402      	str	r4, [sp, #8]
 8000d72:	9101      	str	r1, [sp, #4]
 8000d74:	9200      	str	r2, [sp, #0]
 8000d76:	4663      	mov	r3, ip
 8000d78:	0032      	movs	r2, r6
 8000d7a:	0029      	movs	r1, r5
 8000d7c:	f004 fabe 	bl	80052fc <iprintf>
					/*  SET ping_reply_receiver to '1' and go out the while_loop (waitting for ping reply)*/
					ping_reply_received =1;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <ping_reply+0x338>)
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]
 8000d86:	e003      	b.n	8000d90 <ping_reply+0x314>



			}
			else{
 					 printf(" Unkonwn msg. \n");
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <ping_reply+0x344>)
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f004 fb42 	bl	8005414 <puts>
			}


			return 0;
 8000d90:	2300      	movs	r3, #0
}// ping_reply
 8000d92:	0018      	movs	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b031      	add	sp, #196	; 0xc4
 8000d98:	bcc0      	pop	{r6, r7}
 8000d9a:	46b9      	mov	r9, r7
 8000d9c:	46b0      	mov	r8, r6
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	00000bb8 	.word	0x00000bb8
 8000da4:	0000ffff 	.word	0x0000ffff
 8000da8:	08006464 	.word	0x08006464
 8000dac:	08006478 	.word	0x08006478
 8000db0:	080064b8 	.word	0x080064b8
 8000db4:	200000bc 	.word	0x200000bc
 8000db8:	080064bc 	.word	0x080064bc
 8000dbc:	080064e8 	.word	0x080064e8
 8000dc0:	0800652c 	.word	0x0800652c

08000dc4 <checksum>:



uint16_t checksum(uint8_t * data_buf, uint16_t len)

{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b087      	sub	sp, #28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	000a      	movs	r2, r1
 8000dce:	1cbb      	adds	r3, r7, #2
 8000dd0:	801a      	strh	r2, [r3, #0]
  uint16_t sum, tsum, i, j;
  uint32_t lsum;

  j = len >> 1;
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	18fb      	adds	r3, r7, r3
 8000dd6:	1cba      	adds	r2, r7, #2
 8000dd8:	8812      	ldrh	r2, [r2, #0]
 8000dda:	0852      	lsrs	r2, r2, #1
 8000ddc:	801a      	strh	r2, [r3, #0]
  lsum = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
  tsum = 0;
 8000de2:	230c      	movs	r3, #12
 8000de4:	18fb      	adds	r3, r7, r3
 8000de6:	2200      	movs	r2, #0
 8000de8:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < j; i++)
 8000dea:	2316      	movs	r3, #22
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	2200      	movs	r2, #0
 8000df0:	801a      	strh	r2, [r3, #0]
 8000df2:	e026      	b.n	8000e42 <checksum+0x7e>
    {
      tsum = data_buf[i * 2];
 8000df4:	2416      	movs	r4, #22
 8000df6:	193b      	adds	r3, r7, r4
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	189b      	adds	r3, r3, r2
 8000e02:	781a      	ldrb	r2, [r3, #0]
 8000e04:	200c      	movs	r0, #12
 8000e06:	183b      	adds	r3, r7, r0
 8000e08:	801a      	strh	r2, [r3, #0]
      tsum = tsum << 8;
 8000e0a:	183b      	adds	r3, r7, r0
 8000e0c:	183a      	adds	r2, r7, r0
 8000e0e:	8812      	ldrh	r2, [r2, #0]
 8000e10:	0212      	lsls	r2, r2, #8
 8000e12:	801a      	strh	r2, [r3, #0]
      tsum += data_buf[i * 2 + 1];
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	18d3      	adds	r3, r2, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b299      	uxth	r1, r3
 8000e24:	183b      	adds	r3, r7, r0
 8000e26:	183a      	adds	r2, r7, r0
 8000e28:	8812      	ldrh	r2, [r2, #0]
 8000e2a:	188a      	adds	r2, r1, r2
 8000e2c:	801a      	strh	r2, [r3, #0]
      lsum += tsum;
 8000e2e:	183b      	adds	r3, r7, r0
 8000e30:	881b      	ldrh	r3, [r3, #0]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	613b      	str	r3, [r7, #16]
  for (i = 0; i < j; i++)
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	881a      	ldrh	r2, [r3, #0]
 8000e3c:	193b      	adds	r3, r7, r4
 8000e3e:	3201      	adds	r2, #1
 8000e40:	801a      	strh	r2, [r3, #0]
 8000e42:	2116      	movs	r1, #22
 8000e44:	187a      	adds	r2, r7, r1
 8000e46:	230e      	movs	r3, #14
 8000e48:	18fb      	adds	r3, r7, r3
 8000e4a:	8812      	ldrh	r2, [r2, #0]
 8000e4c:	881b      	ldrh	r3, [r3, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d3d0      	bcc.n	8000df4 <checksum+0x30>
    }
   if (len % 2)
 8000e52:	1cbb      	adds	r3, r7, #2
 8000e54:	881b      	ldrh	r3, [r3, #0]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4013      	ands	r3, r2
 8000e5a:	b29b      	uxth	r3, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d010      	beq.n	8000e82 <checksum+0xbe>
    {
      tsum = data_buf[i * 2];
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	001a      	movs	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	189b      	adds	r3, r3, r2
 8000e6c:	781a      	ldrb	r2, [r3, #0]
 8000e6e:	210c      	movs	r1, #12
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	801a      	strh	r2, [r3, #0]
      lsum += (tsum << 8);
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	189b      	adds	r3, r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
    }
    sum = (uint16_t)lsum;
 8000e82:	210a      	movs	r1, #10
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	801a      	strh	r2, [r3, #0]
    sum = ~(sum + (lsum >> 16));
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	0c1b      	lsrs	r3, r3, #16
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	18d3      	adds	r3, r2, r3
 8000e96:	b29a      	uxth	r2, r3
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	43d2      	mvns	r2, r2
 8000e9c:	801a      	strh	r2, [r3, #0]
  return sum;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	881b      	ldrh	r3, [r3, #0]

}
 8000ea2:	0018      	movs	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	b007      	add	sp, #28
 8000ea8:	bd90      	pop	{r4, r7, pc}

08000eaa <htons>:


uint16_t htons( uint16_t hostshort)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	1dbb      	adds	r3, r7, #6
 8000eb4:	801a      	strh	r2, [r3, #0]
#if 1
  //#ifdef LITTLE_ENDIAN
	uint16_t netshort=0;
 8000eb6:	210e      	movs	r1, #14
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	2200      	movs	r2, #0
 8000ebc:	801a      	strh	r2, [r3, #0]
	netshort = (hostshort & 0xFF) << 8;
 8000ebe:	1dbb      	adds	r3, r7, #6
 8000ec0:	881b      	ldrh	r3, [r3, #0]
 8000ec2:	021a      	lsls	r2, r3, #8
 8000ec4:	187b      	adds	r3, r7, r1
 8000ec6:	801a      	strh	r2, [r3, #0]

	netshort |= ((hostshort >> 8)& 0xFF);
 8000ec8:	1dbb      	adds	r3, r7, #6
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	5e1b      	ldrsh	r3, [r3, r0]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	187b      	adds	r3, r7, r1
 8000ede:	801a      	strh	r2, [r3, #0]
	return netshort;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	881b      	ldrh	r3, [r3, #0]
#else
	return hostshort;
#endif
}
 8000ee4:	0018      	movs	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	b004      	add	sp, #16
 8000eea:	bd80      	pop	{r7, pc}

08000eec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef4:	699a      	ldr	r2, [r3, #24]
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_MspInit+0x44>)
 8000ef8:	2101      	movs	r1, #1
 8000efa:	430a      	orrs	r2, r1
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <HAL_MspInit+0x44>)
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2201      	movs	r2, #1
 8000f04:	4013      	ands	r3, r2
 8000f06:	607b      	str	r3, [r7, #4]
 8000f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0a:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <HAL_MspInit+0x44>)
 8000f0c:	69da      	ldr	r2, [r3, #28]
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_MspInit+0x44>)
 8000f10:	2180      	movs	r1, #128	; 0x80
 8000f12:	0549      	lsls	r1, r1, #21
 8000f14:	430a      	orrs	r2, r1
 8000f16:	61da      	str	r2, [r3, #28]
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <HAL_MspInit+0x44>)
 8000f1a:	69da      	ldr	r2, [r3, #28]
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	055b      	lsls	r3, r3, #21
 8000f20:	4013      	ands	r3, r2
 8000f22:	603b      	str	r3, [r7, #0]
 8000f24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	b002      	add	sp, #8
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	46c0      	nop			; (mov r8, r8)
 8000f30:	40021000 	.word	0x40021000

08000f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f34:	b590      	push	{r4, r7, lr}
 8000f36:	b08b      	sub	sp, #44	; 0x2c
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	2414      	movs	r4, #20
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0018      	movs	r0, r3
 8000f42:	2314      	movs	r3, #20
 8000f44:	001a      	movs	r2, r3
 8000f46:	2100      	movs	r1, #0
 8000f48:	f004 f9cf 	bl	80052ea <memset>
	  if(hspi->Instance==SPI2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1c      	ldr	r2, [pc, #112]	; (8000fc4 <HAL_SPI_MspInit+0x90>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d132      	bne.n	8000fbc <HAL_SPI_MspInit+0x88>
	  {
	  /* USER CODE BEGIN SPI2_MspInit 0 */

	  /* USER CODE END SPI2_MspInit 0 */
	    /* Peripheral clock enable */
	    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f58:	69da      	ldr	r2, [r3, #28]
 8000f5a:	4b1b      	ldr	r3, [pc, #108]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	01c9      	lsls	r1, r1, #7
 8000f60:	430a      	orrs	r2, r1
 8000f62:	61da      	str	r2, [r3, #28]
 8000f64:	4b18      	ldr	r3, [pc, #96]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f66:	69da      	ldr	r2, [r3, #28]
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	01db      	lsls	r3, r3, #7
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

	    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f74:	695a      	ldr	r2, [r3, #20]
 8000f76:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	02c9      	lsls	r1, r1, #11
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	615a      	str	r2, [r3, #20]
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_SPI_MspInit+0x94>)
 8000f82:	695a      	ldr	r2, [r3, #20]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	02db      	lsls	r3, r3, #11
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
	    /**SPI2 GPIO Configuration
	    PB13     ------> SPI2_SCK
	    PB14     ------> SPI2_MISO
	    PB15     ------> SPI2_MOSI
	    */
	    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	22e0      	movs	r2, #224	; 0xe0
 8000f92:	0212      	lsls	r2, r2, #8
 8000f94:	601a      	str	r2, [r3, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	0021      	movs	r1, r4
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	605a      	str	r2, [r3, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	60da      	str	r2, [r3, #12]
	    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	4a06      	ldr	r2, [pc, #24]	; (8000fcc <HAL_SPI_MspInit+0x98>)
 8000fb4:	0019      	movs	r1, r3
 8000fb6:	0010      	movs	r0, r2
 8000fb8:	f000 fa28 	bl	800140c <HAL_GPIO_Init>

	  /* USER CODE END SPI2_MspInit 1 */
	  }


}
 8000fbc:	46c0      	nop			; (mov r8, r8)
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b00b      	add	sp, #44	; 0x2c
 8000fc2:	bd90      	pop	{r4, r7, pc}
 8000fc4:	40003800 	.word	0x40003800
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	48000400 	.word	0x48000400

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f916 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b086      	sub	sp, #24
 8001002:	af00      	add	r7, sp, #0
 8001004:	60f8      	str	r0, [r7, #12]
 8001006:	60b9      	str	r1, [r7, #8]
 8001008:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	e00a      	b.n	8001026 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001010:	e000      	b.n	8001014 <_read+0x16>
 8001012:	bf00      	nop
 8001014:	0001      	movs	r1, r0
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	1c5a      	adds	r2, r3, #1
 800101a:	60ba      	str	r2, [r7, #8]
 800101c:	b2ca      	uxtb	r2, r1
 800101e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	697a      	ldr	r2, [r7, #20]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	429a      	cmp	r2, r3
 800102c:	dbf0      	blt.n	8001010 <_read+0x12>
	}

return len;
 800102e:	687b      	ldr	r3, [r7, #4]
}
 8001030:	0018      	movs	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	b006      	add	sp, #24
 8001036:	bd80      	pop	{r7, pc}

08001038 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e009      	b.n	800105e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1c5a      	adds	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	0018      	movs	r0, r3
 8001054:	e000      	b.n	8001058 <_write+0x20>
 8001056:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	3301      	adds	r3, #1
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	429a      	cmp	r2, r3
 8001064:	dbf1      	blt.n	800104a <_write+0x12>
	}
	return len;
 8001066:	687b      	ldr	r3, [r7, #4]
}
 8001068:	0018      	movs	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	b006      	add	sp, #24
 800106e:	bd80      	pop	{r7, pc}

08001070 <_close>:

int _close(int file)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	return -1;
 8001078:	2301      	movs	r3, #1
 800107a:	425b      	negs	r3, r3
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}

08001084 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2280      	movs	r2, #128	; 0x80
 8001092:	0192      	lsls	r2, r2, #6
 8001094:	605a      	str	r2, [r3, #4]
	return 0;
 8001096:	2300      	movs	r3, #0
}
 8001098:	0018      	movs	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	b002      	add	sp, #8
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_isatty>:

int _isatty(int file)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	return 1;
 80010a8:	2301      	movs	r3, #1
}
 80010aa:	0018      	movs	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b002      	add	sp, #8
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
	return 0;
 80010be:	2300      	movs	r3, #0
}
 80010c0:	0018      	movs	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b004      	add	sp, #16
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d0:	4a14      	ldr	r2, [pc, #80]	; (8001124 <_sbrk+0x5c>)
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <_sbrk+0x60>)
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_sbrk+0x64>)
 80010e6:	4a12      	ldr	r2, [pc, #72]	; (8001130 <_sbrk+0x68>)
 80010e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	18d3      	adds	r3, r2, r3
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d207      	bcs.n	8001108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f8:	f004 f8c4 	bl	8005284 <__errno>
 80010fc:	0003      	movs	r3, r0
 80010fe:	220c      	movs	r2, #12
 8001100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001102:	2301      	movs	r3, #1
 8001104:	425b      	negs	r3, r3
 8001106:	e009      	b.n	800111c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <_sbrk+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800110e:	4b07      	ldr	r3, [pc, #28]	; (800112c <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	18d2      	adds	r2, r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <_sbrk+0x64>)
 8001118:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800111a:	68fb      	ldr	r3, [r7, #12]
}
 800111c:	0018      	movs	r0, r3
 800111e:	46bd      	mov	sp, r7
 8001120:	b006      	add	sp, #24
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20004000 	.word	0x20004000
 8001128:	00000400 	.word	0x00000400
 800112c:	200000c0 	.word	0x200000c0
 8001130:	200001b8 	.word	0x200001b8

08001134 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
	...

08001140 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001140:	480d      	ldr	r0, [pc, #52]	; (8001178 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001142:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480d      	ldr	r0, [pc, #52]	; (800117c <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490e      	ldr	r1, [pc, #56]	; (8001180 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0e      	ldr	r2, [pc, #56]	; (8001184 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0b      	ldr	r4, [pc, #44]	; (800118c <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800116a:	f7ff ffe3 	bl	8001134 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800116e:	f004 f88f 	bl	8005290 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001172:	f7ff f93d 	bl	80003f0 <main>

08001176 <LoopForever>:

LoopForever:
    b LoopForever
 8001176:	e7fe      	b.n	8001176 <LoopForever>
  ldr   r0, =_estack
 8001178:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800117c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001180:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001184:	0800664c 	.word	0x0800664c
  ldr r2, =_sbss
 8001188:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 800118c:	200001b8 	.word	0x200001b8

08001190 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001190:	e7fe      	b.n	8001190 <ADC1_COMP_IRQHandler>
	...

08001194 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <HAL_Init+0x24>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <HAL_Init+0x24>)
 800119e:	2110      	movs	r1, #16
 80011a0:	430a      	orrs	r2, r1
 80011a2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80011a4:	2000      	movs	r0, #0
 80011a6:	f000 f809 	bl	80011bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011aa:	f7ff fe9f 	bl	8000eec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011ae:	2300      	movs	r3, #0
}
 80011b0:	0018      	movs	r0, r3
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	40022000 	.word	0x40022000

080011bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_InitTick+0x5c>)
 80011c6:	681c      	ldr	r4, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x60>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	0019      	movs	r1, r3
 80011ce:	23fa      	movs	r3, #250	; 0xfa
 80011d0:	0098      	lsls	r0, r3, #2
 80011d2:	f7fe ffa3 	bl	800011c <__udivsi3>
 80011d6:	0003      	movs	r3, r0
 80011d8:	0019      	movs	r1, r3
 80011da:	0020      	movs	r0, r4
 80011dc:	f7fe ff9e 	bl	800011c <__udivsi3>
 80011e0:	0003      	movs	r3, r0
 80011e2:	0018      	movs	r0, r3
 80011e4:	f000 f905 	bl	80013f2 <HAL_SYSTICK_Config>
 80011e8:	1e03      	subs	r3, r0, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00f      	b.n	8001210 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d80b      	bhi.n	800120e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f6:	6879      	ldr	r1, [r7, #4]
 80011f8:	2301      	movs	r3, #1
 80011fa:	425b      	negs	r3, r3
 80011fc:	2200      	movs	r2, #0
 80011fe:	0018      	movs	r0, r3
 8001200:	f000 f8e2 	bl	80013c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_InitTick+0x64>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	0018      	movs	r0, r3
 8001212:	46bd      	mov	sp, r7
 8001214:	b003      	add	sp, #12
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	20000008 	.word	0x20000008
 800121c:	20000010 	.word	0x20000010
 8001220:	2000000c 	.word	0x2000000c

08001224 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <HAL_IncTick+0x1c>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	001a      	movs	r2, r3
 800122e:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_IncTick+0x20>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	18d2      	adds	r2, r2, r3
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_IncTick+0x20>)
 8001236:	601a      	str	r2, [r3, #0]
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	20000010 	.word	0x20000010
 8001244:	200001a4 	.word	0x200001a4

08001248 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  return uwTick;
 800124c:	4b02      	ldr	r3, [pc, #8]	; (8001258 <HAL_GetTick+0x10>)
 800124e:	681b      	ldr	r3, [r3, #0]
}
 8001250:	0018      	movs	r0, r3
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	200001a4 	.word	0x200001a4

0800125c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b084      	sub	sp, #16
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001264:	f7ff fff0 	bl	8001248 <HAL_GetTick>
 8001268:	0003      	movs	r3, r0
 800126a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	d005      	beq.n	8001282 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <HAL_Delay+0x44>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	001a      	movs	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	189b      	adds	r3, r3, r2
 8001280:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	f7ff ffe0 	bl	8001248 <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	429a      	cmp	r2, r3
 8001292:	d8f7      	bhi.n	8001284 <HAL_Delay+0x28>
  {
  }
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000010 	.word	0x20000010

080012a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	0002      	movs	r2, r0
 80012ac:	6039      	str	r1, [r7, #0]
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2b7f      	cmp	r3, #127	; 0x7f
 80012b8:	d828      	bhi.n	800130c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ba:	4a2f      	ldr	r2, [pc, #188]	; (8001378 <__NVIC_SetPriority+0xd4>)
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	33c0      	adds	r3, #192	; 0xc0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	589b      	ldr	r3, [r3, r2]
 80012ca:	1dfa      	adds	r2, r7, #7
 80012cc:	7812      	ldrb	r2, [r2, #0]
 80012ce:	0011      	movs	r1, r2
 80012d0:	2203      	movs	r2, #3
 80012d2:	400a      	ands	r2, r1
 80012d4:	00d2      	lsls	r2, r2, #3
 80012d6:	21ff      	movs	r1, #255	; 0xff
 80012d8:	4091      	lsls	r1, r2
 80012da:	000a      	movs	r2, r1
 80012dc:	43d2      	mvns	r2, r2
 80012de:	401a      	ands	r2, r3
 80012e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	019b      	lsls	r3, r3, #6
 80012e6:	22ff      	movs	r2, #255	; 0xff
 80012e8:	401a      	ands	r2, r3
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	0018      	movs	r0, r3
 80012f0:	2303      	movs	r3, #3
 80012f2:	4003      	ands	r3, r0
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f8:	481f      	ldr	r0, [pc, #124]	; (8001378 <__NVIC_SetPriority+0xd4>)
 80012fa:	1dfb      	adds	r3, r7, #7
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	b25b      	sxtb	r3, r3
 8001300:	089b      	lsrs	r3, r3, #2
 8001302:	430a      	orrs	r2, r1
 8001304:	33c0      	adds	r3, #192	; 0xc0
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800130a:	e031      	b.n	8001370 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800130c:	4a1b      	ldr	r2, [pc, #108]	; (800137c <__NVIC_SetPriority+0xd8>)
 800130e:	1dfb      	adds	r3, r7, #7
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	0019      	movs	r1, r3
 8001314:	230f      	movs	r3, #15
 8001316:	400b      	ands	r3, r1
 8001318:	3b08      	subs	r3, #8
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3306      	adds	r3, #6
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	3304      	adds	r3, #4
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1dfa      	adds	r2, r7, #7
 8001328:	7812      	ldrb	r2, [r2, #0]
 800132a:	0011      	movs	r1, r2
 800132c:	2203      	movs	r2, #3
 800132e:	400a      	ands	r2, r1
 8001330:	00d2      	lsls	r2, r2, #3
 8001332:	21ff      	movs	r1, #255	; 0xff
 8001334:	4091      	lsls	r1, r2
 8001336:	000a      	movs	r2, r1
 8001338:	43d2      	mvns	r2, r2
 800133a:	401a      	ands	r2, r3
 800133c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	019b      	lsls	r3, r3, #6
 8001342:	22ff      	movs	r2, #255	; 0xff
 8001344:	401a      	ands	r2, r3
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0018      	movs	r0, r3
 800134c:	2303      	movs	r3, #3
 800134e:	4003      	ands	r3, r0
 8001350:	00db      	lsls	r3, r3, #3
 8001352:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001354:	4809      	ldr	r0, [pc, #36]	; (800137c <__NVIC_SetPriority+0xd8>)
 8001356:	1dfb      	adds	r3, r7, #7
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	001c      	movs	r4, r3
 800135c:	230f      	movs	r3, #15
 800135e:	4023      	ands	r3, r4
 8001360:	3b08      	subs	r3, #8
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	430a      	orrs	r2, r1
 8001366:	3306      	adds	r3, #6
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	18c3      	adds	r3, r0, r3
 800136c:	3304      	adds	r3, #4
 800136e:	601a      	str	r2, [r3, #0]
}
 8001370:	46c0      	nop			; (mov r8, r8)
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1e5a      	subs	r2, r3, #1
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	045b      	lsls	r3, r3, #17
 8001390:	429a      	cmp	r2, r3
 8001392:	d301      	bcc.n	8001398 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001394:	2301      	movs	r3, #1
 8001396:	e010      	b.n	80013ba <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001398:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <SysTick_Config+0x44>)
 800139a:	687a      	ldr	r2, [r7, #4]
 800139c:	3a01      	subs	r2, #1
 800139e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a0:	2301      	movs	r3, #1
 80013a2:	425b      	negs	r3, r3
 80013a4:	2103      	movs	r1, #3
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff ff7c 	bl	80012a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <SysTick_Config+0x44>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <SysTick_Config+0x44>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	0018      	movs	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	210f      	movs	r1, #15
 80013d4:	187b      	adds	r3, r7, r1
 80013d6:	1c02      	adds	r2, r0, #0
 80013d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
 80013e2:	0011      	movs	r1, r2
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff5d 	bl	80012a4 <__NVIC_SetPriority>
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b004      	add	sp, #16
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ffbf 	bl	8001380 <SysTick_Config>
 8001402:	0003      	movs	r3, r0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	e155      	b.n	80016c8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2101      	movs	r1, #1
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	4013      	ands	r3, r2
 800142a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d100      	bne.n	8001434 <HAL_GPIO_Init+0x28>
 8001432:	e146      	b.n	80016c2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b01      	cmp	r3, #1
 800143a:	d00b      	beq.n	8001454 <HAL_GPIO_Init+0x48>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2b02      	cmp	r3, #2
 8001442:	d007      	beq.n	8001454 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001448:	2b11      	cmp	r3, #17
 800144a:	d003      	beq.n	8001454 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b12      	cmp	r3, #18
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	409a      	lsls	r2, r3
 80014c4:	0013      	movs	r3, r2
 80014c6:	43da      	mvns	r2, r3
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	409a      	lsls	r2, r3
 80014d8:	0013      	movs	r3, r2
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0xea>
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d123      	bne.n	800153e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	08da      	lsrs	r2, r3, #3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	3208      	adds	r2, #8
 80014fe:	0092      	lsls	r2, r2, #2
 8001500:	58d3      	ldr	r3, [r2, r3]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2207      	movs	r2, #7
 8001508:	4013      	ands	r3, r2
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	220f      	movs	r2, #15
 800150e:	409a      	lsls	r2, r3
 8001510:	0013      	movs	r3, r2
 8001512:	43da      	mvns	r2, r3
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4013      	ands	r3, r2
 8001518:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2107      	movs	r1, #7
 8001522:	400b      	ands	r3, r1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	409a      	lsls	r2, r3
 8001528:	0013      	movs	r3, r2
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	6939      	ldr	r1, [r7, #16]
 800153c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2203      	movs	r2, #3
 800155c:	401a      	ands	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	2380      	movs	r3, #128	; 0x80
 8001578:	055b      	lsls	r3, r3, #21
 800157a:	4013      	ands	r3, r2
 800157c:	d100      	bne.n	8001580 <HAL_GPIO_Init+0x174>
 800157e:	e0a0      	b.n	80016c2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001580:	4b57      	ldr	r3, [pc, #348]	; (80016e0 <HAL_GPIO_Init+0x2d4>)
 8001582:	699a      	ldr	r2, [r3, #24]
 8001584:	4b56      	ldr	r3, [pc, #344]	; (80016e0 <HAL_GPIO_Init+0x2d4>)
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b54      	ldr	r3, [pc, #336]	; (80016e0 <HAL_GPIO_Init+0x2d4>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2201      	movs	r2, #1
 8001592:	4013      	ands	r3, r2
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001598:	4a52      	ldr	r2, [pc, #328]	; (80016e4 <HAL_GPIO_Init+0x2d8>)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	589b      	ldr	r3, [r3, r2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4013      	ands	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	409a      	lsls	r2, r3
 80015b2:	0013      	movs	r3, r2
 80015b4:	43da      	mvns	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	2390      	movs	r3, #144	; 0x90
 80015c0:	05db      	lsls	r3, r3, #23
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d019      	beq.n	80015fa <HAL_GPIO_Init+0x1ee>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a47      	ldr	r2, [pc, #284]	; (80016e8 <HAL_GPIO_Init+0x2dc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1ea>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a46      	ldr	r2, [pc, #280]	; (80016ec <HAL_GPIO_Init+0x2e0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1e6>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a45      	ldr	r2, [pc, #276]	; (80016f0 <HAL_GPIO_Init+0x2e4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1e2>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a44      	ldr	r2, [pc, #272]	; (80016f4 <HAL_GPIO_Init+0x2e8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1de>
 80015e6:	2304      	movs	r3, #4
 80015e8:	e008      	b.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e006      	b.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015ee:	2303      	movs	r3, #3
 80015f0:	e004      	b.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015f2:	2302      	movs	r3, #2
 80015f4:	e002      	b.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_GPIO_Init+0x1f0>
 80015fa:	2300      	movs	r3, #0
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	2103      	movs	r1, #3
 8001600:	400a      	ands	r2, r1
 8001602:	0092      	lsls	r2, r2, #2
 8001604:	4093      	lsls	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800160c:	4935      	ldr	r1, [pc, #212]	; (80016e4 <HAL_GPIO_Init+0x2d8>)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	089b      	lsrs	r3, r3, #2
 8001612:	3302      	adds	r3, #2
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	693a      	ldr	r2, [r7, #16]
 8001618:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161a:	4b37      	ldr	r3, [pc, #220]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	2380      	movs	r3, #128	; 0x80
 8001630:	025b      	lsls	r3, r3, #9
 8001632:	4013      	ands	r3, r2
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163e:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001644:	4b2c      	ldr	r3, [pc, #176]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	43da      	mvns	r2, r3
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685a      	ldr	r2, [r3, #4]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	029b      	lsls	r3, r3, #10
 800165c:	4013      	ands	r3, r2
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	4313      	orrs	r3, r2
 8001666:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001668:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166e:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	43da      	mvns	r2, r3
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	4013      	ands	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685a      	ldr	r2, [r3, #4]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	035b      	lsls	r3, r3, #13
 8001686:	4013      	ands	r3, r2
 8001688:	d003      	beq.n	8001692 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	43da      	mvns	r2, r3
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	4013      	ands	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	039b      	lsls	r3, r3, #14
 80016b0:	4013      	ands	r3, r2
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016bc:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <HAL_GPIO_Init+0x2ec>)
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	3301      	adds	r3, #1
 80016c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	40da      	lsrs	r2, r3
 80016d0:	1e13      	subs	r3, r2, #0
 80016d2:	d000      	beq.n	80016d6 <HAL_GPIO_Init+0x2ca>
 80016d4:	e6a2      	b.n	800141c <HAL_GPIO_Init+0x10>
  } 
}
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	46c0      	nop			; (mov r8, r8)
 80016da:	46bd      	mov	sp, r7
 80016dc:	b006      	add	sp, #24
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	40010000 	.word	0x40010000
 80016e8:	48000400 	.word	0x48000400
 80016ec:	48000800 	.word	0x48000800
 80016f0:	48000c00 	.word	0x48000c00
 80016f4:	48001000 	.word	0x48001000
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	0008      	movs	r0, r1
 8001706:	0011      	movs	r1, r2
 8001708:	1cbb      	adds	r3, r7, #2
 800170a:	1c02      	adds	r2, r0, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	1c7b      	adds	r3, r7, #1
 8001710:	1c0a      	adds	r2, r1, #0
 8001712:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001714:	1c7b      	adds	r3, r7, #1
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d004      	beq.n	8001726 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800171c:	1cbb      	adds	r3, r7, #2
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001724:	e003      	b.n	800172e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001726:	1cbb      	adds	r3, r7, #2
 8001728:	881a      	ldrh	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	f000 fb76 	bl	8001e38 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2201      	movs	r2, #1
 8001752:	4013      	ands	r3, r2
 8001754:	d100      	bne.n	8001758 <HAL_RCC_OscConfig+0x20>
 8001756:	e08e      	b.n	8001876 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001758:	4bc5      	ldr	r3, [pc, #788]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	220c      	movs	r2, #12
 800175e:	4013      	ands	r3, r2
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00e      	beq.n	8001782 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001764:	4bc2      	ldr	r3, [pc, #776]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	220c      	movs	r2, #12
 800176a:	4013      	ands	r3, r2
 800176c:	2b08      	cmp	r3, #8
 800176e:	d117      	bne.n	80017a0 <HAL_RCC_OscConfig+0x68>
 8001770:	4bbf      	ldr	r3, [pc, #764]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	23c0      	movs	r3, #192	; 0xc0
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	401a      	ands	r2, r3
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	025b      	lsls	r3, r3, #9
 800177e:	429a      	cmp	r2, r3
 8001780:	d10e      	bne.n	80017a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	4bbb      	ldr	r3, [pc, #748]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	029b      	lsls	r3, r3, #10
 800178a:	4013      	ands	r3, r2
 800178c:	d100      	bne.n	8001790 <HAL_RCC_OscConfig+0x58>
 800178e:	e071      	b.n	8001874 <HAL_RCC_OscConfig+0x13c>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d000      	beq.n	800179a <HAL_RCC_OscConfig+0x62>
 8001798:	e06c      	b.n	8001874 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	f000 fb4c 	bl	8001e38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x80>
 80017a8:	4bb1      	ldr	r3, [pc, #708]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4bb0      	ldr	r3, [pc, #704]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017ae:	2180      	movs	r1, #128	; 0x80
 80017b0:	0249      	lsls	r1, r1, #9
 80017b2:	430a      	orrs	r2, r1
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	e02f      	b.n	8001818 <HAL_RCC_OscConfig+0xe0>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d10c      	bne.n	80017da <HAL_RCC_OscConfig+0xa2>
 80017c0:	4bab      	ldr	r3, [pc, #684]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4baa      	ldr	r3, [pc, #680]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017c6:	49ab      	ldr	r1, [pc, #684]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	4ba8      	ldr	r3, [pc, #672]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4ba7      	ldr	r3, [pc, #668]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017d2:	49a9      	ldr	r1, [pc, #676]	; (8001a78 <HAL_RCC_OscConfig+0x340>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e01e      	b.n	8001818 <HAL_RCC_OscConfig+0xe0>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b05      	cmp	r3, #5
 80017e0:	d10e      	bne.n	8001800 <HAL_RCC_OscConfig+0xc8>
 80017e2:	4ba3      	ldr	r3, [pc, #652]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	4ba2      	ldr	r3, [pc, #648]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017e8:	2180      	movs	r1, #128	; 0x80
 80017ea:	02c9      	lsls	r1, r1, #11
 80017ec:	430a      	orrs	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	4b9f      	ldr	r3, [pc, #636]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b9e      	ldr	r3, [pc, #632]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0249      	lsls	r1, r1, #9
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	e00b      	b.n	8001818 <HAL_RCC_OscConfig+0xe0>
 8001800:	4b9b      	ldr	r3, [pc, #620]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b9a      	ldr	r3, [pc, #616]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001806:	499b      	ldr	r1, [pc, #620]	; (8001a74 <HAL_RCC_OscConfig+0x33c>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	4b98      	ldr	r3, [pc, #608]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	4b97      	ldr	r3, [pc, #604]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001812:	4999      	ldr	r1, [pc, #612]	; (8001a78 <HAL_RCC_OscConfig+0x340>)
 8001814:	400a      	ands	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d014      	beq.n	800184a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001820:	f7ff fd12 	bl	8001248 <HAL_GetTick>
 8001824:	0003      	movs	r3, r0
 8001826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800182a:	f7ff fd0d 	bl	8001248 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b64      	cmp	r3, #100	; 0x64
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e2fd      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183c:	4b8c      	ldr	r3, [pc, #560]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	029b      	lsls	r3, r3, #10
 8001844:	4013      	ands	r3, r2
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0xf2>
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fcfd 	bl	8001248 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001854:	f7ff fcf8 	bl	8001248 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b64      	cmp	r3, #100	; 0x64
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e2e8      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001866:	4b82      	ldr	r3, [pc, #520]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	2380      	movs	r3, #128	; 0x80
 800186c:	029b      	lsls	r3, r3, #10
 800186e:	4013      	ands	r3, r2
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x11c>
 8001872:	e000      	b.n	8001876 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001874:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2202      	movs	r2, #2
 800187c:	4013      	ands	r3, r2
 800187e:	d100      	bne.n	8001882 <HAL_RCC_OscConfig+0x14a>
 8001880:	e06c      	b.n	800195c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001882:	4b7b      	ldr	r3, [pc, #492]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	220c      	movs	r2, #12
 8001888:	4013      	ands	r3, r2
 800188a:	d00e      	beq.n	80018aa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800188c:	4b78      	ldr	r3, [pc, #480]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	220c      	movs	r2, #12
 8001892:	4013      	ands	r3, r2
 8001894:	2b08      	cmp	r3, #8
 8001896:	d11f      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1a0>
 8001898:	4b75      	ldr	r3, [pc, #468]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	23c0      	movs	r3, #192	; 0xc0
 800189e:	025b      	lsls	r3, r3, #9
 80018a0:	401a      	ands	r2, r3
 80018a2:	2380      	movs	r3, #128	; 0x80
 80018a4:	021b      	lsls	r3, r3, #8
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d116      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018aa:	4b71      	ldr	r3, [pc, #452]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2202      	movs	r2, #2
 80018b0:	4013      	ands	r3, r2
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x188>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e2bb      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b6b      	ldr	r3, [pc, #428]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	22f8      	movs	r2, #248	; 0xf8
 80018c6:	4393      	bics	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	00da      	lsls	r2, r3, #3
 80018d0:	4b67      	ldr	r3, [pc, #412]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018d2:	430a      	orrs	r2, r1
 80018d4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d6:	e041      	b.n	800195c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d024      	beq.n	800192a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018e0:	4b63      	ldr	r3, [pc, #396]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80018e6:	2101      	movs	r1, #1
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fcac 	bl	8001248 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fca7 	bl	8001248 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e297      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d0f1      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001912:	4b57      	ldr	r3, [pc, #348]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	22f8      	movs	r2, #248	; 0xf8
 8001918:	4393      	bics	r3, r2
 800191a:	0019      	movs	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	00da      	lsls	r2, r3, #3
 8001922:	4b53      	ldr	r3, [pc, #332]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	e018      	b.n	800195c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192a:	4b51      	ldr	r3, [pc, #324]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b50      	ldr	r3, [pc, #320]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001930:	2101      	movs	r1, #1
 8001932:	438a      	bics	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7ff fc87 	bl	8001248 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001940:	f7ff fc82 	bl	8001248 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e272      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001952:	4b47      	ldr	r3, [pc, #284]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2202      	movs	r2, #2
 8001958:	4013      	ands	r3, r2
 800195a:	d1f1      	bne.n	8001940 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2208      	movs	r2, #8
 8001962:	4013      	ands	r3, r2
 8001964:	d036      	beq.n	80019d4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196e:	4b40      	ldr	r3, [pc, #256]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001970:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001972:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197a:	f7ff fc65 	bl	8001248 <HAL_GetTick>
 800197e:	0003      	movs	r3, r0
 8001980:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fc60 	bl	8001248 <HAL_GetTick>
 8001988:	0002      	movs	r2, r0
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e250      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2202      	movs	r2, #2
 800199c:	4013      	ands	r3, r2
 800199e:	d0f1      	beq.n	8001984 <HAL_RCC_OscConfig+0x24c>
 80019a0:	e018      	b.n	80019d4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a2:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019a8:	2101      	movs	r1, #1
 80019aa:	438a      	bics	r2, r1
 80019ac:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ae:	f7ff fc4b 	bl	8001248 <HAL_GetTick>
 80019b2:	0003      	movs	r3, r0
 80019b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019b8:	f7ff fc46 	bl	8001248 <HAL_GetTick>
 80019bc:	0002      	movs	r2, r0
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e236      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	2202      	movs	r2, #2
 80019d0:	4013      	ands	r3, r2
 80019d2:	d1f1      	bne.n	80019b8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2204      	movs	r2, #4
 80019da:	4013      	ands	r3, r2
 80019dc:	d100      	bne.n	80019e0 <HAL_RCC_OscConfig+0x2a8>
 80019de:	e0b5      	b.n	8001b4c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	201f      	movs	r0, #31
 80019e2:	183b      	adds	r3, r7, r0
 80019e4:	2200      	movs	r2, #0
 80019e6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019ea:	69da      	ldr	r2, [r3, #28]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	055b      	lsls	r3, r3, #21
 80019f0:	4013      	ands	r3, r2
 80019f2:	d110      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f4:	4b1e      	ldr	r3, [pc, #120]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019f6:	69da      	ldr	r2, [r3, #28]
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 80019fa:	2180      	movs	r1, #128	; 0x80
 80019fc:	0549      	lsls	r1, r1, #21
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61da      	str	r2, [r3, #28]
 8001a02:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	055b      	lsls	r3, r3, #21
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a10:	183b      	adds	r3, r7, r0
 8001a12:	2201      	movs	r2, #1
 8001a14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b19      	ldr	r3, [pc, #100]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d11a      	bne.n	8001a58 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a22:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 8001a28:	2180      	movs	r1, #128	; 0x80
 8001a2a:	0049      	lsls	r1, r1, #1
 8001a2c:	430a      	orrs	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a30:	f7ff fc0a 	bl	8001248 <HAL_GetTick>
 8001a34:	0003      	movs	r3, r0
 8001a36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7ff fc05 	bl	8001248 <HAL_GetTick>
 8001a3e:	0002      	movs	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b64      	cmp	r3, #100	; 0x64
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1f5      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <HAL_RCC_OscConfig+0x344>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	4013      	ands	r3, r2
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d10f      	bne.n	8001a80 <HAL_RCC_OscConfig+0x348>
 8001a60:	4b03      	ldr	r3, [pc, #12]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a62:	6a1a      	ldr	r2, [r3, #32]
 8001a64:	4b02      	ldr	r3, [pc, #8]	; (8001a70 <HAL_RCC_OscConfig+0x338>)
 8001a66:	2101      	movs	r1, #1
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	621a      	str	r2, [r3, #32]
 8001a6c:	e036      	b.n	8001adc <HAL_RCC_OscConfig+0x3a4>
 8001a6e:	46c0      	nop			; (mov r8, r8)
 8001a70:	40021000 	.word	0x40021000
 8001a74:	fffeffff 	.word	0xfffeffff
 8001a78:	fffbffff 	.word	0xfffbffff
 8001a7c:	40007000 	.word	0x40007000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d10c      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x36a>
 8001a88:	4bca      	ldr	r3, [pc, #808]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001a8a:	6a1a      	ldr	r2, [r3, #32]
 8001a8c:	4bc9      	ldr	r3, [pc, #804]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001a8e:	2101      	movs	r1, #1
 8001a90:	438a      	bics	r2, r1
 8001a92:	621a      	str	r2, [r3, #32]
 8001a94:	4bc7      	ldr	r3, [pc, #796]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001a96:	6a1a      	ldr	r2, [r3, #32]
 8001a98:	4bc6      	ldr	r3, [pc, #792]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001a9a:	2104      	movs	r1, #4
 8001a9c:	438a      	bics	r2, r1
 8001a9e:	621a      	str	r2, [r3, #32]
 8001aa0:	e01c      	b.n	8001adc <HAL_RCC_OscConfig+0x3a4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x38c>
 8001aaa:	4bc2      	ldr	r3, [pc, #776]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001aac:	6a1a      	ldr	r2, [r3, #32]
 8001aae:	4bc1      	ldr	r3, [pc, #772]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	621a      	str	r2, [r3, #32]
 8001ab6:	4bbf      	ldr	r3, [pc, #764]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001ab8:	6a1a      	ldr	r2, [r3, #32]
 8001aba:	4bbe      	ldr	r3, [pc, #760]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	621a      	str	r2, [r3, #32]
 8001ac2:	e00b      	b.n	8001adc <HAL_RCC_OscConfig+0x3a4>
 8001ac4:	4bbb      	ldr	r3, [pc, #748]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	6a1a      	ldr	r2, [r3, #32]
 8001ac8:	4bba      	ldr	r3, [pc, #744]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001aca:	2101      	movs	r1, #1
 8001acc:	438a      	bics	r2, r1
 8001ace:	621a      	str	r2, [r3, #32]
 8001ad0:	4bb8      	ldr	r3, [pc, #736]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001ad2:	6a1a      	ldr	r2, [r3, #32]
 8001ad4:	4bb7      	ldr	r3, [pc, #732]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001ad6:	2104      	movs	r1, #4
 8001ad8:	438a      	bics	r2, r1
 8001ada:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d014      	beq.n	8001b0e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fbb0 	bl	8001248 <HAL_GetTick>
 8001ae8:	0003      	movs	r3, r0
 8001aea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fbab 	bl	8001248 <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	69bb      	ldr	r3, [r7, #24]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4aaf      	ldr	r2, [pc, #700]	; (8001db8 <HAL_RCC_OscConfig+0x680>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e19a      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b02:	4bac      	ldr	r3, [pc, #688]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b04:	6a1b      	ldr	r3, [r3, #32]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d0f0      	beq.n	8001aee <HAL_RCC_OscConfig+0x3b6>
 8001b0c:	e013      	b.n	8001b36 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b0e:	f7ff fb9b 	bl	8001248 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b16:	e009      	b.n	8001b2c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff fb96 	bl	8001248 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	4aa5      	ldr	r2, [pc, #660]	; (8001db8 <HAL_RCC_OscConfig+0x680>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e185      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b2c:	4ba1      	ldr	r3, [pc, #644]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	2202      	movs	r2, #2
 8001b32:	4013      	ands	r3, r2
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b36:	231f      	movs	r3, #31
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d105      	bne.n	8001b4c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b42:	69da      	ldr	r2, [r3, #28]
 8001b44:	4b9b      	ldr	r3, [pc, #620]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b46:	499d      	ldr	r1, [pc, #628]	; (8001dbc <HAL_RCC_OscConfig+0x684>)
 8001b48:	400a      	ands	r2, r1
 8001b4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2210      	movs	r2, #16
 8001b52:	4013      	ands	r3, r2
 8001b54:	d063      	beq.n	8001c1e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	695b      	ldr	r3, [r3, #20]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12a      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b5e:	4b95      	ldr	r3, [pc, #596]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b62:	4b94      	ldr	r3, [pc, #592]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b64:	2104      	movs	r1, #4
 8001b66:	430a      	orrs	r2, r1
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b6a:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	4b91      	ldr	r3, [pc, #580]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fb67 	bl	8001248 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b80:	f7ff fb62 	bl	8001248 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e152      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b92:	4b88      	ldr	r3, [pc, #544]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f1      	beq.n	8001b80 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b9c:	4b85      	ldr	r3, [pc, #532]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	22f8      	movs	r2, #248	; 0xf8
 8001ba2:	4393      	bics	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	00da      	lsls	r2, r3, #3
 8001bac:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bb2:	e034      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	3305      	adds	r3, #5
 8001bba:	d111      	bne.n	8001be0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001bbc:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bc2:	2104      	movs	r1, #4
 8001bc4:	438a      	bics	r2, r1
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bc8:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bcc:	22f8      	movs	r2, #248	; 0xf8
 8001bce:	4393      	bics	r3, r2
 8001bd0:	0019      	movs	r1, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	00da      	lsls	r2, r3, #3
 8001bd8:	4b76      	ldr	r3, [pc, #472]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bde:	e01e      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001be0:	4b74      	ldr	r3, [pc, #464]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001be2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be4:	4b73      	ldr	r3, [pc, #460]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001be6:	2104      	movs	r1, #4
 8001be8:	430a      	orrs	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bec:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf0:	4b70      	ldr	r3, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf8:	f7ff fb26 	bl	8001248 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001c02:	f7ff fb21 	bl	8001248 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e111      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c14:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c18:	2202      	movs	r2, #2
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d1f1      	bne.n	8001c02 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2220      	movs	r2, #32
 8001c24:	4013      	ands	r3, r2
 8001c26:	d05c      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c28:	4b62      	ldr	r3, [pc, #392]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	d00e      	beq.n	8001c52 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c34:	4b5f      	ldr	r3, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	220c      	movs	r2, #12
 8001c3a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d114      	bne.n	8001c6a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001c40:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	23c0      	movs	r3, #192	; 0xc0
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	401a      	ands	r2, r3
 8001c4a:	23c0      	movs	r3, #192	; 0xc0
 8001c4c:	025b      	lsls	r3, r3, #9
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d10b      	bne.n	8001c6a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001c52:	4b58      	ldr	r3, [pc, #352]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	025b      	lsls	r3, r3, #9
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d040      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x5a8>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d03c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e0e6      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d01b      	beq.n	8001caa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001c72:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	0249      	lsls	r1, r1, #9
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff fae2 	bl	8001248 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c8a:	f7ff fadd 	bl	8001248 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0cd      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001c9c:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	025b      	lsls	r3, r3, #9
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x552>
 8001ca8:	e01b      	b.n	8001ce2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001caa:	4b42      	ldr	r3, [pc, #264]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cae:	4b41      	ldr	r3, [pc, #260]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001cb0:	4943      	ldr	r1, [pc, #268]	; (8001dc0 <HAL_RCC_OscConfig+0x688>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff fac7 	bl	8001248 <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cc0:	f7ff fac2 	bl	8001248 <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e0b2      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001cd2:	4b38      	ldr	r3, [pc, #224]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cd6:	2380      	movs	r3, #128	; 0x80
 8001cd8:	025b      	lsls	r3, r3, #9
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x588>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ce0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d100      	bne.n	8001cec <HAL_RCC_OscConfig+0x5b4>
 8001cea:	e0a4      	b.n	8001e36 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	220c      	movs	r2, #12
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	2b08      	cmp	r3, #8
 8001cf6:	d100      	bne.n	8001cfa <HAL_RCC_OscConfig+0x5c2>
 8001cf8:	e078      	b.n	8001dec <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d14c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d02:	4b2c      	ldr	r3, [pc, #176]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d08:	492e      	ldr	r1, [pc, #184]	; (8001dc4 <HAL_RCC_OscConfig+0x68c>)
 8001d0a:	400a      	ands	r2, r1
 8001d0c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fa9b 	bl	8001248 <HAL_GetTick>
 8001d12:	0003      	movs	r3, r0
 8001d14:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff fa96 	bl	8001248 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e086      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	2380      	movs	r3, #128	; 0x80
 8001d30:	049b      	lsls	r3, r3, #18
 8001d32:	4013      	ands	r3, r2
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	4393      	bics	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a1e      	ldr	r2, [pc, #120]	; (8001dc8 <HAL_RCC_OscConfig+0x690>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	431a      	orrs	r2, r3
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d60:	430a      	orrs	r2, r1
 8001d62:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d6a:	2180      	movs	r1, #128	; 0x80
 8001d6c:	0449      	lsls	r1, r1, #17
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa69 	bl	8001248 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff fa64 	bl	8001248 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e054      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	049b      	lsls	r3, r3, #18
 8001d96:	4013      	ands	r3, r2
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x644>
 8001d9a:	e04c      	b.n	8001e36 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b05      	ldr	r3, [pc, #20]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b04      	ldr	r3, [pc, #16]	; (8001db4 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	4908      	ldr	r1, [pc, #32]	; (8001dc4 <HAL_RCC_OscConfig+0x68c>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff fa4e 	bl	8001248 <HAL_GetTick>
 8001dac:	0003      	movs	r3, r0
 8001dae:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x6a6>
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	40021000 	.word	0x40021000
 8001db8:	00001388 	.word	0x00001388
 8001dbc:	efffffff 	.word	0xefffffff
 8001dc0:	fffeffff 	.word	0xfffeffff
 8001dc4:	feffffff 	.word	0xfeffffff
 8001dc8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff fa3c 	bl	8001248 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e02c      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_RCC_OscConfig+0x708>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	049b      	lsls	r3, r3, #18
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x694>
 8001dea:	e024      	b.n	8001e36 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e01f      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001df8:	4b11      	ldr	r3, [pc, #68]	; (8001e40 <HAL_RCC_OscConfig+0x708>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001dfe:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <HAL_RCC_OscConfig+0x708>)
 8001e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e02:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	025b      	lsls	r3, r3, #9
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d10e      	bne.n	8001e32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	220f      	movs	r2, #15
 8001e18:	401a      	ands	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d107      	bne.n	8001e32 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	23f0      	movs	r3, #240	; 0xf0
 8001e26:	039b      	lsls	r3, r3, #14
 8001e28:	401a      	ands	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d001      	beq.n	8001e36 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b008      	add	sp, #32
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d101      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0bf      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e58:	4b61      	ldr	r3, [pc, #388]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	4013      	ands	r3, r2
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d911      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e66:	4b5e      	ldr	r3, [pc, #376]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	4393      	bics	r3, r2
 8001e6e:	0019      	movs	r1, r3
 8001e70:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001e72:	683a      	ldr	r2, [r7, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4013      	ands	r3, r2
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d001      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e0a6      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2202      	movs	r2, #2
 8001e90:	4013      	ands	r3, r2
 8001e92:	d015      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2204      	movs	r2, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d006      	beq.n	8001eac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e9e:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ea4:	21e0      	movs	r1, #224	; 0xe0
 8001ea6:	00c9      	lsls	r1, r1, #3
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	22f0      	movs	r2, #240	; 0xf0
 8001eb2:	4393      	bics	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689a      	ldr	r2, [r3, #8]
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d04c      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	029b      	lsls	r3, r3, #10
 8001eda:	4013      	ands	r3, r2
 8001edc:	d120      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e07a      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d107      	bne.n	8001efa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b3e      	ldr	r3, [pc, #248]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	2380      	movs	r3, #128	; 0x80
 8001ef0:	049b      	lsls	r3, r3, #18
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d114      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e06e      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d107      	bne.n	8001f12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001f02:	4b38      	ldr	r3, [pc, #224]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	025b      	lsls	r3, r3, #9
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d108      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e062      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f12:	4b34      	ldr	r3, [pc, #208]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e05b      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f20:	4b30      	ldr	r3, [pc, #192]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2203      	movs	r2, #3
 8001f26:	4393      	bics	r3, r2
 8001f28:	0019      	movs	r1, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b2d      	ldr	r3, [pc, #180]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f988 	bl	8001248 <HAL_GetTick>
 8001f38:	0003      	movs	r3, r0
 8001f3a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	e009      	b.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f3e:	f7ff f983 	bl	8001248 <HAL_GetTick>
 8001f42:	0002      	movs	r2, r0
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	4a27      	ldr	r2, [pc, #156]	; (8001fe8 <HAL_RCC_ClockConfig+0x1a4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e042      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	220c      	movs	r2, #12
 8001f58:	401a      	ands	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d1ec      	bne.n	8001f3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f64:	4b1e      	ldr	r3, [pc, #120]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d211      	bcs.n	8001f96 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f72:	4b1b      	ldr	r3, [pc, #108]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	4393      	bics	r3, r2
 8001f7a:	0019      	movs	r1, r3
 8001f7c:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001f7e:	683a      	ldr	r2, [r7, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f84:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x19c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d001      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e020      	b.n	8001fd8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2204      	movs	r2, #4
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4a11      	ldr	r2, [pc, #68]	; (8001fec <HAL_RCC_ClockConfig+0x1a8>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	0019      	movs	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001fb4:	f000 f820 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb8:	0001      	movs	r1, r0
 8001fba:	4b0a      	ldr	r3, [pc, #40]	; (8001fe4 <HAL_RCC_ClockConfig+0x1a0>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_RCC_ClockConfig+0x1ac>)
 8001fc6:	5cd3      	ldrb	r3, [r2, r3]
 8001fc8:	000a      	movs	r2, r1
 8001fca:	40da      	lsrs	r2, r3
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b0>)
 8001fce:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f7ff f8f3 	bl	80011bc <HAL_InitTick>
  
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	0018      	movs	r0, r3
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	b004      	add	sp, #16
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	00001388 	.word	0x00001388
 8001fec:	fffff8ff 	.word	0xfffff8ff
 8001ff0:	0800655c 	.word	0x0800655c
 8001ff4:	20000008 	.word	0x20000008

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b08f      	sub	sp, #60	; 0x3c
 8001ffc:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001ffe:	2314      	movs	r3, #20
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	4a38      	ldr	r2, [pc, #224]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xec>)
 8002004:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002006:	c313      	stmia	r3!, {r0, r1, r4}
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4a36      	ldr	r2, [pc, #216]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002010:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002012:	c313      	stmia	r3!, {r0, r1, r4}
 8002014:	6812      	ldr	r2, [r2, #0]
 8002016:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002020:	2300      	movs	r3, #0
 8002022:	637b      	str	r3, [r7, #52]	; 0x34
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf4>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002034:	220c      	movs	r2, #12
 8002036:	4013      	ands	r3, r2
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d047      	beq.n	80020cc <HAL_RCC_GetSysClockFreq+0xd4>
 800203c:	d849      	bhi.n	80020d2 <HAL_RCC_GetSysClockFreq+0xda>
 800203e:	2b04      	cmp	r3, #4
 8002040:	d002      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
 8002042:	2b08      	cmp	r3, #8
 8002044:	d003      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x56>
 8002046:	e044      	b.n	80020d2 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002048:	4b29      	ldr	r3, [pc, #164]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800204a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800204c:	e044      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	0c9b      	lsrs	r3, r3, #18
 8002052:	220f      	movs	r2, #15
 8002054:	4013      	ands	r3, r2
 8002056:	2214      	movs	r2, #20
 8002058:	18ba      	adds	r2, r7, r2
 800205a:	5cd3      	ldrb	r3, [r2, r3]
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_GetSysClockFreq+0xf4>)
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	220f      	movs	r2, #15
 8002064:	4013      	ands	r3, r2
 8002066:	1d3a      	adds	r2, r7, #4
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800206c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800206e:	23c0      	movs	r3, #192	; 0xc0
 8002070:	025b      	lsls	r3, r3, #9
 8002072:	401a      	ands	r2, r3
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	429a      	cmp	r2, r3
 800207a:	d109      	bne.n	8002090 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800207c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800207e:	481c      	ldr	r0, [pc, #112]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002080:	f7fe f84c 	bl	800011c <__udivsi3>
 8002084:	0003      	movs	r3, r0
 8002086:	001a      	movs	r2, r3
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	4353      	muls	r3, r2
 800208c:	637b      	str	r3, [r7, #52]	; 0x34
 800208e:	e01a      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002092:	23c0      	movs	r3, #192	; 0xc0
 8002094:	025b      	lsls	r3, r3, #9
 8002096:	401a      	ands	r2, r3
 8002098:	23c0      	movs	r3, #192	; 0xc0
 800209a:	025b      	lsls	r3, r3, #9
 800209c:	429a      	cmp	r2, r3
 800209e:	d109      	bne.n	80020b4 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020a2:	4814      	ldr	r0, [pc, #80]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020a4:	f7fe f83a 	bl	800011c <__udivsi3>
 80020a8:	0003      	movs	r3, r0
 80020aa:	001a      	movs	r2, r3
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	4353      	muls	r3, r2
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b6:	480e      	ldr	r0, [pc, #56]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020b8:	f7fe f830 	bl	800011c <__udivsi3>
 80020bc:	0003      	movs	r3, r0
 80020be:	001a      	movs	r2, r3
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	4353      	muls	r3, r2
 80020c4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80020c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020ca:	e005      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d0:	e002      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d2:	4b07      	ldr	r3, [pc, #28]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020d6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80020da:	0018      	movs	r0, r3
 80020dc:	46bd      	mov	sp, r7
 80020de:	b00f      	add	sp, #60	; 0x3c
 80020e0:	bd90      	pop	{r4, r7, pc}
 80020e2:	46c0      	nop			; (mov r8, r8)
 80020e4:	0800653c 	.word	0x0800653c
 80020e8:	0800654c 	.word	0x0800654c
 80020ec:	40021000 	.word	0x40021000
 80020f0:	007a1200 	.word	0x007a1200
 80020f4:	02dc6c00 	.word	0x02dc6c00

080020f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	025b      	lsls	r3, r3, #9
 8002110:	4013      	ands	r3, r2
 8002112:	d100      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002114:	e08e      	b.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2017      	movs	r0, #23
 8002118:	183b      	adds	r3, r7, r0
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800211e:	4b6e      	ldr	r3, [pc, #440]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	2380      	movs	r3, #128	; 0x80
 8002124:	055b      	lsls	r3, r3, #21
 8002126:	4013      	ands	r3, r2
 8002128:	d110      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b6b      	ldr	r3, [pc, #428]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800212c:	69da      	ldr	r2, [r3, #28]
 800212e:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002130:	2180      	movs	r1, #128	; 0x80
 8002132:	0549      	lsls	r1, r1, #21
 8002134:	430a      	orrs	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
 8002138:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800213a:	69da      	ldr	r2, [r3, #28]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	055b      	lsls	r3, r3, #21
 8002140:	4013      	ands	r3, r2
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002146:	183b      	adds	r3, r7, r0
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214c:	4b63      	ldr	r3, [pc, #396]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4013      	ands	r3, r2
 8002156:	d11a      	bne.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002158:	4b60      	ldr	r3, [pc, #384]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4b5f      	ldr	r3, [pc, #380]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800215e:	2180      	movs	r1, #128	; 0x80
 8002160:	0049      	lsls	r1, r1, #1
 8002162:	430a      	orrs	r2, r1
 8002164:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002166:	f7ff f86f 	bl	8001248 <HAL_GetTick>
 800216a:	0003      	movs	r3, r0
 800216c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	e008      	b.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002170:	f7ff f86a 	bl	8001248 <HAL_GetTick>
 8002174:	0002      	movs	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0a6      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b56      	ldr	r3, [pc, #344]	; (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	2380      	movs	r3, #128	; 0x80
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d0f0      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800218e:	4b52      	ldr	r3, [pc, #328]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	23c0      	movs	r3, #192	; 0xc0
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4013      	ands	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d034      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	23c0      	movs	r3, #192	; 0xc0
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d02c      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021b0:	4b49      	ldr	r3, [pc, #292]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	4a4a      	ldr	r2, [pc, #296]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021bc:	6a1a      	ldr	r2, [r3, #32]
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	0249      	lsls	r1, r1, #9
 80021c4:	430a      	orrs	r2, r1
 80021c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021c8:	4b43      	ldr	r3, [pc, #268]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ca:	6a1a      	ldr	r2, [r3, #32]
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021ce:	4945      	ldr	r1, [pc, #276]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80021d4:	4b40      	ldr	r3, [pc, #256]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	4013      	ands	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7ff f831 	bl	8001248 <HAL_GetTick>
 80021e6:	0003      	movs	r3, r0
 80021e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ea:	e009      	b.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ec:	f7ff f82c 	bl	8001248 <HAL_GetTick>
 80021f0:	0002      	movs	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	4a3c      	ldr	r2, [pc, #240]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e067      	b.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d0f0      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800220a:	4b33      	ldr	r3, [pc, #204]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002210:	4013      	ands	r3, r2
 8002212:	0019      	movs	r1, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800221a:	430a      	orrs	r2, r1
 800221c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800221e:	2317      	movs	r3, #23
 8002220:	18fb      	adds	r3, r7, r3
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b01      	cmp	r3, #1
 8002226:	d105      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002228:	4b2b      	ldr	r3, [pc, #172]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222a:	69da      	ldr	r2, [r3, #28]
 800222c:	4b2a      	ldr	r3, [pc, #168]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800222e:	492f      	ldr	r1, [pc, #188]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002230:	400a      	ands	r2, r1
 8002232:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2201      	movs	r2, #1
 800223a:	4013      	ands	r3, r2
 800223c:	d009      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223e:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	2203      	movs	r2, #3
 8002244:	4393      	bics	r3, r2
 8002246:	0019      	movs	r1, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b22      	ldr	r3, [pc, #136]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800224e:	430a      	orrs	r2, r1
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2202      	movs	r2, #2
 8002258:	4013      	ands	r3, r2
 800225a:	d009      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800225e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002262:	4013      	ands	r3, r2
 8002264:	0019      	movs	r1, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800226c:	430a      	orrs	r2, r1
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2220      	movs	r2, #32
 8002276:	4013      	ands	r3, r2
 8002278:	d009      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	2210      	movs	r2, #16
 8002280:	4393      	bics	r3, r2
 8002282:	0019      	movs	r1, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800228a:	430a      	orrs	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	4013      	ands	r3, r2
 8002298:	d009      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	2280      	movs	r2, #128	; 0x80
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	; 0x80
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	d009      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022ba:	4b07      	ldr	r3, [pc, #28]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	2240      	movs	r2, #64	; 0x40
 80022c0:	4393      	bics	r3, r2
 80022c2:	0019      	movs	r1, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80022ca:	430a      	orrs	r2, r1
 80022cc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	0018      	movs	r0, r3
 80022d2:	46bd      	mov	sp, r7
 80022d4:	b006      	add	sp, #24
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
 80022e0:	fffffcff 	.word	0xfffffcff
 80022e4:	fffeffff 	.word	0xfffeffff
 80022e8:	00001388 	.word	0x00001388
 80022ec:	efffffff 	.word	0xefffffff
 80022f0:	fffcffff 	.word	0xfffcffff

080022f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0a8      	b.n	8002458 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	d109      	bne.n	8002322 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	2382      	movs	r3, #130	; 0x82
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	429a      	cmp	r2, r3
 8002318:	d009      	beq.n	800232e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	61da      	str	r2, [r3, #28]
 8002320:	e005      	b.n	800232e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	225d      	movs	r2, #93	; 0x5d
 8002338:	5c9b      	ldrb	r3, [r3, r2]
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	225c      	movs	r2, #92	; 0x5c
 8002344:	2100      	movs	r1, #0
 8002346:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0018      	movs	r0, r3
 800234c:	f7fe fdf2 	bl	8000f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	225d      	movs	r2, #93	; 0x5d
 8002354:	2102      	movs	r1, #2
 8002356:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2140      	movs	r1, #64	; 0x40
 8002364:	438a      	bics	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	23e0      	movs	r3, #224	; 0xe0
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	429a      	cmp	r2, r3
 8002372:	d902      	bls.n	800237a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	e002      	b.n	8002380 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	015b      	lsls	r3, r3, #5
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	23f0      	movs	r3, #240	; 0xf0
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	429a      	cmp	r2, r3
 800238a:	d008      	beq.n	800239e <HAL_SPI_Init+0xaa>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	23e0      	movs	r3, #224	; 0xe0
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	429a      	cmp	r2, r3
 8002396:	d002      	beq.n	800239e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	2382      	movs	r3, #130	; 0x82
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	401a      	ands	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6899      	ldr	r1, [r3, #8]
 80023ac:	2384      	movs	r3, #132	; 0x84
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	400b      	ands	r3, r1
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	2102      	movs	r1, #2
 80023ba:	400b      	ands	r3, r1
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	2101      	movs	r1, #1
 80023c4:	400b      	ands	r3, r1
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6999      	ldr	r1, [r3, #24]
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	400b      	ands	r3, r1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	2138      	movs	r1, #56	; 0x38
 80023da:	400b      	ands	r3, r1
 80023dc:	431a      	orrs	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	2180      	movs	r1, #128	; 0x80
 80023e4:	400b      	ands	r3, r1
 80023e6:	431a      	orrs	r2, r3
 80023e8:	0011      	movs	r1, r2
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	019b      	lsls	r3, r3, #6
 80023f2:	401a      	ands	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	0c1b      	lsrs	r3, r3, #16
 8002402:	2204      	movs	r2, #4
 8002404:	401a      	ands	r2, r3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240a:	2110      	movs	r1, #16
 800240c:	400b      	ands	r3, r1
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002414:	2108      	movs	r1, #8
 8002416:	400b      	ands	r3, r1
 8002418:	431a      	orrs	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68d9      	ldr	r1, [r3, #12]
 800241e:	23f0      	movs	r3, #240	; 0xf0
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	400b      	ands	r3, r1
 8002424:	431a      	orrs	r2, r3
 8002426:	0011      	movs	r1, r2
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	015b      	lsls	r3, r3, #5
 800242e:	401a      	ands	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	69da      	ldr	r2, [r3, #28]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4907      	ldr	r1, [pc, #28]	; (8002460 <HAL_SPI_Init+0x16c>)
 8002444:	400a      	ands	r2, r1
 8002446:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	225d      	movs	r2, #93	; 0x5d
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b004      	add	sp, #16
 800245e:	bd80      	pop	{r7, pc}
 8002460:	fffff7ff 	.word	0xfffff7ff

08002464 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	60b9      	str	r1, [r7, #8]
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	1dbb      	adds	r3, r7, #6
 8002472:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	225c      	movs	r2, #92	; 0x5c
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_SPI_Transmit+0x26>
 8002486:	2302      	movs	r3, #2
 8002488:	e140      	b.n	800270c <HAL_SPI_Transmit+0x2a8>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	225c      	movs	r2, #92	; 0x5c
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002492:	f7fe fed9 	bl	8001248 <HAL_GetTick>
 8002496:	0003      	movs	r3, r0
 8002498:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800249a:	2316      	movs	r3, #22
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	1dba      	adds	r2, r7, #6
 80024a0:	8812      	ldrh	r2, [r2, #0]
 80024a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	225d      	movs	r2, #93	; 0x5d
 80024a8:	5c9b      	ldrb	r3, [r3, r2]
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d004      	beq.n	80024ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80024b0:	231f      	movs	r3, #31
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80024b8:	e11d      	b.n	80026f6 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_SPI_Transmit+0x64>
 80024c0:	1dbb      	adds	r3, r7, #6
 80024c2:	881b      	ldrh	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d104      	bne.n	80024d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80024d0:	e111      	b.n	80026f6 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	225d      	movs	r2, #93	; 0x5d
 80024d6:	2103      	movs	r1, #3
 80024d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68ba      	ldr	r2, [r7, #8]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1dba      	adds	r2, r7, #6
 80024ea:	8812      	ldrh	r2, [r2, #0]
 80024ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1dba      	adds	r2, r7, #6
 80024f2:	8812      	ldrh	r2, [r2, #0]
 80024f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2244      	movs	r2, #68	; 0x44
 8002500:	2100      	movs	r1, #0
 8002502:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2246      	movs	r2, #70	; 0x46
 8002508:	2100      	movs	r1, #0
 800250a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	2380      	movs	r3, #128	; 0x80
 800251e:	021b      	lsls	r3, r3, #8
 8002520:	429a      	cmp	r2, r3
 8002522:	d110      	bne.n	8002546 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2140      	movs	r1, #64	; 0x40
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2180      	movs	r1, #128	; 0x80
 8002540:	01c9      	lsls	r1, r1, #7
 8002542:	430a      	orrs	r2, r1
 8002544:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2240      	movs	r2, #64	; 0x40
 800254e:	4013      	ands	r3, r2
 8002550:	2b40      	cmp	r3, #64	; 0x40
 8002552:	d007      	beq.n	8002564 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68da      	ldr	r2, [r3, #12]
 8002568:	23e0      	movs	r3, #224	; 0xe0
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	429a      	cmp	r2, r3
 800256e:	d94e      	bls.n	800260e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <HAL_SPI_Transmit+0x11e>
 8002578:	2316      	movs	r3, #22
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	881b      	ldrh	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d13f      	bne.n	8002602 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	1c9a      	adds	r2, r3, #2
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025a6:	e02c      	b.n	8002602 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2202      	movs	r2, #2
 80025b0:	4013      	ands	r3, r2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d112      	bne.n	80025dc <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025ba:	881a      	ldrh	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c6:	1c9a      	adds	r2, r3, #2
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	3b01      	subs	r3, #1
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025da:	e012      	b.n	8002602 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025dc:	f7fe fe34 	bl	8001248 <HAL_GetTick>
 80025e0:	0002      	movs	r2, r0
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d802      	bhi.n	80025f2 <HAL_SPI_Transmit+0x18e>
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	3301      	adds	r3, #1
 80025f0:	d102      	bne.n	80025f8 <HAL_SPI_Transmit+0x194>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80025f8:	231f      	movs	r3, #31
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	2203      	movs	r2, #3
 80025fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8002600:	e079      	b.n	80026f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1cd      	bne.n	80025a8 <HAL_SPI_Transmit+0x144>
 800260c:	e04f      	b.n	80026ae <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d004      	beq.n	8002620 <HAL_SPI_Transmit+0x1bc>
 8002616:	2316      	movs	r3, #22
 8002618:	18fb      	adds	r3, r7, r3
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d141      	bne.n	80026a4 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	330c      	adds	r3, #12
 800262a:	7812      	ldrb	r2, [r2, #0]
 800262c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002646:	e02d      	b.n	80026a4 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2202      	movs	r2, #2
 8002650:	4013      	ands	r3, r2
 8002652:	2b02      	cmp	r3, #2
 8002654:	d113      	bne.n	800267e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	330c      	adds	r3, #12
 8002660:	7812      	ldrb	r2, [r2, #0]
 8002662:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800267c:	e012      	b.n	80026a4 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800267e:	f7fe fde3 	bl	8001248 <HAL_GetTick>
 8002682:	0002      	movs	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	d802      	bhi.n	8002694 <HAL_SPI_Transmit+0x230>
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	d102      	bne.n	800269a <HAL_SPI_Transmit+0x236>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 800269a:	231f      	movs	r3, #31
 800269c:	18fb      	adds	r3, r7, r3
 800269e:	2203      	movs	r2, #3
 80026a0:	701a      	strb	r2, [r3, #0]
          goto error;
 80026a2:	e028      	b.n	80026f6 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1cc      	bne.n	8002648 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	0018      	movs	r0, r3
 80026b6:	f000 fccd 	bl	8003054 <SPI_EndRxTxTransaction>
 80026ba:	1e03      	subs	r3, r0, #0
 80026bc:	d002      	beq.n	80026c4 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10a      	bne.n	80026e2 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026cc:	2300      	movs	r3, #0
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80026ea:	231f      	movs	r3, #31
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e000      	b.n	80026f6 <HAL_SPI_Transmit+0x292>
  }

error:
 80026f4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	225d      	movs	r2, #93	; 0x5d
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	225c      	movs	r2, #92	; 0x5c
 8002702:	2100      	movs	r1, #0
 8002704:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002706:	231f      	movs	r3, #31
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	781b      	ldrb	r3, [r3, #0]
}
 800270c:	0018      	movs	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	b008      	add	sp, #32
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b089      	sub	sp, #36	; 0x24
 8002718:	af02      	add	r7, sp, #8
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	1dbb      	adds	r3, r7, #6
 8002722:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002724:	2317      	movs	r3, #23
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	2382      	movs	r3, #130	; 0x82
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	429a      	cmp	r2, r3
 8002736:	d113      	bne.n	8002760 <HAL_SPI_Receive+0x4c>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10f      	bne.n	8002760 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	225d      	movs	r2, #93	; 0x5d
 8002744:	2104      	movs	r1, #4
 8002746:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	881c      	ldrh	r4, [r3, #0]
 800274c:	68ba      	ldr	r2, [r7, #8]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	0023      	movs	r3, r4
 8002758:	f000 f928 	bl	80029ac <HAL_SPI_TransmitReceive>
 800275c:	0003      	movs	r3, r0
 800275e:	e11c      	b.n	800299a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	225c      	movs	r2, #92	; 0x5c
 8002764:	5c9b      	ldrb	r3, [r3, r2]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_SPI_Receive+0x5a>
 800276a:	2302      	movs	r3, #2
 800276c:	e115      	b.n	800299a <HAL_SPI_Receive+0x286>
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	225c      	movs	r2, #92	; 0x5c
 8002772:	2101      	movs	r1, #1
 8002774:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002776:	f7fe fd67 	bl	8001248 <HAL_GetTick>
 800277a:	0003      	movs	r3, r0
 800277c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	225d      	movs	r2, #93	; 0x5d
 8002782:	5c9b      	ldrb	r3, [r3, r2]
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d004      	beq.n	8002794 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800278a:	2317      	movs	r3, #23
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	2202      	movs	r2, #2
 8002790:	701a      	strb	r2, [r3, #0]
    goto error;
 8002792:	e0f7      	b.n	8002984 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_SPI_Receive+0x8e>
 800279a:	1dbb      	adds	r3, r7, #6
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d104      	bne.n	80027ac <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80027a2:	2317      	movs	r3, #23
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
    goto error;
 80027aa:	e0eb      	b.n	8002984 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	225d      	movs	r2, #93	; 0x5d
 80027b0:	2104      	movs	r1, #4
 80027b2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2200      	movs	r2, #0
 80027b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	2144      	movs	r1, #68	; 0x44
 80027c6:	8812      	ldrh	r2, [r2, #0]
 80027c8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1dba      	adds	r2, r7, #6
 80027ce:	2146      	movs	r1, #70	; 0x46
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	68da      	ldr	r2, [r3, #12]
 80027f6:	23e0      	movs	r3, #224	; 0xe0
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d908      	bls.n	8002810 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4966      	ldr	r1, [pc, #408]	; (80029a4 <HAL_SPI_Receive+0x290>)
 800280a:	400a      	ands	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	e008      	b.n	8002822 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2180      	movs	r1, #128	; 0x80
 800281c:	0149      	lsls	r1, r1, #5
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	021b      	lsls	r3, r3, #8
 800282a:	429a      	cmp	r2, r3
 800282c:	d10f      	bne.n	800284e <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	; 0x40
 800283a:	438a      	bics	r2, r1
 800283c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4957      	ldr	r1, [pc, #348]	; (80029a8 <HAL_SPI_Receive+0x294>)
 800284a:	400a      	ands	r2, r1
 800284c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2240      	movs	r2, #64	; 0x40
 8002856:	4013      	ands	r3, r2
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d007      	beq.n	800286c <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2140      	movs	r1, #64	; 0x40
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	23e0      	movs	r3, #224	; 0xe0
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	429a      	cmp	r2, r3
 8002876:	d900      	bls.n	800287a <HAL_SPI_Receive+0x166>
 8002878:	e069      	b.n	800294e <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800287a:	e031      	b.n	80028e0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	2201      	movs	r2, #1
 8002884:	4013      	ands	r3, r2
 8002886:	2b01      	cmp	r3, #1
 8002888:	d117      	bne.n	80028ba <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	330c      	adds	r3, #12
 8002890:	001a      	movs	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	7812      	ldrb	r2, [r2, #0]
 8002898:	b2d2      	uxtb	r2, r2
 800289a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a0:	1c5a      	adds	r2, r3, #1
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2246      	movs	r2, #70	; 0x46
 80028aa:	5a9b      	ldrh	r3, [r3, r2]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b299      	uxth	r1, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2246      	movs	r2, #70	; 0x46
 80028b6:	5299      	strh	r1, [r3, r2]
 80028b8:	e012      	b.n	80028e0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ba:	f7fe fcc5 	bl	8001248 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d802      	bhi.n	80028d0 <HAL_SPI_Receive+0x1bc>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3301      	adds	r3, #1
 80028ce:	d102      	bne.n	80028d6 <HAL_SPI_Receive+0x1c2>
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80028d6:	2317      	movs	r3, #23
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	2203      	movs	r2, #3
 80028dc:	701a      	strb	r2, [r3, #0]
          goto error;
 80028de:	e051      	b.n	8002984 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2246      	movs	r2, #70	; 0x46
 80028e4:	5a9b      	ldrh	r3, [r3, r2]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1c7      	bne.n	800287c <HAL_SPI_Receive+0x168>
 80028ec:	e035      	b.n	800295a <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2201      	movs	r2, #1
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d115      	bne.n	8002928 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002906:	b292      	uxth	r2, r2
 8002908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	1c9a      	adds	r2, r3, #2
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2246      	movs	r2, #70	; 0x46
 8002918:	5a9b      	ldrh	r3, [r3, r2]
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b299      	uxth	r1, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2246      	movs	r2, #70	; 0x46
 8002924:	5299      	strh	r1, [r3, r2]
 8002926:	e012      	b.n	800294e <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002928:	f7fe fc8e 	bl	8001248 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d802      	bhi.n	800293e <HAL_SPI_Receive+0x22a>
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	3301      	adds	r3, #1
 800293c:	d102      	bne.n	8002944 <HAL_SPI_Receive+0x230>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002944:	2317      	movs	r3, #23
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	2203      	movs	r2, #3
 800294a:	701a      	strb	r2, [r3, #0]
          goto error;
 800294c:	e01a      	b.n	8002984 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2246      	movs	r2, #70	; 0x46
 8002952:	5a9b      	ldrh	r3, [r3, r2]
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1c9      	bne.n	80028ee <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	0018      	movs	r0, r3
 8002962:	f000 fb19 	bl	8002f98 <SPI_EndRxTransaction>
 8002966:	1e03      	subs	r3, r0, #0
 8002968:	d002      	beq.n	8002970 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2220      	movs	r2, #32
 800296e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002978:	2317      	movs	r3, #23
 800297a:	18fb      	adds	r3, r7, r3
 800297c:	2201      	movs	r2, #1
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e000      	b.n	8002984 <HAL_SPI_Receive+0x270>
  }

error :
 8002982:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	225d      	movs	r2, #93	; 0x5d
 8002988:	2101      	movs	r1, #1
 800298a:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	225c      	movs	r2, #92	; 0x5c
 8002990:	2100      	movs	r1, #0
 8002992:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002994:	2317      	movs	r3, #23
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	781b      	ldrb	r3, [r3, #0]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b007      	add	sp, #28
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	ffffefff 	.word	0xffffefff
 80029a8:	ffffbfff 	.word	0xffffbfff

080029ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b08a      	sub	sp, #40	; 0x28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	001a      	movs	r2, r3
 80029ba:	1cbb      	adds	r3, r7, #2
 80029bc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029c2:	2323      	movs	r3, #35	; 0x23
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	225c      	movs	r2, #92	; 0x5c
 80029ce:	5c9b      	ldrb	r3, [r3, r2]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_SPI_TransmitReceive+0x2c>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e1b5      	b.n	8002d44 <HAL_SPI_TransmitReceive+0x398>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	225c      	movs	r2, #92	; 0x5c
 80029dc:	2101      	movs	r1, #1
 80029de:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e0:	f7fe fc32 	bl	8001248 <HAL_GetTick>
 80029e4:	0003      	movs	r3, r0
 80029e6:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029e8:	201b      	movs	r0, #27
 80029ea:	183b      	adds	r3, r7, r0
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	215d      	movs	r1, #93	; 0x5d
 80029f0:	5c52      	ldrb	r2, [r2, r1]
 80029f2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80029fa:	2312      	movs	r3, #18
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	1cba      	adds	r2, r7, #2
 8002a00:	8812      	ldrh	r2, [r2, #0]
 8002a02:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a04:	183b      	adds	r3, r7, r0
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d011      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x84>
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	2382      	movs	r3, #130	; 0x82
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d107      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x7a>
 8002a1e:	183b      	adds	r3, r7, r0
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d004      	beq.n	8002a30 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002a26:	2323      	movs	r3, #35	; 0x23
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a2e:	e17e      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x98>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_SPI_TransmitReceive+0x98>
 8002a3c:	1cbb      	adds	r3, r7, #2
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d104      	bne.n	8002a4e <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002a44:	2323      	movs	r3, #35	; 0x23
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002a4c:	e16f      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	225d      	movs	r2, #93	; 0x5d
 8002a52:	5c9b      	ldrb	r3, [r3, r2]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d003      	beq.n	8002a62 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	225d      	movs	r2, #93	; 0x5d
 8002a5e:	2105      	movs	r1, #5
 8002a60:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	1cba      	adds	r2, r7, #2
 8002a72:	2146      	movs	r1, #70	; 0x46
 8002a74:	8812      	ldrh	r2, [r2, #0]
 8002a76:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1cba      	adds	r2, r7, #2
 8002a7c:	2144      	movs	r1, #68	; 0x44
 8002a7e:	8812      	ldrh	r2, [r2, #0]
 8002a80:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1cba      	adds	r2, r7, #2
 8002a8c:	8812      	ldrh	r2, [r2, #0]
 8002a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1cba      	adds	r2, r7, #2
 8002a94:	8812      	ldrh	r2, [r2, #0]
 8002a96:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68da      	ldr	r2, [r3, #12]
 8002aa8:	23e0      	movs	r3, #224	; 0xe0
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d908      	bls.n	8002ac2 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	49a4      	ldr	r1, [pc, #656]	; (8002d4c <HAL_SPI_TransmitReceive+0x3a0>)
 8002abc:	400a      	ands	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	e008      	b.n	8002ad4 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2180      	movs	r1, #128	; 0x80
 8002ace:	0149      	lsls	r1, r1, #5
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2240      	movs	r2, #64	; 0x40
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b40      	cmp	r3, #64	; 0x40
 8002ae0:	d007      	beq.n	8002af2 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2140      	movs	r1, #64	; 0x40
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	68da      	ldr	r2, [r3, #12]
 8002af6:	23e0      	movs	r3, #224	; 0xe0
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d800      	bhi.n	8002b00 <HAL_SPI_TransmitReceive+0x154>
 8002afe:	e07f      	b.n	8002c00 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d005      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x168>
 8002b08:	2312      	movs	r3, #18
 8002b0a:	18fb      	adds	r3, r7, r3
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d000      	beq.n	8002b14 <HAL_SPI_TransmitReceive+0x168>
 8002b12:	e069      	b.n	8002be8 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b18:	881a      	ldrh	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b24:	1c9a      	adds	r2, r3, #2
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b38:	e056      	b.n	8002be8 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2202      	movs	r2, #2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b02      	cmp	r3, #2
 8002b46:	d11b      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x1d4>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_SPI_TransmitReceive+0x1d4>
 8002b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d113      	bne.n	8002b80 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b5c:	881a      	ldrh	r2, [r3, #0]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b68:	1c9a      	adds	r2, r3, #2
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3b01      	subs	r3, #1
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4013      	ands	r3, r2
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11c      	bne.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2246      	movs	r2, #70	; 0x46
 8002b92:	5a9b      	ldrh	r3, [r3, r2]
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68da      	ldr	r2, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	1c9a      	adds	r2, r3, #2
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2246      	movs	r2, #70	; 0x46
 8002bb6:	5a9b      	ldrh	r3, [r3, r2]
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b299      	uxth	r1, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2246      	movs	r2, #70	; 0x46
 8002bc2:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bc8:	f7fe fb3e 	bl	8001248 <HAL_GetTick>
 8002bcc:	0002      	movs	r2, r0
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d807      	bhi.n	8002be8 <HAL_SPI_TransmitReceive+0x23c>
 8002bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bda:	3301      	adds	r3, #1
 8002bdc:	d004      	beq.n	8002be8 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002bde:	2323      	movs	r3, #35	; 0x23
 8002be0:	18fb      	adds	r3, r7, r3
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]
        goto error;
 8002be6:	e0a2      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1a3      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x18e>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2246      	movs	r2, #70	; 0x46
 8002bf6:	5a9b      	ldrh	r3, [r3, r2]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d19d      	bne.n	8002b3a <HAL_SPI_TransmitReceive+0x18e>
 8002bfe:	e085      	b.n	8002d0c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x268>
 8002c08:	2312      	movs	r3, #18
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d000      	beq.n	8002c14 <HAL_SPI_TransmitReceive+0x268>
 8002c12:	e070      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	7812      	ldrb	r2, [r2, #0]
 8002c20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c3a:	e05c      	b.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2202      	movs	r2, #2
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d11c      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d017      	beq.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d114      	bne.n	8002c84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	330c      	adds	r3, #12
 8002c64:	7812      	ldrb	r2, [r2, #0]
 8002c66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	3b01      	subs	r3, #1
 8002c7a:	b29a      	uxth	r2, r3
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d11e      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x324>
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2246      	movs	r2, #70	; 0x46
 8002c96:	5a9b      	ldrh	r3, [r3, r2]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d018      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	330c      	adds	r3, #12
 8002ca4:	001a      	movs	r2, r3
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	7812      	ldrb	r2, [r2, #0]
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	1c5a      	adds	r2, r3, #1
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2246      	movs	r2, #70	; 0x46
 8002cbe:	5a9b      	ldrh	r3, [r3, r2]
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b299      	uxth	r1, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2246      	movs	r2, #70	; 0x46
 8002cca:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002cd0:	f7fe faba 	bl	8001248 <HAL_GetTick>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d802      	bhi.n	8002ce6 <HAL_SPI_TransmitReceive+0x33a>
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_SPI_TransmitReceive+0x340>
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d104      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002cec:	2323      	movs	r3, #35	; 0x23
 8002cee:	18fb      	adds	r3, r7, r3
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]
        goto error;
 8002cf4:	e01b      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d19d      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x290>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2246      	movs	r2, #70	; 0x46
 8002d04:	5a9b      	ldrh	r3, [r3, r2]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d197      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d0c:	69fa      	ldr	r2, [r7, #28]
 8002d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f99e 	bl	8003054 <SPI_EndRxTxTransaction>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d007      	beq.n	8002d2c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002d1c:	2323      	movs	r3, #35	; 0x23
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2201      	movs	r2, #1
 8002d22:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	661a      	str	r2, [r3, #96]	; 0x60
 8002d2a:	e000      	b.n	8002d2e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002d2c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	225d      	movs	r2, #93	; 0x5d
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	225c      	movs	r2, #92	; 0x5c
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d3e:	2323      	movs	r3, #35	; 0x23
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	781b      	ldrb	r3, [r3, #0]
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b00a      	add	sp, #40	; 0x28
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	ffffefff 	.word	0xffffefff

08002d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	1dfb      	adds	r3, r7, #7
 8002d5e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d60:	f7fe fa72 	bl	8001248 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	18d3      	adds	r3, r2, r3
 8002d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d70:	f7fe fa6a 	bl	8001248 <HAL_GetTick>
 8002d74:	0003      	movs	r3, r0
 8002d76:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d78:	4b3a      	ldr	r3, [pc, #232]	; (8002e64 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	015b      	lsls	r3, r3, #5
 8002d7e:	0d1b      	lsrs	r3, r3, #20
 8002d80:	69fa      	ldr	r2, [r7, #28]
 8002d82:	4353      	muls	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d86:	e058      	b.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	d055      	beq.n	8002e3a <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d8e:	f7fe fa5b 	bl	8001248 <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d902      	bls.n	8002da4 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d142      	bne.n	8002e2a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	21e0      	movs	r1, #224	; 0xe0
 8002db0:	438a      	bics	r2, r1
 8002db2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	2382      	movs	r3, #130	; 0x82
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d113      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d005      	beq.n	8002dd8 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	689a      	ldr	r2, [r3, #8]
 8002dd0:	2380      	movs	r3, #128	; 0x80
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d107      	bne.n	8002de8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2140      	movs	r1, #64	; 0x40
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	019b      	lsls	r3, r3, #6
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d110      	bne.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	491a      	ldr	r1, [pc, #104]	; (8002e68 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002e00:	400a      	ands	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0189      	lsls	r1, r1, #6
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	225d      	movs	r2, #93	; 0x5d
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	225c      	movs	r2, #92	; 0x5c
 8002e22:	2100      	movs	r1, #0
 8002e24:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e017      	b.n	8002e5a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4013      	ands	r3, r2
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	425a      	negs	r2, r3
 8002e4a:	4153      	adcs	r3, r2
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	001a      	movs	r2, r3
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d197      	bne.n	8002d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	b008      	add	sp, #32
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	20000008 	.word	0x20000008
 8002e68:	ffffdfff 	.word	0xffffdfff

08002e6c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002e7a:	f7fe f9e5 	bl	8001248 <HAL_GetTick>
 8002e7e:	0002      	movs	r2, r0
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	18d3      	adds	r3, r2, r3
 8002e88:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e8a:	f7fe f9dd 	bl	8001248 <HAL_GetTick>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002e92:	4b3f      	ldr	r3, [pc, #252]	; (8002f90 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	0013      	movs	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	00da      	lsls	r2, r3, #3
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	0d1b      	lsrs	r3, r3, #20
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	4353      	muls	r3, r2
 8002ea6:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8002ea8:	e064      	b.n	8002f74 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	23c0      	movs	r3, #192	; 0xc0
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d106      	bne.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0x56>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d103      	bne.n	8002ec2 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	330c      	adds	r3, #12
 8002ec0:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	d055      	beq.n	8002f74 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ec8:	f7fe f9be 	bl	8001248 <HAL_GetTick>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d902      	bls.n	8002ede <SPI_WaitFifoStateUntilTimeout+0x72>
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d142      	bne.n	8002f64 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	685a      	ldr	r2, [r3, #4]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	21e0      	movs	r1, #224	; 0xe0
 8002eea:	438a      	bics	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	685a      	ldr	r2, [r3, #4]
 8002ef2:	2382      	movs	r3, #130	; 0x82
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d113      	bne.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	021b      	lsls	r3, r3, #8
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d005      	beq.n	8002f12 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d107      	bne.n	8002f22 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2140      	movs	r1, #64	; 0x40
 8002f1e:	438a      	bics	r2, r1
 8002f20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	019b      	lsls	r3, r3, #6
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d110      	bne.n	8002f50 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4916      	ldr	r1, [pc, #88]	; (8002f94 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	601a      	str	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	0189      	lsls	r1, r1, #6
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	225d      	movs	r2, #93	; 0x5d
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	225c      	movs	r2, #92	; 0x5c
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e010      	b.n	8002f86 <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	3b01      	subs	r3, #1
 8002f72:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d192      	bne.n	8002eaa <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	0018      	movs	r0, r3
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b008      	add	sp, #32
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	20000008 	.word	0x20000008
 8002f94:	ffffdfff 	.word	0xffffdfff

08002f98 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af02      	add	r7, sp, #8
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	2382      	movs	r3, #130	; 0x82
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d113      	bne.n	8002fd8 <SPI_EndRxTransaction+0x40>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d005      	beq.n	8002fc8 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d107      	bne.n	8002fd8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	438a      	bics	r2, r1
 8002fd6:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd8:	68ba      	ldr	r2, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	0013      	movs	r3, r2
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	2180      	movs	r1, #128	; 0x80
 8002fe6:	f7ff feb3 	bl	8002d50 <SPI_WaitFlagStateUntilTimeout>
 8002fea:	1e03      	subs	r3, r0, #0
 8002fec:	d007      	beq.n	8002ffe <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e026      	b.n	800304c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	2382      	movs	r3, #130	; 0x82
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	429a      	cmp	r2, r3
 8003008:	d11f      	bne.n	800304a <SPI_EndRxTransaction+0xb2>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	021b      	lsls	r3, r3, #8
 8003012:	429a      	cmp	r2, r3
 8003014:	d005      	beq.n	8003022 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	2380      	movs	r3, #128	; 0x80
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	429a      	cmp	r2, r3
 8003020:	d113      	bne.n	800304a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003022:	68ba      	ldr	r2, [r7, #8]
 8003024:	23c0      	movs	r3, #192	; 0xc0
 8003026:	00d9      	lsls	r1, r3, #3
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	0013      	movs	r3, r2
 8003030:	2200      	movs	r2, #0
 8003032:	f7ff ff1b 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 8003036:	1e03      	subs	r3, r0, #0
 8003038:	d007      	beq.n	800304a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	2220      	movs	r2, #32
 8003040:	431a      	orrs	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e000      	b.n	800304c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}

08003054 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003060:	68ba      	ldr	r2, [r7, #8]
 8003062:	23c0      	movs	r3, #192	; 0xc0
 8003064:	0159      	lsls	r1, r3, #5
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	0013      	movs	r3, r2
 800306e:	2200      	movs	r2, #0
 8003070:	f7ff fefc 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 8003074:	1e03      	subs	r3, r0, #0
 8003076:	d007      	beq.n	8003088 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800307c:	2220      	movs	r2, #32
 800307e:	431a      	orrs	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e027      	b.n	80030d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003088:	68ba      	ldr	r2, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	0013      	movs	r3, r2
 8003092:	2200      	movs	r2, #0
 8003094:	2180      	movs	r1, #128	; 0x80
 8003096:	f7ff fe5b 	bl	8002d50 <SPI_WaitFlagStateUntilTimeout>
 800309a:	1e03      	subs	r3, r0, #0
 800309c:	d007      	beq.n	80030ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	2220      	movs	r2, #32
 80030a4:	431a      	orrs	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e014      	b.n	80030d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	23c0      	movs	r3, #192	; 0xc0
 80030b2:	00d9      	lsls	r1, r3, #3
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	0013      	movs	r3, r2
 80030bc:	2200      	movs	r2, #0
 80030be:	f7ff fed5 	bl	8002e6c <SPI_WaitFifoStateUntilTimeout>
 80030c2:	1e03      	subs	r3, r0, #0
 80030c4:	d007      	beq.n	80030d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ca:	2220      	movs	r2, #32
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e000      	b.n	80030d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	0018      	movs	r0, r3
 80030da:	46bd      	mov	sp, r7
 80030dc:	b004      	add	sp, #16
 80030de:	bd80      	pop	{r7, pc}

080030e0 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80030e0:	b5b0      	push	{r4, r5, r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <WIZCHIP_READ+0xa0>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4798      	blx	r3
   WIZCHIP.CS._select();
 80030ee:	4b24      	ldr	r3, [pc, #144]	; (8003180 <WIZCHIP_READ+0xa0>)
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80030f4:	4b22      	ldr	r3, [pc, #136]	; (8003180 <WIZCHIP_READ+0xa0>)
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <WIZCHIP_READ+0x24>
 80030fc:	4b20      	ldr	r3, [pc, #128]	; (8003180 <WIZCHIP_READ+0xa0>)
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d114      	bne.n	800312e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003104:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <WIZCHIP_READ+0xa0>)
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	0c12      	lsrs	r2, r2, #16
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	0010      	movs	r0, r2
 8003110:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <WIZCHIP_READ+0xa0>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	0a12      	lsrs	r2, r2, #8
 800311a:	b2d2      	uxtb	r2, r2
 800311c:	0010      	movs	r0, r2
 800311e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <WIZCHIP_READ+0xa0>)
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	b2d2      	uxtb	r2, r2
 8003128:	0010      	movs	r0, r2
 800312a:	4798      	blx	r3
 800312c:	e014      	b.n	8003158 <WIZCHIP_READ+0x78>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	b2da      	uxtb	r2, r3
 8003134:	210c      	movs	r1, #12
 8003136:	187b      	adds	r3, r7, r1
 8003138:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	b2da      	uxtb	r2, r3
 8003140:	187b      	adds	r3, r7, r1
 8003142:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	b2da      	uxtb	r2, r3
 8003148:	187b      	adds	r3, r7, r1
 800314a:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800314c:	4b0c      	ldr	r3, [pc, #48]	; (8003180 <WIZCHIP_READ+0xa0>)
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	187a      	adds	r2, r7, r1
 8003152:	2103      	movs	r1, #3
 8003154:	0010      	movs	r0, r2
 8003156:	4798      	blx	r3
   }

   ret = WIZCHIP.IF.SPI._read_byte();
 8003158:	4b09      	ldr	r3, [pc, #36]	; (8003180 <WIZCHIP_READ+0xa0>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	250f      	movs	r5, #15
 800315e:	197c      	adds	r4, r7, r5
 8003160:	4798      	blx	r3
 8003162:	0003      	movs	r3, r0
 8003164:	7023      	strb	r3, [r4, #0]

   WIZCHIP.CS._deselect();
 8003166:	4b06      	ldr	r3, [pc, #24]	; (8003180 <WIZCHIP_READ+0xa0>)
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <WIZCHIP_READ+0xa0>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4798      	blx	r3
   return ret;
 8003172:	197b      	adds	r3, r7, r5
 8003174:	781b      	ldrb	r3, [r3, #0]
}
 8003176:	0018      	movs	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	b004      	add	sp, #16
 800317c:	bdb0      	pop	{r4, r5, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	20000014 	.word	0x20000014

08003184 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	000a      	movs	r2, r1
 800318e:	1cfb      	adds	r3, r7, #3
 8003190:	701a      	strb	r2, [r3, #0]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8003192:	4b26      	ldr	r3, [pc, #152]	; (800322c <WIZCHIP_WRITE+0xa8>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003198:	4b24      	ldr	r3, [pc, #144]	; (800322c <WIZCHIP_WRITE+0xa8>)
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2204      	movs	r2, #4
 80031a2:	4313      	orrs	r3, r2
 80031a4:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80031a6:	4b21      	ldr	r3, [pc, #132]	; (800322c <WIZCHIP_WRITE+0xa8>)
 80031a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d11a      	bne.n	80031e4 <WIZCHIP_WRITE+0x60>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80031ae:	4b1f      	ldr	r3, [pc, #124]	; (800322c <WIZCHIP_WRITE+0xa8>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	0c12      	lsrs	r2, r2, #16
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	0010      	movs	r0, r2
 80031ba:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <WIZCHIP_WRITE+0xa8>)
 80031be:	69db      	ldr	r3, [r3, #28]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	0a12      	lsrs	r2, r2, #8
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	0010      	movs	r0, r2
 80031c8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80031ca:	4b18      	ldr	r3, [pc, #96]	; (800322c <WIZCHIP_WRITE+0xa8>)
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	0010      	movs	r0, r2
 80031d4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80031d6:	4b15      	ldr	r3, [pc, #84]	; (800322c <WIZCHIP_WRITE+0xa8>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	1cfa      	adds	r2, r7, #3
 80031dc:	7812      	ldrb	r2, [r2, #0]
 80031de:	0010      	movs	r0, r2
 80031e0:	4798      	blx	r3
 80031e2:	e018      	b.n	8003216 <WIZCHIP_WRITE+0x92>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0c1b      	lsrs	r3, r3, #16
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	210c      	movs	r1, #12
 80031ec:	187b      	adds	r3, r7, r1
 80031ee:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0a1b      	lsrs	r3, r3, #8
 80031f4:	b2da      	uxtb	r2, r3
 80031f6:	187b      	adds	r3, r7, r1
 80031f8:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	709a      	strb	r2, [r3, #2]
		spi_data[3] = wb;
 8003202:	187b      	adds	r3, r7, r1
 8003204:	1cfa      	adds	r2, r7, #3
 8003206:	7812      	ldrb	r2, [r2, #0]
 8003208:	70da      	strb	r2, [r3, #3]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800320a:	4b08      	ldr	r3, [pc, #32]	; (800322c <WIZCHIP_WRITE+0xa8>)
 800320c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320e:	187a      	adds	r2, r7, r1
 8003210:	2104      	movs	r1, #4
 8003212:	0010      	movs	r0, r2
 8003214:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8003216:	4b05      	ldr	r3, [pc, #20]	; (800322c <WIZCHIP_WRITE+0xa8>)
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800321c:	4b03      	ldr	r3, [pc, #12]	; (800322c <WIZCHIP_WRITE+0xa8>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	4798      	blx	r3
}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b004      	add	sp, #16
 8003228:	bd80      	pop	{r7, pc}
 800322a:	46c0      	nop			; (mov r8, r8)
 800322c:	20000014 	.word	0x20000014

08003230 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8003230:	b5b0      	push	{r4, r5, r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	1dbb      	adds	r3, r7, #6
 800323c:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800323e:	4b32      	ldr	r3, [pc, #200]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003244:	4b30      	ldr	r3, [pc, #192]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800324a:	4b2f      	ldr	r3, [pc, #188]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <WIZCHIP_READ_BUF+0x2a>
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	2b00      	cmp	r3, #0
 8003258:	d12f      	bne.n	80032ba <WIZCHIP_READ_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800325a:	4b2b      	ldr	r3, [pc, #172]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	0c12      	lsrs	r2, r2, #16
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	0010      	movs	r0, r2
 8003266:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	0a12      	lsrs	r2, r2, #8
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	0010      	movs	r0, r2
 8003274:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003276:	4b24      	ldr	r3, [pc, #144]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	b2d2      	uxtb	r2, r2
 800327e:	0010      	movs	r0, r2
 8003280:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8003282:	2316      	movs	r3, #22
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2200      	movs	r2, #0
 8003288:	801a      	strh	r2, [r3, #0]
 800328a:	e00e      	b.n	80032aa <WIZCHIP_READ_BUF+0x7a>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800328c:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	2516      	movs	r5, #22
 8003292:	197a      	adds	r2, r7, r5
 8003294:	8812      	ldrh	r2, [r2, #0]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	188c      	adds	r4, r1, r2
 800329a:	4798      	blx	r3
 800329c:	0003      	movs	r3, r0
 800329e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80032a0:	197b      	adds	r3, r7, r5
 80032a2:	881a      	ldrh	r2, [r3, #0]
 80032a4:	197b      	adds	r3, r7, r5
 80032a6:	3201      	adds	r2, #1
 80032a8:	801a      	strh	r2, [r3, #0]
 80032aa:	2316      	movs	r3, #22
 80032ac:	18fa      	adds	r2, r7, r3
 80032ae:	1dbb      	adds	r3, r7, #6
 80032b0:	8812      	ldrh	r2, [r2, #0]
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3e9      	bcc.n	800328c <WIZCHIP_READ_BUF+0x5c>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80032b8:	e01b      	b.n	80032f2 <WIZCHIP_READ_BUF+0xc2>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	0c1b      	lsrs	r3, r3, #16
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	2110      	movs	r1, #16
 80032c2:	187b      	adds	r3, r7, r1
 80032c4:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	0a1b      	lsrs	r3, r3, #8
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	187b      	adds	r3, r7, r1
 80032ce:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	187b      	adds	r3, r7, r1
 80032d6:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	187a      	adds	r2, r7, r1
 80032de:	2103      	movs	r1, #3
 80032e0:	0010      	movs	r0, r2
 80032e2:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	1dba      	adds	r2, r7, #6
 80032ea:	8811      	ldrh	r1, [r2, #0]
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	0010      	movs	r0, r2
 80032f0:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80032f8:	4b03      	ldr	r3, [pc, #12]	; (8003308 <WIZCHIP_READ_BUF+0xd8>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4798      	blx	r3
}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bdb0      	pop	{r4, r5, r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	20000014 	.word	0x20000014

0800330c <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 800330c:	b590      	push	{r4, r7, lr}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	1dbb      	adds	r3, r7, #6
 8003318:	801a      	strh	r2, [r3, #0]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 800331a:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8003320:	4b30      	ldr	r3, [pc, #192]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2204      	movs	r2, #4
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	2b00      	cmp	r3, #0
 8003334:	d12f      	bne.n	8003396 <WIZCHIP_WRITE_BUF+0x8a>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8003336:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 8003338:	69db      	ldr	r3, [r3, #28]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	0c12      	lsrs	r2, r2, #16
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	0010      	movs	r0, r2
 8003342:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	68fa      	ldr	r2, [r7, #12]
 800334a:	0a12      	lsrs	r2, r2, #8
 800334c:	b2d2      	uxtb	r2, r2
 800334e:	0010      	movs	r0, r2
 8003350:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	b2d2      	uxtb	r2, r2
 800335a:	0010      	movs	r0, r2
 800335c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800335e:	2316      	movs	r3, #22
 8003360:	18fb      	adds	r3, r7, r3
 8003362:	2200      	movs	r2, #0
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e00e      	b.n	8003386 <WIZCHIP_WRITE_BUF+0x7a>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2416      	movs	r4, #22
 800336e:	193a      	adds	r2, r7, r4
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	188a      	adds	r2, r1, r2
 8003376:	7812      	ldrb	r2, [r2, #0]
 8003378:	0010      	movs	r0, r2
 800337a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800337c:	193b      	adds	r3, r7, r4
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	193b      	adds	r3, r7, r4
 8003382:	3201      	adds	r2, #1
 8003384:	801a      	strh	r2, [r3, #0]
 8003386:	2316      	movs	r3, #22
 8003388:	18fa      	adds	r2, r7, r3
 800338a:	1dbb      	adds	r3, r7, #6
 800338c:	8812      	ldrh	r2, [r2, #0]
 800338e:	881b      	ldrh	r3, [r3, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3e9      	bcc.n	8003368 <WIZCHIP_WRITE_BUF+0x5c>
 8003394:	e01b      	b.n	80033ce <WIZCHIP_WRITE_BUF+0xc2>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0c1b      	lsrs	r3, r3, #16
 800339a:	b2da      	uxtb	r2, r3
 800339c:	2110      	movs	r1, #16
 800339e:	187b      	adds	r3, r7, r1
 80033a0:	701a      	strb	r2, [r3, #0]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	0a1b      	lsrs	r3, r3, #8
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	187b      	adds	r3, r7, r1
 80033aa:	705a      	strb	r2, [r3, #1]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	709a      	strb	r2, [r3, #2]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	187a      	adds	r2, r7, r1
 80033ba:	2103      	movs	r1, #3
 80033bc:	0010      	movs	r0, r2
 80033be:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	1dba      	adds	r2, r7, #6
 80033c6:	8811      	ldrh	r1, [r2, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	0010      	movs	r0, r2
 80033cc:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80033ce:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <WIZCHIP_WRITE_BUF+0xd8>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	4798      	blx	r3
}
 80033da:	46c0      	nop			; (mov r8, r8)
 80033dc:	46bd      	mov	sp, r7
 80033de:	b007      	add	sp, #28
 80033e0:	bd90      	pop	{r4, r7, pc}
 80033e2:	46c0      	nop			; (mov r8, r8)
 80033e4:	20000014 	.word	0x20000014

080033e8 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 80033e8:	b5b0      	push	{r4, r5, r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dfb      	adds	r3, r7, #7
 80033f2:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80033f4:	230e      	movs	r3, #14
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	2200      	movs	r2, #0
 80033fa:	801a      	strh	r2, [r3, #0]
 80033fc:	230c      	movs	r3, #12
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	2200      	movs	r2, #0
 8003402:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003404:	1dfb      	adds	r3, r7, #7
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	3301      	adds	r3, #1
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	2280      	movs	r2, #128	; 0x80
 8003410:	0192      	lsls	r2, r2, #6
 8003412:	4694      	mov	ip, r2
 8003414:	4463      	add	r3, ip
 8003416:	0018      	movs	r0, r3
 8003418:	f7ff fe62 	bl	80030e0 <WIZCHIP_READ>
 800341c:	0003      	movs	r3, r0
 800341e:	001a      	movs	r2, r3
 8003420:	250c      	movs	r5, #12
 8003422:	197b      	adds	r3, r7, r5
 8003424:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8003426:	197b      	adds	r3, r7, r5
 8003428:	881b      	ldrh	r3, [r3, #0]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	b29c      	uxth	r4, r3
 800342e:	1dfb      	adds	r3, r7, #7
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	3301      	adds	r3, #1
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	2284      	movs	r2, #132	; 0x84
 800343a:	0192      	lsls	r2, r2, #6
 800343c:	4694      	mov	ip, r2
 800343e:	4463      	add	r3, ip
 8003440:	0018      	movs	r0, r3
 8003442:	f7ff fe4d 	bl	80030e0 <WIZCHIP_READ>
 8003446:	0003      	movs	r3, r0
 8003448:	b29a      	uxth	r2, r3
 800344a:	197b      	adds	r3, r7, r5
 800344c:	18a2      	adds	r2, r4, r2
 800344e:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8003450:	197b      	adds	r3, r7, r5
 8003452:	881b      	ldrh	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d025      	beq.n	80034a4 <getSn_TX_FSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	3301      	adds	r3, #1
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	2280      	movs	r2, #128	; 0x80
 8003464:	0192      	lsls	r2, r2, #6
 8003466:	4694      	mov	ip, r2
 8003468:	4463      	add	r3, ip
 800346a:	0018      	movs	r0, r3
 800346c:	f7ff fe38 	bl	80030e0 <WIZCHIP_READ>
 8003470:	0003      	movs	r3, r0
 8003472:	001a      	movs	r2, r3
 8003474:	250e      	movs	r5, #14
 8003476:	197b      	adds	r3, r7, r5
 8003478:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800347a:	197b      	adds	r3, r7, r5
 800347c:	881b      	ldrh	r3, [r3, #0]
 800347e:	021b      	lsls	r3, r3, #8
 8003480:	b29c      	uxth	r4, r3
 8003482:	1dfb      	adds	r3, r7, #7
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	3301      	adds	r3, #1
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	2284      	movs	r2, #132	; 0x84
 800348e:	0192      	lsls	r2, r2, #6
 8003490:	4694      	mov	ip, r2
 8003492:	4463      	add	r3, ip
 8003494:	0018      	movs	r0, r3
 8003496:	f7ff fe23 	bl	80030e0 <WIZCHIP_READ>
 800349a:	0003      	movs	r3, r0
 800349c:	b29a      	uxth	r2, r3
 800349e:	197b      	adds	r3, r7, r5
 80034a0:	18a2      	adds	r2, r4, r2
 80034a2:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 80034a4:	210e      	movs	r1, #14
 80034a6:	187a      	adds	r2, r7, r1
 80034a8:	230c      	movs	r3, #12
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	8812      	ldrh	r2, [r2, #0]
 80034ae:	881b      	ldrh	r3, [r3, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d1a7      	bne.n	8003404 <getSn_TX_FSR+0x1c>
   return val;
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	881b      	ldrh	r3, [r3, #0]
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bdb0      	pop	{r4, r5, r7, pc}

080034c0 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	0002      	movs	r2, r0
 80034c8:	1dfb      	adds	r3, r7, #7
 80034ca:	701a      	strb	r2, [r3, #0]
   uint16_t val=0,val1=0;
 80034cc:	230e      	movs	r3, #14
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2200      	movs	r2, #0
 80034d2:	801a      	strh	r2, [r3, #0]
 80034d4:	230c      	movs	r3, #12
 80034d6:	18fb      	adds	r3, r7, r3
 80034d8:	2200      	movs	r2, #0
 80034da:	801a      	strh	r2, [r3, #0]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80034dc:	1dfb      	adds	r3, r7, #7
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	3301      	adds	r3, #1
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	2298      	movs	r2, #152	; 0x98
 80034e8:	0192      	lsls	r2, r2, #6
 80034ea:	4694      	mov	ip, r2
 80034ec:	4463      	add	r3, ip
 80034ee:	0018      	movs	r0, r3
 80034f0:	f7ff fdf6 	bl	80030e0 <WIZCHIP_READ>
 80034f4:	0003      	movs	r3, r0
 80034f6:	001a      	movs	r2, r3
 80034f8:	250c      	movs	r5, #12
 80034fa:	197b      	adds	r3, r7, r5
 80034fc:	801a      	strh	r2, [r3, #0]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80034fe:	197b      	adds	r3, r7, r5
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	b29c      	uxth	r4, r3
 8003506:	1dfb      	adds	r3, r7, #7
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	3301      	adds	r3, #1
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	229c      	movs	r2, #156	; 0x9c
 8003512:	0192      	lsls	r2, r2, #6
 8003514:	4694      	mov	ip, r2
 8003516:	4463      	add	r3, ip
 8003518:	0018      	movs	r0, r3
 800351a:	f7ff fde1 	bl	80030e0 <WIZCHIP_READ>
 800351e:	0003      	movs	r3, r0
 8003520:	b29a      	uxth	r2, r3
 8003522:	197b      	adds	r3, r7, r5
 8003524:	18a2      	adds	r2, r4, r2
 8003526:	801a      	strh	r2, [r3, #0]
      if (val1 != 0)
 8003528:	197b      	adds	r3, r7, r5
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d025      	beq.n	800357c <getSn_RX_RSR+0xbc>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8003530:	1dfb      	adds	r3, r7, #7
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	3301      	adds	r3, #1
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	2298      	movs	r2, #152	; 0x98
 800353c:	0192      	lsls	r2, r2, #6
 800353e:	4694      	mov	ip, r2
 8003540:	4463      	add	r3, ip
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff fdcc 	bl	80030e0 <WIZCHIP_READ>
 8003548:	0003      	movs	r3, r0
 800354a:	001a      	movs	r2, r3
 800354c:	250e      	movs	r5, #14
 800354e:	197b      	adds	r3, r7, r5
 8003550:	801a      	strh	r2, [r3, #0]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8003552:	197b      	adds	r3, r7, r5
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	b29c      	uxth	r4, r3
 800355a:	1dfb      	adds	r3, r7, #7
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3301      	adds	r3, #1
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	229c      	movs	r2, #156	; 0x9c
 8003566:	0192      	lsls	r2, r2, #6
 8003568:	4694      	mov	ip, r2
 800356a:	4463      	add	r3, ip
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff fdb7 	bl	80030e0 <WIZCHIP_READ>
 8003572:	0003      	movs	r3, r0
 8003574:	b29a      	uxth	r2, r3
 8003576:	197b      	adds	r3, r7, r5
 8003578:	18a2      	adds	r2, r4, r2
 800357a:	801a      	strh	r2, [r3, #0]
      }
   }while (val != val1);
 800357c:	210e      	movs	r1, #14
 800357e:	187a      	adds	r2, r7, r1
 8003580:	230c      	movs	r3, #12
 8003582:	18fb      	adds	r3, r7, r3
 8003584:	8812      	ldrh	r2, [r2, #0]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	d1a7      	bne.n	80034dc <getSn_RX_RSR+0x1c>
   return val;
 800358c:	187b      	adds	r3, r7, r1
 800358e:	881b      	ldrh	r3, [r3, #0]
}
 8003590:	0018      	movs	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bdb0      	pop	{r4, r5, r7, pc}

08003598 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6039      	str	r1, [r7, #0]
 80035a0:	0011      	movs	r1, r2
 80035a2:	1dfb      	adds	r3, r7, #7
 80035a4:	1c02      	adds	r2, r0, #0
 80035a6:	701a      	strb	r2, [r3, #0]
 80035a8:	1d3b      	adds	r3, r7, #4
 80035aa:	1c0a      	adds	r2, r1, #0
 80035ac:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 80035ae:	250e      	movs	r5, #14
 80035b0:	197b      	adds	r3, r7, r5
 80035b2:	2200      	movs	r2, #0
 80035b4:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 80035b6:	2300      	movs	r3, #0
 80035b8:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 80035ba:	1d3b      	adds	r3, r7, #4
 80035bc:	881b      	ldrh	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d05e      	beq.n	8003680 <wiz_send_data+0xe8>
   ptr = getSn_TX_WR(sn);
 80035c2:	1dfb      	adds	r3, r7, #7
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	3301      	adds	r3, #1
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	2290      	movs	r2, #144	; 0x90
 80035ce:	0192      	lsls	r2, r2, #6
 80035d0:	4694      	mov	ip, r2
 80035d2:	4463      	add	r3, ip
 80035d4:	0018      	movs	r0, r3
 80035d6:	f7ff fd83 	bl	80030e0 <WIZCHIP_READ>
 80035da:	0003      	movs	r3, r0
 80035dc:	b29b      	uxth	r3, r3
 80035de:	021b      	lsls	r3, r3, #8
 80035e0:	b29c      	uxth	r4, r3
 80035e2:	1dfb      	adds	r3, r7, #7
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	3301      	adds	r3, #1
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	2294      	movs	r2, #148	; 0x94
 80035ee:	0192      	lsls	r2, r2, #6
 80035f0:	4694      	mov	ip, r2
 80035f2:	4463      	add	r3, ip
 80035f4:	0018      	movs	r0, r3
 80035f6:	f7ff fd73 	bl	80030e0 <WIZCHIP_READ>
 80035fa:	0003      	movs	r3, r0
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	197b      	adds	r3, r7, r5
 8003600:	18a2      	adds	r2, r4, r2
 8003602:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8003604:	002c      	movs	r4, r5
 8003606:	197b      	adds	r3, r7, r5
 8003608:	881b      	ldrh	r3, [r3, #0]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	1dfa      	adds	r2, r7, #7
 800360e:	7812      	ldrb	r2, [r2, #0]
 8003610:	0092      	lsls	r2, r2, #2
 8003612:	3202      	adds	r2, #2
 8003614:	00d2      	lsls	r2, r2, #3
 8003616:	189b      	adds	r3, r3, r2
 8003618:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 800361a:	1d3b      	adds	r3, r7, #4
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	6839      	ldr	r1, [r7, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fe72 	bl	800330c <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8003628:	193b      	adds	r3, r7, r4
 800362a:	1939      	adds	r1, r7, r4
 800362c:	1d3a      	adds	r2, r7, #4
 800362e:	8809      	ldrh	r1, [r1, #0]
 8003630:	8812      	ldrh	r2, [r2, #0]
 8003632:	188a      	adds	r2, r1, r2
 8003634:	801a      	strh	r2, [r3, #0]
   setSn_TX_WR(sn,ptr);
 8003636:	1dfb      	adds	r3, r7, #7
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	3301      	adds	r3, #1
 800363e:	00db      	lsls	r3, r3, #3
 8003640:	2290      	movs	r2, #144	; 0x90
 8003642:	0192      	lsls	r2, r2, #6
 8003644:	4694      	mov	ip, r2
 8003646:	4463      	add	r3, ip
 8003648:	001a      	movs	r2, r3
 800364a:	193b      	adds	r3, r7, r4
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	b29b      	uxth	r3, r3
 8003652:	b2db      	uxtb	r3, r3
 8003654:	0019      	movs	r1, r3
 8003656:	0010      	movs	r0, r2
 8003658:	f7ff fd94 	bl	8003184 <WIZCHIP_WRITE>
 800365c:	1dfb      	adds	r3, r7, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	3301      	adds	r3, #1
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	2294      	movs	r2, #148	; 0x94
 8003668:	0192      	lsls	r2, r2, #6
 800366a:	4694      	mov	ip, r2
 800366c:	4463      	add	r3, ip
 800366e:	001a      	movs	r2, r3
 8003670:	193b      	adds	r3, r7, r4
 8003672:	881b      	ldrh	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	0019      	movs	r1, r3
 8003678:	0010      	movs	r0, r2
 800367a:	f7ff fd83 	bl	8003184 <WIZCHIP_WRITE>
 800367e:	e000      	b.n	8003682 <wiz_send_data+0xea>
   if(len == 0)  return;
 8003680:	46c0      	nop			; (mov r8, r8)
}
 8003682:	46bd      	mov	sp, r7
 8003684:	b004      	add	sp, #16
 8003686:	bdb0      	pop	{r4, r5, r7, pc}

08003688 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8003688:	b5b0      	push	{r4, r5, r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6039      	str	r1, [r7, #0]
 8003690:	0011      	movs	r1, r2
 8003692:	1dfb      	adds	r3, r7, #7
 8003694:	1c02      	adds	r2, r0, #0
 8003696:	701a      	strb	r2, [r3, #0]
 8003698:	1d3b      	adds	r3, r7, #4
 800369a:	1c0a      	adds	r2, r1, #0
 800369c:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 800369e:	250e      	movs	r5, #14
 80036a0:	197b      	adds	r3, r7, r5
 80036a2:	2200      	movs	r2, #0
 80036a4:	801a      	strh	r2, [r3, #0]
   uint32_t addrsel = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 80036aa:	1d3b      	adds	r3, r7, #4
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d05e      	beq.n	8003770 <wiz_recv_data+0xe8>
   ptr = getSn_RX_RD(sn);
 80036b2:	1dfb      	adds	r3, r7, #7
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	3301      	adds	r3, #1
 80036ba:	00db      	lsls	r3, r3, #3
 80036bc:	22a0      	movs	r2, #160	; 0xa0
 80036be:	0192      	lsls	r2, r2, #6
 80036c0:	4694      	mov	ip, r2
 80036c2:	4463      	add	r3, ip
 80036c4:	0018      	movs	r0, r3
 80036c6:	f7ff fd0b 	bl	80030e0 <WIZCHIP_READ>
 80036ca:	0003      	movs	r3, r0
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	021b      	lsls	r3, r3, #8
 80036d0:	b29c      	uxth	r4, r3
 80036d2:	1dfb      	adds	r3, r7, #7
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	3301      	adds	r3, #1
 80036da:	00db      	lsls	r3, r3, #3
 80036dc:	22a4      	movs	r2, #164	; 0xa4
 80036de:	0192      	lsls	r2, r2, #6
 80036e0:	4694      	mov	ip, r2
 80036e2:	4463      	add	r3, ip
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7ff fcfb 	bl	80030e0 <WIZCHIP_READ>
 80036ea:	0003      	movs	r3, r0
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	197b      	adds	r3, r7, r5
 80036f0:	18a2      	adds	r2, r4, r2
 80036f2:	801a      	strh	r2, [r3, #0]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 80036f4:	002c      	movs	r4, r5
 80036f6:	197b      	adds	r3, r7, r5
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	1dfa      	adds	r2, r7, #7
 80036fe:	7812      	ldrb	r2, [r2, #0]
 8003700:	0092      	lsls	r2, r2, #2
 8003702:	3203      	adds	r2, #3
 8003704:	00d2      	lsls	r2, r2, #3
 8003706:	189b      	adds	r3, r3, r2
 8003708:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 800370a:	1d3b      	adds	r3, r7, #4
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	6839      	ldr	r1, [r7, #0]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	0018      	movs	r0, r3
 8003714:	f7ff fd8c 	bl	8003230 <WIZCHIP_READ_BUF>
   ptr += len;
 8003718:	193b      	adds	r3, r7, r4
 800371a:	1939      	adds	r1, r7, r4
 800371c:	1d3a      	adds	r2, r7, #4
 800371e:	8809      	ldrh	r1, [r1, #0]
 8003720:	8812      	ldrh	r2, [r2, #0]
 8003722:	188a      	adds	r2, r1, r2
 8003724:	801a      	strh	r2, [r3, #0]
   
   setSn_RX_RD(sn,ptr);
 8003726:	1dfb      	adds	r3, r7, #7
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	3301      	adds	r3, #1
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	22a0      	movs	r2, #160	; 0xa0
 8003732:	0192      	lsls	r2, r2, #6
 8003734:	4694      	mov	ip, r2
 8003736:	4463      	add	r3, ip
 8003738:	001a      	movs	r2, r3
 800373a:	193b      	adds	r3, r7, r4
 800373c:	881b      	ldrh	r3, [r3, #0]
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	b29b      	uxth	r3, r3
 8003742:	b2db      	uxtb	r3, r3
 8003744:	0019      	movs	r1, r3
 8003746:	0010      	movs	r0, r2
 8003748:	f7ff fd1c 	bl	8003184 <WIZCHIP_WRITE>
 800374c:	1dfb      	adds	r3, r7, #7
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	3301      	adds	r3, #1
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	22a4      	movs	r2, #164	; 0xa4
 8003758:	0192      	lsls	r2, r2, #6
 800375a:	4694      	mov	ip, r2
 800375c:	4463      	add	r3, ip
 800375e:	001a      	movs	r2, r3
 8003760:	193b      	adds	r3, r7, r4
 8003762:	881b      	ldrh	r3, [r3, #0]
 8003764:	b2db      	uxtb	r3, r3
 8003766:	0019      	movs	r1, r3
 8003768:	0010      	movs	r0, r2
 800376a:	f7ff fd0b 	bl	8003184 <WIZCHIP_WRITE>
 800376e:	e000      	b.n	8003772 <wiz_recv_data+0xea>
   if(len == 0) return;
 8003770:	46c0      	nop			; (mov r8, r8)
}
 8003772:	46bd      	mov	sp, r7
 8003774:	b004      	add	sp, #16
 8003776:	bdb0      	pop	{r4, r5, r7, pc}

08003778 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8003778:	b5b0      	push	{r4, r5, r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	0002      	movs	r2, r0
 8003780:	1dfb      	adds	r3, r7, #7
 8003782:	701a      	strb	r2, [r3, #0]
 8003784:	1d3b      	adds	r3, r7, #4
 8003786:	1c0a      	adds	r2, r1, #0
 8003788:	801a      	strh	r2, [r3, #0]
   uint16_t ptr = 0;
 800378a:	250e      	movs	r5, #14
 800378c:	197b      	adds	r3, r7, r5
 800378e:	2200      	movs	r2, #0
 8003790:	801a      	strh	r2, [r3, #0]

   ptr = getSn_RX_RD(sn);
 8003792:	1dfb      	adds	r3, r7, #7
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	3301      	adds	r3, #1
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	22a0      	movs	r2, #160	; 0xa0
 800379e:	0192      	lsls	r2, r2, #6
 80037a0:	4694      	mov	ip, r2
 80037a2:	4463      	add	r3, ip
 80037a4:	0018      	movs	r0, r3
 80037a6:	f7ff fc9b 	bl	80030e0 <WIZCHIP_READ>
 80037aa:	0003      	movs	r3, r0
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	021b      	lsls	r3, r3, #8
 80037b0:	b29c      	uxth	r4, r3
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	3301      	adds	r3, #1
 80037ba:	00db      	lsls	r3, r3, #3
 80037bc:	22a4      	movs	r2, #164	; 0xa4
 80037be:	0192      	lsls	r2, r2, #6
 80037c0:	4694      	mov	ip, r2
 80037c2:	4463      	add	r3, ip
 80037c4:	0018      	movs	r0, r3
 80037c6:	f7ff fc8b 	bl	80030e0 <WIZCHIP_READ>
 80037ca:	0003      	movs	r3, r0
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	197b      	adds	r3, r7, r5
 80037d0:	18a2      	adds	r2, r4, r2
 80037d2:	801a      	strh	r2, [r3, #0]
   ptr += len;
 80037d4:	002c      	movs	r4, r5
 80037d6:	193b      	adds	r3, r7, r4
 80037d8:	1939      	adds	r1, r7, r4
 80037da:	1d3a      	adds	r2, r7, #4
 80037dc:	8809      	ldrh	r1, [r1, #0]
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	188a      	adds	r2, r1, r2
 80037e2:	801a      	strh	r2, [r3, #0]
   setSn_RX_RD(sn,ptr);
 80037e4:	1dfb      	adds	r3, r7, #7
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	3301      	adds	r3, #1
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	22a0      	movs	r2, #160	; 0xa0
 80037f0:	0192      	lsls	r2, r2, #6
 80037f2:	4694      	mov	ip, r2
 80037f4:	4463      	add	r3, ip
 80037f6:	001a      	movs	r2, r3
 80037f8:	193b      	adds	r3, r7, r4
 80037fa:	881b      	ldrh	r3, [r3, #0]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b2db      	uxtb	r3, r3
 8003802:	0019      	movs	r1, r3
 8003804:	0010      	movs	r0, r2
 8003806:	f7ff fcbd 	bl	8003184 <WIZCHIP_WRITE>
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3301      	adds	r3, #1
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	22a4      	movs	r2, #164	; 0xa4
 8003816:	0192      	lsls	r2, r2, #6
 8003818:	4694      	mov	ip, r2
 800381a:	4463      	add	r3, ip
 800381c:	001a      	movs	r2, r3
 800381e:	193b      	adds	r3, r7, r4
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	b2db      	uxtb	r3, r3
 8003824:	0019      	movs	r1, r3
 8003826:	0010      	movs	r0, r2
 8003828:	f7ff fcac 	bl	8003184 <WIZCHIP_WRITE>
}
 800382c:	46c0      	nop			; (mov r8, r8)
 800382e:	46bd      	mov	sp, r7
 8003830:	b004      	add	sp, #16
 8003832:	bdb0      	pop	{r4, r5, r7, pc}

08003834 <wiz_socket>:
   }while(0);              \



int8_t wiz_socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8003834:	b5b0      	push	{r4, r5, r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	0005      	movs	r5, r0
 800383c:	000c      	movs	r4, r1
 800383e:	0010      	movs	r0, r2
 8003840:	0019      	movs	r1, r3
 8003842:	1dfb      	adds	r3, r7, #7
 8003844:	1c2a      	adds	r2, r5, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	1dbb      	adds	r3, r7, #6
 800384a:	1c22      	adds	r2, r4, #0
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	1d3b      	adds	r3, r7, #4
 8003850:	1c02      	adds	r2, r0, #0
 8003852:	801a      	strh	r2, [r3, #0]
 8003854:	1cfb      	adds	r3, r7, #3
 8003856:	1c0a      	adds	r2, r1, #0
 8003858:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 800385a:	1dfb      	adds	r3, r7, #7
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d902      	bls.n	8003868 <wiz_socket+0x34>
 8003862:	2301      	movs	r3, #1
 8003864:	425b      	negs	r3, r3
 8003866:	e103      	b.n	8003a70 <wiz_socket+0x23c>
	switch(protocol)
 8003868:	1dbb      	adds	r3, r7, #6
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	2b03      	cmp	r3, #3
 8003870:	d902      	bls.n	8003878 <wiz_socket+0x44>
      case Sn_MR_IPRAW :
     // case Sn_MR_PPPoE :
         break;
//   #endif
      default :
         return SOCKERR_SOCKMODE;
 8003872:	2305      	movs	r3, #5
 8003874:	425b      	negs	r3, r3
 8003876:	e0fb      	b.n	8003a70 <wiz_socket+0x23c>
         break;
 8003878:	46c0      	nop			; (mov r8, r8)
	}
	if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
 800387a:	1cfb      	adds	r3, r7, #3
 800387c:	781b      	ldrb	r3, [r3, #0]
 800387e:	2206      	movs	r2, #6
 8003880:	4013      	ands	r3, r2
 8003882:	d002      	beq.n	800388a <wiz_socket+0x56>
 8003884:	2306      	movs	r3, #6
 8003886:	425b      	negs	r3, r3
 8003888:	e0f2      	b.n	8003a70 <wiz_socket+0x23c>
//#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
 800388a:	1cfb      	adds	r3, r7, #3
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2210      	movs	r2, #16
 8003890:	4013      	ands	r3, r2
 8003892:	d002      	beq.n	800389a <wiz_socket+0x66>
 8003894:	2306      	movs	r3, #6
 8003896:	425b      	negs	r3, r3
 8003898:	e0ea      	b.n	8003a70 <wiz_socket+0x23c>
//#endif

	if(flag != 0)
 800389a:	1cfb      	adds	r3, r7, #3
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d028      	beq.n	80038f4 <wiz_socket+0xc0>
	{
   	switch(protocol)
 80038a2:	1dbb      	adds	r3, r7, #6
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d002      	beq.n	80038b0 <wiz_socket+0x7c>
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d008      	beq.n	80038c0 <wiz_socket+0x8c>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 80038ae:	e026      	b.n	80038fe <wiz_socket+0xca>
   	      if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 80038b0:	1cfb      	adds	r3, r7, #3
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2221      	movs	r2, #33	; 0x21
 80038b6:	4013      	ands	r3, r2
 80038b8:	d11e      	bne.n	80038f8 <wiz_socket+0xc4>
 80038ba:	2306      	movs	r3, #6
 80038bc:	425b      	negs	r3, r3
 80038be:	e0d7      	b.n	8003a70 <wiz_socket+0x23c>
   	      if(flag & SF_IGMP_VER2)
 80038c0:	1cfb      	adds	r3, r7, #3
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2220      	movs	r2, #32
 80038c6:	4013      	ands	r3, r2
 80038c8:	d007      	beq.n	80038da <wiz_socket+0xa6>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 80038ca:	1cfb      	adds	r3, r7, #3
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	db02      	blt.n	80038da <wiz_socket+0xa6>
 80038d4:	2306      	movs	r3, #6
 80038d6:	425b      	negs	r3, r3
 80038d8:	e0ca      	b.n	8003a70 <wiz_socket+0x23c>
      	      if(flag & SF_UNI_BLOCK)
 80038da:	1cfb      	adds	r3, r7, #3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2210      	movs	r2, #16
 80038e0:	4013      	ands	r3, r2
 80038e2:	d00b      	beq.n	80038fc <wiz_socket+0xc8>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80038e4:	1cfb      	adds	r3, r7, #3
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	db06      	blt.n	80038fc <wiz_socket+0xc8>
 80038ee:	2306      	movs	r3, #6
 80038f0:	425b      	negs	r3, r3
 80038f2:	e0bd      	b.n	8003a70 <wiz_socket+0x23c>
   	}
   }
 80038f4:	46c0      	nop			; (mov r8, r8)
 80038f6:	e002      	b.n	80038fe <wiz_socket+0xca>
   	      break;
 80038f8:	46c0      	nop			; (mov r8, r8)
 80038fa:	e000      	b.n	80038fe <wiz_socket+0xca>
   	      break;
 80038fc:	46c0      	nop			; (mov r8, r8)
	wiz_close(sn);
 80038fe:	1dfb      	adds	r3, r7, #7
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	0018      	movs	r0, r3
 8003904:	f000 f8c6 	bl	8003a94 <wiz_close>
	setSn_MR(sn, (protocol | (flag & 0xF0)));
 8003908:	1dfb      	adds	r3, r7, #7
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3301      	adds	r3, #1
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	0018      	movs	r0, r3
 8003914:	1cfb      	adds	r3, r7, #3
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	b25b      	sxtb	r3, r3
 800391a:	220f      	movs	r2, #15
 800391c:	4393      	bics	r3, r2
 800391e:	b25a      	sxtb	r2, r3
 8003920:	1dbb      	adds	r3, r7, #6
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b25b      	sxtb	r3, r3
 8003926:	4313      	orrs	r3, r2
 8003928:	b25b      	sxtb	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	0019      	movs	r1, r3
 800392e:	f7ff fc29 	bl	8003184 <WIZCHIP_WRITE>
	if(!port)
 8003932:	1d3b      	adds	r3, r7, #4
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10f      	bne.n	800395a <wiz_socket+0x126>
	{
	   port = sock_any_port++;
 800393a:	4b4f      	ldr	r3, [pc, #316]	; (8003a78 <wiz_socket+0x244>)
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	b291      	uxth	r1, r2
 8003942:	4a4d      	ldr	r2, [pc, #308]	; (8003a78 <wiz_socket+0x244>)
 8003944:	8011      	strh	r1, [r2, #0]
 8003946:	1d3a      	adds	r2, r7, #4
 8003948:	8013      	strh	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 800394a:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <wiz_socket+0x244>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	4a4b      	ldr	r2, [pc, #300]	; (8003a7c <wiz_socket+0x248>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d102      	bne.n	800395a <wiz_socket+0x126>
 8003954:	4b48      	ldr	r3, [pc, #288]	; (8003a78 <wiz_socket+0x244>)
 8003956:	4a4a      	ldr	r2, [pc, #296]	; (8003a80 <wiz_socket+0x24c>)
 8003958:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);
 800395a:	1dfb      	adds	r3, r7, #7
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	3301      	adds	r3, #1
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	2280      	movs	r2, #128	; 0x80
 8003966:	00d2      	lsls	r2, r2, #3
 8003968:	4694      	mov	ip, r2
 800396a:	4463      	add	r3, ip
 800396c:	001a      	movs	r2, r3
 800396e:	1d3b      	adds	r3, r7, #4
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	b29b      	uxth	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	0019      	movs	r1, r3
 800397a:	0010      	movs	r0, r2
 800397c:	f7ff fc02 	bl	8003184 <WIZCHIP_WRITE>
 8003980:	1dfb      	adds	r3, r7, #7
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	3301      	adds	r3, #1
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	22a0      	movs	r2, #160	; 0xa0
 800398c:	00d2      	lsls	r2, r2, #3
 800398e:	4694      	mov	ip, r2
 8003990:	4463      	add	r3, ip
 8003992:	001a      	movs	r2, r3
 8003994:	1d3b      	adds	r3, r7, #4
 8003996:	881b      	ldrh	r3, [r3, #0]
 8003998:	b2db      	uxtb	r3, r3
 800399a:	0019      	movs	r1, r3
 800399c:	0010      	movs	r0, r2
 800399e:	f7ff fbf1 	bl	8003184 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 80039a2:	1dfb      	adds	r3, r7, #7
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	3301      	adds	r3, #1
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3301      	adds	r3, #1
 80039ae:	33ff      	adds	r3, #255	; 0xff
 80039b0:	2101      	movs	r1, #1
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fbe6 	bl	8003184 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	1dfb      	adds	r3, r7, #7
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	3301      	adds	r3, #1
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	3301      	adds	r3, #1
 80039c6:	33ff      	adds	r3, #255	; 0xff
 80039c8:	0018      	movs	r0, r3
 80039ca:	f7ff fb89 	bl	80030e0 <WIZCHIP_READ>
 80039ce:	1e03      	subs	r3, r0, #0
 80039d0:	d1f3      	bne.n	80039ba <wiz_socket+0x186>
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);
 80039d2:	1cfb      	adds	r3, r7, #3
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2201      	movs	r2, #1
 80039d8:	401a      	ands	r2, r3
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	409a      	lsls	r2, r3
 80039e0:	0013      	movs	r3, r2
 80039e2:	b21a      	sxth	r2, r3
 80039e4:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <wiz_socket+0x250>)
 80039e6:	881b      	ldrh	r3, [r3, #0]
 80039e8:	b21b      	sxth	r3, r3
 80039ea:	4313      	orrs	r3, r2
 80039ec:	b21b      	sxth	r3, r3
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b24      	ldr	r3, [pc, #144]	; (8003a84 <wiz_socket+0x250>)
 80039f2:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	0013      	movs	r3, r2
 80039fe:	b21b      	sxth	r3, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	b21b      	sxth	r3, r3
 8003a04:	4a20      	ldr	r2, [pc, #128]	; (8003a88 <wiz_socket+0x254>)
 8003a06:	8812      	ldrh	r2, [r2, #0]
 8003a08:	b212      	sxth	r2, r2
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <wiz_socket+0x254>)
 8003a12:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003a14:	1dfb      	adds	r3, r7, #7
 8003a16:	781a      	ldrb	r2, [r3, #0]
 8003a18:	4b1c      	ldr	r3, [pc, #112]	; (8003a8c <wiz_socket+0x258>)
 8003a1a:	0052      	lsls	r2, r2, #1
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	52d1      	strh	r1, [r2, r3]
   sock_pack_info[sn] = 0;
 8003a20:	1dfb      	adds	r3, r7, #7
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <wiz_socket+0x25c>)
 8003a26:	2100      	movs	r1, #0
 8003a28:	54d1      	strb	r1, [r2, r3]

   	int ret = getSn_SR(sn);
 8003a2a:	1dfb      	adds	r3, r7, #7
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	3301      	adds	r3, #1
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	22c0      	movs	r2, #192	; 0xc0
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4694      	mov	ip, r2
 8003a3a:	4463      	add	r3, ip
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	f7ff fb4f 	bl	80030e0 <WIZCHIP_READ>
 8003a42:	0003      	movs	r3, r0
 8003a44:	60fb      	str	r3, [r7, #12]
   while( ret == SOCK_CLOSED){
 8003a46:	e00d      	b.n	8003a64 <wiz_socket+0x230>
	   ret = getSn_SR(sn);
 8003a48:	1dfb      	adds	r3, r7, #7
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3301      	adds	r3, #1
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	22c0      	movs	r2, #192	; 0xc0
 8003a54:	0092      	lsls	r2, r2, #2
 8003a56:	4694      	mov	ip, r2
 8003a58:	4463      	add	r3, ip
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	f7ff fb40 	bl	80030e0 <WIZCHIP_READ>
 8003a60:	0003      	movs	r3, r0
 8003a62:	60fb      	str	r3, [r7, #12]
   while( ret == SOCK_CLOSED){
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ee      	beq.n	8003a48 <wiz_socket+0x214>
   }
   return (int8_t)sn;
 8003a6a:	1dfb      	adds	r3, r7, #7
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b25b      	sxtb	r3, r3
}
 8003a70:	0018      	movs	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	b004      	add	sp, #16
 8003a76:	bdb0      	pop	{r4, r5, r7, pc}
 8003a78:	20000012 	.word	0x20000012
 8003a7c:	0000fff0 	.word	0x0000fff0
 8003a80:	ffffc000 	.word	0xffffc000
 8003a84:	200000c4 	.word	0x200000c4
 8003a88:	200000c6 	.word	0x200000c6
 8003a8c:	200000c8 	.word	0x200000c8
 8003a90:	200000d8 	.word	0x200000d8

08003a94 <wiz_close>:

int8_t wiz_close(uint8_t sn)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	1dfb      	adds	r3, r7, #7
 8003a9e:	701a      	strb	r2, [r3, #0]
	CHECK_SOCKNUM();
 8003aa0:	1dfb      	adds	r3, r7, #7
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d902      	bls.n	8003aae <wiz_close+0x1a>
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	425b      	negs	r3, r3
 8003aac:	e04f      	b.n	8003b4e <wiz_close+0xba>

	setSn_CR(sn,Sn_CR_CLOSE);
 8003aae:	1dfb      	adds	r3, r7, #7
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	3301      	adds	r3, #1
 8003aba:	33ff      	adds	r3, #255	; 0xff
 8003abc:	2110      	movs	r1, #16
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f7ff fb60 	bl	8003184 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	1dfb      	adds	r3, r7, #7
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	3301      	adds	r3, #1
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	33ff      	adds	r3, #255	; 0xff
 8003ad4:	0018      	movs	r0, r3
 8003ad6:	f7ff fb03 	bl	80030e0 <WIZCHIP_READ>
 8003ada:	1e03      	subs	r3, r0, #0
 8003adc:	d1f3      	bne.n	8003ac6 <wiz_close+0x32>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8003ade:	1dfb      	adds	r3, r7, #7
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0092      	lsls	r2, r2, #2
 8003aec:	4694      	mov	ip, r2
 8003aee:	4463      	add	r3, ip
 8003af0:	211f      	movs	r1, #31
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fb46 	bl	8003184 <WIZCHIP_WRITE>
	sock_is_sending &= ~(1<<sn);
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2201      	movs	r2, #1
 8003afe:	409a      	lsls	r2, r3
 8003b00:	0013      	movs	r3, r2
 8003b02:	b21b      	sxth	r3, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	b21b      	sxth	r3, r3
 8003b08:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <wiz_close+0xc4>)
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	b212      	sxth	r2, r2
 8003b0e:	4013      	ands	r3, r2
 8003b10:	b21b      	sxth	r3, r3
 8003b12:	b29a      	uxth	r2, r3
 8003b14:	4b10      	ldr	r3, [pc, #64]	; (8003b58 <wiz_close+0xc4>)
 8003b16:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003b18:	1dfb      	adds	r3, r7, #7
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <wiz_close+0xc8>)
 8003b1e:	0052      	lsls	r2, r2, #1
 8003b20:	2100      	movs	r1, #0
 8003b22:	52d1      	strh	r1, [r2, r3]
	sock_pack_info[sn] = 0;
 8003b24:	1dfb      	adds	r3, r7, #7
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <wiz_close+0xcc>)
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003b2e:	46c0      	nop			; (mov r8, r8)
 8003b30:	1dfb      	adds	r3, r7, #7
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	3301      	adds	r3, #1
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	22c0      	movs	r2, #192	; 0xc0
 8003b3c:	0092      	lsls	r2, r2, #2
 8003b3e:	4694      	mov	ip, r2
 8003b40:	4463      	add	r3, ip
 8003b42:	0018      	movs	r0, r3
 8003b44:	f7ff facc 	bl	80030e0 <WIZCHIP_READ>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d1f1      	bne.n	8003b30 <wiz_close+0x9c>
	return SOCK_OK;
 8003b4c:	2301      	movs	r3, #1
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b002      	add	sp, #8
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	200000c6 	.word	0x200000c6
 8003b5c:	200000c8 	.word	0x200000c8
 8003b60:	200000d8 	.word	0x200000d8

08003b64 <wiz_listen>:

int8_t wiz_listen(uint8_t sn)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	0002      	movs	r2, r0
 8003b6c:	1dfb      	adds	r3, r7, #7
 8003b6e:	701a      	strb	r2, [r3, #0]
	//HECK_SOCKNUM();
   //CHECK_SOCKMODE(Sn_MR_TCP);
   // int ret = getSn_SR(sn);
	//CHECK_SOCKINIT();
	setSn_CR(sn,Sn_CR_LISTEN);
 8003b70:	1dfb      	adds	r3, r7, #7
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3301      	adds	r3, #1
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	33ff      	adds	r3, #255	; 0xff
 8003b7e:	2102      	movs	r1, #2
 8003b80:	0018      	movs	r0, r3
 8003b82:	f7ff faff 	bl	8003184 <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	1dfb      	adds	r3, r7, #7
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	3301      	adds	r3, #1
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	33ff      	adds	r3, #255	; 0xff
 8003b96:	0018      	movs	r0, r3
 8003b98:	f7ff faa2 	bl	80030e0 <WIZCHIP_READ>
 8003b9c:	1e03      	subs	r3, r0, #0
 8003b9e:	d1f3      	bne.n	8003b88 <wiz_listen+0x24>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003ba0:	e013      	b.n	8003bca <wiz_listen+0x66>
   {
      if(getSn_CR(sn) == SOCK_CLOSED)
 8003ba2:	1dfb      	adds	r3, r7, #7
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	3301      	adds	r3, #1
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	33ff      	adds	r3, #255	; 0xff
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f7ff fa95 	bl	80030e0 <WIZCHIP_READ>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d107      	bne.n	8003bca <wiz_listen+0x66>
      {
         wiz_close(sn);
 8003bba:	1dfb      	adds	r3, r7, #7
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7ff ff68 	bl	8003a94 <wiz_close>
         return SOCKERR_SOCKCLOSED;
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	425b      	negs	r3, r3
 8003bc8:	e00f      	b.n	8003bea <wiz_listen+0x86>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8003bca:	1dfb      	adds	r3, r7, #7
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	22c0      	movs	r2, #192	; 0xc0
 8003bd6:	0092      	lsls	r2, r2, #2
 8003bd8:	4694      	mov	ip, r2
 8003bda:	4463      	add	r3, ip
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff fa7f 	bl	80030e0 <WIZCHIP_READ>
 8003be2:	0003      	movs	r3, r0
 8003be4:	2b14      	cmp	r3, #20
 8003be6:	d1dc      	bne.n	8003ba2 <wiz_listen+0x3e>
      }
   }
   return SOCK_OK;
 8003be8:	2301      	movs	r3, #1
}
 8003bea:	0018      	movs	r0, r3
 8003bec:	46bd      	mov	sp, r7
 8003bee:	b002      	add	sp, #8
 8003bf0:	bd80      	pop	{r7, pc}
	...

08003bf4 <wiz_send>:
	}
	return SOCK_OK;
}

int32_t  wiz_send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6039      	str	r1, [r7, #0]
 8003bfc:	0011      	movs	r1, r2
 8003bfe:	1dfb      	adds	r3, r7, #7
 8003c00:	1c02      	adds	r2, r0, #0
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	1d3b      	adds	r3, r7, #4
 8003c06:	1c0a      	adds	r2, r1, #0
 8003c08:	801a      	strh	r2, [r3, #0]
   uint8_t tmp=0;
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
   uint16_t freesize=0;
 8003c12:	230c      	movs	r3, #12
 8003c14:	18fb      	adds	r3, r7, r3
 8003c16:	2200      	movs	r2, #0
 8003c18:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 8003c1a:	1dfb      	adds	r3, r7, #7
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b08      	cmp	r3, #8
 8003c20:	d902      	bls.n	8003c28 <wiz_send+0x34>
 8003c22:	2301      	movs	r3, #1
 8003c24:	425b      	negs	r3, r3
 8003c26:	e113      	b.n	8003e50 <wiz_send+0x25c>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003c28:	1dfb      	adds	r3, r7, #7
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	3301      	adds	r3, #1
 8003c30:	00db      	lsls	r3, r3, #3
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7ff fa54 	bl	80030e0 <WIZCHIP_READ>
 8003c38:	0003      	movs	r3, r0
 8003c3a:	001a      	movs	r2, r3
 8003c3c:	230f      	movs	r3, #15
 8003c3e:	4013      	ands	r3, r2
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <wiz_send+0x56>
 8003c44:	2305      	movs	r3, #5
 8003c46:	425b      	negs	r3, r3
 8003c48:	e102      	b.n	8003e50 <wiz_send+0x25c>
   CHECK_SOCKDATA();
 8003c4a:	1d3b      	adds	r3, r7, #4
 8003c4c:	881b      	ldrh	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d102      	bne.n	8003c58 <wiz_send+0x64>
 8003c52:	230e      	movs	r3, #14
 8003c54:	425b      	negs	r3, r3
 8003c56:	e0fb      	b.n	8003e50 <wiz_send+0x25c>
   tmp = getSn_SR(sn);
 8003c58:	1dfb      	adds	r3, r7, #7
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	3301      	adds	r3, #1
 8003c60:	00db      	lsls	r3, r3, #3
 8003c62:	22c0      	movs	r2, #192	; 0xc0
 8003c64:	0092      	lsls	r2, r2, #2
 8003c66:	4694      	mov	ip, r2
 8003c68:	4463      	add	r3, ip
 8003c6a:	250f      	movs	r5, #15
 8003c6c:	197c      	adds	r4, r7, r5
 8003c6e:	0018      	movs	r0, r3
 8003c70:	f7ff fa36 	bl	80030e0 <WIZCHIP_READ>
 8003c74:	0003      	movs	r3, r0
 8003c76:	7023      	strb	r3, [r4, #0]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8003c78:	197b      	adds	r3, r7, r5
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b17      	cmp	r3, #23
 8003c7e:	d006      	beq.n	8003c8e <wiz_send+0x9a>
 8003c80:	197b      	adds	r3, r7, r5
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2b1c      	cmp	r3, #28
 8003c86:	d002      	beq.n	8003c8e <wiz_send+0x9a>
 8003c88:	2307      	movs	r3, #7
 8003c8a:	425b      	negs	r3, r3
 8003c8c:	e0e0      	b.n	8003e50 <wiz_send+0x25c>
   if( sock_is_sending & (1<<sn) )
 8003c8e:	4b72      	ldr	r3, [pc, #456]	; (8003e58 <wiz_send+0x264>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	001a      	movs	r2, r3
 8003c94:	1dfb      	adds	r3, r7, #7
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	411a      	asrs	r2, r3
 8003c9a:	0013      	movs	r3, r2
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d045      	beq.n	8003d2e <wiz_send+0x13a>
   {
      tmp = getSn_IR(sn);
 8003ca2:	1dfb      	adds	r3, r7, #7
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	3301      	adds	r3, #1
 8003caa:	00db      	lsls	r3, r3, #3
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	4694      	mov	ip, r2
 8003cb2:	4463      	add	r3, ip
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7ff fa13 	bl	80030e0 <WIZCHIP_READ>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	0019      	movs	r1, r3
 8003cbe:	200f      	movs	r0, #15
 8003cc0:	183b      	adds	r3, r7, r0
 8003cc2:	221f      	movs	r2, #31
 8003cc4:	400a      	ands	r2, r1
 8003cc6:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 8003cc8:	183b      	adds	r3, r7, r0
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2210      	movs	r2, #16
 8003cce:	4013      	ands	r3, r2
 8003cd0:	d01d      	beq.n	8003d0e <wiz_send+0x11a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003cd2:	1dfb      	adds	r3, r7, #7
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	3301      	adds	r3, #1
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	2280      	movs	r2, #128	; 0x80
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	4694      	mov	ip, r2
 8003ce2:	4463      	add	r3, ip
 8003ce4:	2110      	movs	r1, #16
 8003ce6:	0018      	movs	r0, r3
 8003ce8:	f7ff fa4c 	bl	8003184 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCKERR_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);
 8003cec:	1dfb      	adds	r3, r7, #7
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	0013      	movs	r3, r2
 8003cf6:	b21b      	sxth	r3, r3
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	b21b      	sxth	r3, r3
 8003cfc:	4a56      	ldr	r2, [pc, #344]	; (8003e58 <wiz_send+0x264>)
 8003cfe:	8812      	ldrh	r2, [r2, #0]
 8003d00:	b212      	sxth	r2, r2
 8003d02:	4013      	ands	r3, r2
 8003d04:	b21b      	sxth	r3, r3
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	4b53      	ldr	r3, [pc, #332]	; (8003e58 <wiz_send+0x264>)
 8003d0a:	801a      	strh	r2, [r3, #0]
 8003d0c:	e00f      	b.n	8003d2e <wiz_send+0x13a>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003d0e:	230f      	movs	r3, #15
 8003d10:	18fb      	adds	r3, r7, r3
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2208      	movs	r2, #8
 8003d16:	4013      	ands	r3, r2
 8003d18:	d007      	beq.n	8003d2a <wiz_send+0x136>
      {
         wiz_close(sn);
 8003d1a:	1dfb      	adds	r3, r7, #7
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff feb8 	bl	8003a94 <wiz_close>
         return SOCKERR_TIMEOUT;
 8003d24:	230d      	movs	r3, #13
 8003d26:	425b      	negs	r3, r3
 8003d28:	e092      	b.n	8003e50 <wiz_send+0x25c>
      }
      else return SOCK_BUSY;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e090      	b.n	8003e50 <wiz_send+0x25c>
   }
   freesize = getSn_TxMAX(sn);
 8003d2e:	1dfb      	adds	r3, r7, #7
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	3301      	adds	r3, #1
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	22f8      	movs	r2, #248	; 0xf8
 8003d3a:	0152      	lsls	r2, r2, #5
 8003d3c:	4694      	mov	ip, r2
 8003d3e:	4463      	add	r3, ip
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7ff f9cd 	bl	80030e0 <WIZCHIP_READ>
 8003d46:	0003      	movs	r3, r0
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	210c      	movs	r1, #12
 8003d4c:	187b      	adds	r3, r7, r1
 8003d4e:	0292      	lsls	r2, r2, #10
 8003d50:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003d52:	1d3a      	adds	r2, r7, #4
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	8812      	ldrh	r2, [r2, #0]
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d903      	bls.n	8003d66 <wiz_send+0x172>
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	187a      	adds	r2, r7, r1
 8003d62:	8812      	ldrh	r2, [r2, #0]
 8003d64:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003d66:	230c      	movs	r3, #12
 8003d68:	18fc      	adds	r4, r7, r3
 8003d6a:	1dfb      	adds	r3, r7, #7
 8003d6c:	781b      	ldrb	r3, [r3, #0]
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fb3a 	bl	80033e8 <getSn_TX_FSR>
 8003d74:	0003      	movs	r3, r0
 8003d76:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 8003d78:	1dfb      	adds	r3, r7, #7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	3301      	adds	r3, #1
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	22c0      	movs	r2, #192	; 0xc0
 8003d84:	0092      	lsls	r2, r2, #2
 8003d86:	4694      	mov	ip, r2
 8003d88:	4463      	add	r3, ip
 8003d8a:	250f      	movs	r5, #15
 8003d8c:	197c      	adds	r4, r7, r5
 8003d8e:	0018      	movs	r0, r3
 8003d90:	f7ff f9a6 	bl	80030e0 <WIZCHIP_READ>
 8003d94:	0003      	movs	r3, r0
 8003d96:	7023      	strb	r3, [r4, #0]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003d98:	197b      	adds	r3, r7, r5
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	2b17      	cmp	r3, #23
 8003d9e:	d00b      	beq.n	8003db8 <wiz_send+0x1c4>
 8003da0:	197b      	adds	r3, r7, r5
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b1c      	cmp	r3, #28
 8003da6:	d007      	beq.n	8003db8 <wiz_send+0x1c4>
      {
         wiz_close(sn);
 8003da8:	1dfb      	adds	r3, r7, #7
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff fe71 	bl	8003a94 <wiz_close>
         return SOCKERR_SOCKSTATUS;
 8003db2:	2307      	movs	r3, #7
 8003db4:	425b      	negs	r3, r3
 8003db6:	e04b      	b.n	8003e50 <wiz_send+0x25c>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8003db8:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <wiz_send+0x268>)
 8003dba:	881b      	ldrh	r3, [r3, #0]
 8003dbc:	001a      	movs	r2, r3
 8003dbe:	1dfb      	adds	r3, r7, #7
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	411a      	asrs	r2, r3
 8003dc4:	0013      	movs	r3, r2
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4013      	ands	r3, r2
 8003dca:	d008      	beq.n	8003dde <wiz_send+0x1ea>
 8003dcc:	1d3a      	adds	r2, r7, #4
 8003dce:	230c      	movs	r3, #12
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d901      	bls.n	8003dde <wiz_send+0x1ea>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e038      	b.n	8003e50 <wiz_send+0x25c>
      if(len <= freesize) break;
 8003dde:	1d3a      	adds	r2, r7, #4
 8003de0:	230c      	movs	r3, #12
 8003de2:	18fb      	adds	r3, r7, r3
 8003de4:	8812      	ldrh	r2, [r2, #0]
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d900      	bls.n	8003dee <wiz_send+0x1fa>
      freesize = getSn_TX_FSR(sn);
 8003dec:	e7bb      	b.n	8003d66 <wiz_send+0x172>
      if(len <= freesize) break;
 8003dee:	46c0      	nop			; (mov r8, r8)
   }
   wiz_send_data(sn, buf, len);
 8003df0:	1d3b      	adds	r3, r7, #4
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	6839      	ldr	r1, [r7, #0]
 8003df6:	1dfb      	adds	r3, r7, #7
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f7ff fbcc 	bl	8003598 <wiz_send_data>
   #if _WIZCHIP_ == 5200
      sock_next_rd[sn] = getSn_TX_RD(sn) + len;
   #endif
   setSn_CR(sn,Sn_CR_SEND);
 8003e00:	1dfb      	adds	r3, r7, #7
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	3301      	adds	r3, #1
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	33ff      	adds	r3, #255	; 0xff
 8003e0e:	2120      	movs	r1, #32
 8003e10:	0018      	movs	r0, r3
 8003e12:	f7ff f9b7 	bl	8003184 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8003e16:	46c0      	nop			; (mov r8, r8)
 8003e18:	1dfb      	adds	r3, r7, #7
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	3301      	adds	r3, #1
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	33ff      	adds	r3, #255	; 0xff
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff f95a 	bl	80030e0 <WIZCHIP_READ>
 8003e2c:	1e03      	subs	r3, r0, #0
 8003e2e:	d1f3      	bne.n	8003e18 <wiz_send+0x224>
   sock_is_sending |= (1 << sn);
 8003e30:	1dfb      	adds	r3, r7, #7
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2201      	movs	r2, #1
 8003e36:	409a      	lsls	r2, r3
 8003e38:	0013      	movs	r3, r2
 8003e3a:	b21a      	sxth	r2, r3
 8003e3c:	4b06      	ldr	r3, [pc, #24]	; (8003e58 <wiz_send+0x264>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	b21b      	sxth	r3, r3
 8003e42:	4313      	orrs	r3, r2
 8003e44:	b21b      	sxth	r3, r3
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <wiz_send+0x264>)
 8003e4a:	801a      	strh	r2, [r3, #0]
   return len;
 8003e4c:	1d3b      	adds	r3, r7, #4
 8003e4e:	881b      	ldrh	r3, [r3, #0]
}
 8003e50:	0018      	movs	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	b004      	add	sp, #16
 8003e56:	bdb0      	pop	{r4, r5, r7, pc}
 8003e58:	200000c6 	.word	0x200000c6
 8003e5c:	200000c4 	.word	0x200000c4

08003e60 <wiz_recv>:


int32_t  wiz_recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6039      	str	r1, [r7, #0]
 8003e68:	0011      	movs	r1, r2
 8003e6a:	1dfb      	adds	r3, r7, #7
 8003e6c:	1c02      	adds	r2, r0, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	1c0a      	adds	r2, r1, #0
 8003e74:	801a      	strh	r2, [r3, #0]
   uint8_t  tmp = 0;
 8003e76:	230f      	movs	r3, #15
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
   uint16_t recvsize = 0;
 8003e7e:	230c      	movs	r3, #12
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	2200      	movs	r2, #0
 8003e84:	801a      	strh	r2, [r3, #0]
   CHECK_SOCKNUM();
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b08      	cmp	r3, #8
 8003e8c:	d902      	bls.n	8003e94 <wiz_recv+0x34>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	425b      	negs	r3, r3
 8003e92:	e0c6      	b.n	8004022 <wiz_recv+0x1c2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003e94:	1dfb      	adds	r3, r7, #7
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7ff f91e 	bl	80030e0 <WIZCHIP_READ>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	001a      	movs	r2, r3
 8003ea8:	230f      	movs	r3, #15
 8003eaa:	4013      	ands	r3, r2
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d002      	beq.n	8003eb6 <wiz_recv+0x56>
 8003eb0:	2305      	movs	r3, #5
 8003eb2:	425b      	negs	r3, r3
 8003eb4:	e0b5      	b.n	8004022 <wiz_recv+0x1c2>
   CHECK_SOCKDATA();
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <wiz_recv+0x64>
 8003ebe:	230e      	movs	r3, #14
 8003ec0:	425b      	negs	r3, r3
 8003ec2:	e0ae      	b.n	8004022 <wiz_recv+0x1c2>
   
   recvsize = getSn_RxMAX(sn);
 8003ec4:	1dfb      	adds	r3, r7, #7
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	3301      	adds	r3, #1
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	22f0      	movs	r2, #240	; 0xf0
 8003ed0:	0152      	lsls	r2, r2, #5
 8003ed2:	4694      	mov	ip, r2
 8003ed4:	4463      	add	r3, ip
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	f7ff f902 	bl	80030e0 <WIZCHIP_READ>
 8003edc:	0003      	movs	r3, r0
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	210c      	movs	r1, #12
 8003ee2:	187b      	adds	r3, r7, r1
 8003ee4:	0292      	lsls	r2, r2, #10
 8003ee6:	801a      	strh	r2, [r3, #0]
   if(recvsize < len) len = recvsize;
 8003ee8:	187a      	adds	r2, r7, r1
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	8812      	ldrh	r2, [r2, #0]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d203      	bcs.n	8003efc <wiz_recv+0x9c>
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	187a      	adds	r2, r7, r1
 8003ef8:	8812      	ldrh	r2, [r2, #0]
 8003efa:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      recvsize = getSn_RX_RSR(sn);
 8003efc:	260c      	movs	r6, #12
 8003efe:	19bc      	adds	r4, r7, r6
 8003f00:	1dfb      	adds	r3, r7, #7
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff fadb 	bl	80034c0 <getSn_RX_RSR>
 8003f0a:	0003      	movs	r3, r0
 8003f0c:	8023      	strh	r3, [r4, #0]
      tmp = getSn_SR(sn);
 8003f0e:	1dfb      	adds	r3, r7, #7
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	3301      	adds	r3, #1
 8003f16:	00db      	lsls	r3, r3, #3
 8003f18:	22c0      	movs	r2, #192	; 0xc0
 8003f1a:	0092      	lsls	r2, r2, #2
 8003f1c:	4694      	mov	ip, r2
 8003f1e:	4463      	add	r3, ip
 8003f20:	250f      	movs	r5, #15
 8003f22:	197c      	adds	r4, r7, r5
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7ff f8db 	bl	80030e0 <WIZCHIP_READ>
 8003f2a:	0003      	movs	r3, r0
 8003f2c:	7023      	strb	r3, [r4, #0]
      if (tmp != SOCK_ESTABLISHED)
 8003f2e:	197b      	adds	r3, r7, r5
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b17      	cmp	r3, #23
 8003f34:	d02e      	beq.n	8003f94 <wiz_recv+0x134>
      {
         if(tmp == SOCK_CLOSE_WAIT)
 8003f36:	197b      	adds	r3, r7, r5
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b1c      	cmp	r3, #28
 8003f3c:	d122      	bne.n	8003f84 <wiz_recv+0x124>
         {
            if(recvsize != 0) break;
 8003f3e:	19bb      	adds	r3, r7, r6
 8003f40:	881b      	ldrh	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d13d      	bne.n	8003fc2 <wiz_recv+0x162>
            else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8003f46:	1dfb      	adds	r3, r7, #7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff fa4c 	bl	80033e8 <getSn_TX_FSR>
 8003f50:	0003      	movs	r3, r0
 8003f52:	001c      	movs	r4, r3
 8003f54:	1dfb      	adds	r3, r7, #7
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	22f8      	movs	r2, #248	; 0xf8
 8003f60:	0152      	lsls	r2, r2, #5
 8003f62:	4694      	mov	ip, r2
 8003f64:	4463      	add	r3, ip
 8003f66:	0018      	movs	r0, r3
 8003f68:	f7ff f8ba 	bl	80030e0 <WIZCHIP_READ>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	029b      	lsls	r3, r3, #10
 8003f70:	429c      	cmp	r4, r3
 8003f72:	d10f      	bne.n	8003f94 <wiz_recv+0x134>
            {
               wiz_close(sn);
 8003f74:	1dfb      	adds	r3, r7, #7
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f7ff fd8b 	bl	8003a94 <wiz_close>
               return SOCKERR_SOCKSTATUS;
 8003f7e:	2307      	movs	r3, #7
 8003f80:	425b      	negs	r3, r3
 8003f82:	e04e      	b.n	8004022 <wiz_recv+0x1c2>
            }
         }
         else
         {
            wiz_close(sn);
 8003f84:	1dfb      	adds	r3, r7, #7
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7ff fd83 	bl	8003a94 <wiz_close>
            return SOCKERR_SOCKSTATUS;
 8003f8e:	2307      	movs	r3, #7
 8003f90:	425b      	negs	r3, r3
 8003f92:	e046      	b.n	8004022 <wiz_recv+0x1c2>
         }
      }
      if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8003f94:	4b25      	ldr	r3, [pc, #148]	; (800402c <wiz_recv+0x1cc>)
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	001a      	movs	r2, r3
 8003f9a:	1dfb      	adds	r3, r7, #7
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	411a      	asrs	r2, r3
 8003fa0:	0013      	movs	r3, r2
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d006      	beq.n	8003fb6 <wiz_recv+0x156>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	18fb      	adds	r3, r7, r3
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <wiz_recv+0x156>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e035      	b.n	8004022 <wiz_recv+0x1c2>
      if(recvsize != 0) break;
 8003fb6:	230c      	movs	r3, #12
 8003fb8:	18fb      	adds	r3, r7, r3
 8003fba:	881b      	ldrh	r3, [r3, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d102      	bne.n	8003fc6 <wiz_recv+0x166>
      recvsize = getSn_RX_RSR(sn);
 8003fc0:	e79c      	b.n	8003efc <wiz_recv+0x9c>
            if(recvsize != 0) break;
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	e000      	b.n	8003fc8 <wiz_recv+0x168>
      if(recvsize != 0) break;
 8003fc6:	46c0      	nop			; (mov r8, r8)
   };
   if(recvsize < len) len = recvsize;
 8003fc8:	210c      	movs	r1, #12
 8003fca:	187a      	adds	r2, r7, r1
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	8812      	ldrh	r2, [r2, #0]
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d203      	bcs.n	8003fde <wiz_recv+0x17e>
 8003fd6:	1d3b      	adds	r3, r7, #4
 8003fd8:	187a      	adds	r2, r7, r1
 8003fda:	8812      	ldrh	r2, [r2, #0]
 8003fdc:	801a      	strh	r2, [r3, #0]
   wiz_recv_data(sn, buf, len);
 8003fde:	1d3b      	adds	r3, r7, #4
 8003fe0:	881a      	ldrh	r2, [r3, #0]
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	1dfb      	adds	r3, r7, #7
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	0018      	movs	r0, r3
 8003fea:	f7ff fb4d 	bl	8003688 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 8003fee:	1dfb      	adds	r3, r7, #7
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	33ff      	adds	r3, #255	; 0xff
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	0018      	movs	r0, r3
 8004000:	f7ff f8c0 	bl	8003184 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004004:	46c0      	nop			; (mov r8, r8)
 8004006:	1dfb      	adds	r3, r7, #7
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	3301      	adds	r3, #1
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	3301      	adds	r3, #1
 8004012:	33ff      	adds	r3, #255	; 0xff
 8004014:	0018      	movs	r0, r3
 8004016:	f7ff f863 	bl	80030e0 <WIZCHIP_READ>
 800401a:	1e03      	subs	r3, r0, #0
 800401c:	d1f3      	bne.n	8004006 <wiz_recv+0x1a6>
   return len;
 800401e:	1d3b      	adds	r3, r7, #4
 8004020:	881b      	ldrh	r3, [r3, #0]
}
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b005      	add	sp, #20
 8004028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	200000c4 	.word	0x200000c4

08004030 <wiz_sendto>:

int32_t wiz_sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8004030:	b5b0      	push	{r4, r5, r7, lr}
 8004032:	b086      	sub	sp, #24
 8004034:	af00      	add	r7, sp, #0
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	0011      	movs	r1, r2
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	240f      	movs	r4, #15
 800403e:	193b      	adds	r3, r7, r4
 8004040:	1c02      	adds	r2, r0, #0
 8004042:	701a      	strb	r2, [r3, #0]
 8004044:	230c      	movs	r3, #12
 8004046:	18fb      	adds	r3, r7, r3
 8004048:	1c0a      	adds	r2, r1, #0
 800404a:	801a      	strh	r2, [r3, #0]
   uint8_t tmp = 0;
 800404c:	2317      	movs	r3, #23
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
   uint16_t freesize = 0;
 8004054:	2314      	movs	r3, #20
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2200      	movs	r2, #0
 800405a:	801a      	strh	r2, [r3, #0]
   CHECK_SOCKNUM();
 800405c:	193b      	adds	r3, r7, r4
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d902      	bls.n	800406a <wiz_sendto+0x3a>
 8004064:	2301      	movs	r3, #1
 8004066:	425b      	negs	r3, r3
 8004068:	e13a      	b.n	80042e0 <wiz_sendto+0x2b0>
   switch(getSn_MR(sn) & 0x0F)
 800406a:	230f      	movs	r3, #15
 800406c:	18fb      	adds	r3, r7, r3
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	3301      	adds	r3, #1
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff f832 	bl	80030e0 <WIZCHIP_READ>
 800407c:	0003      	movs	r3, r0
 800407e:	001a      	movs	r2, r3
 8004080:	230f      	movs	r3, #15
 8004082:	4013      	ands	r3, r2
 8004084:	3b02      	subs	r3, #2
 8004086:	2b02      	cmp	r3, #2
 8004088:	d902      	bls.n	8004090 <wiz_sendto+0x60>
      case Sn_MR_UDP:
      case Sn_MR_IPRAW:
      case Sn_MR_MACRAW:
         break;
      default:
         return SOCKERR_SOCKMODE;
 800408a:	2305      	movs	r3, #5
 800408c:	425b      	negs	r3, r3
 800408e:	e127      	b.n	80042e0 <wiz_sendto+0x2b0>
         break;
 8004090:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 8004092:	230c      	movs	r3, #12
 8004094:	18fb      	adds	r3, r7, r3
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <wiz_sendto+0x72>
 800409c:	230e      	movs	r3, #14
 800409e:	425b      	negs	r3, r3
 80040a0:	e11e      	b.n	80042e0 <wiz_sendto+0x2b0>
   if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d102      	bne.n	80040b0 <wiz_sendto+0x80>
 80040aa:	230c      	movs	r3, #12
 80040ac:	425b      	negs	r3, r3
 80040ae:	e117      	b.n	80042e0 <wiz_sendto+0x2b0>
   if(port == 0)               return SOCKERR_PORTZERO;
 80040b0:	2328      	movs	r3, #40	; 0x28
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	881b      	ldrh	r3, [r3, #0]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <wiz_sendto+0x90>
 80040ba:	230b      	movs	r3, #11
 80040bc:	425b      	negs	r3, r3
 80040be:	e10f      	b.n	80042e0 <wiz_sendto+0x2b0>
   tmp = getSn_SR(sn);
 80040c0:	230f      	movs	r3, #15
 80040c2:	18fb      	adds	r3, r7, r3
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3301      	adds	r3, #1
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	22c0      	movs	r2, #192	; 0xc0
 80040ce:	0092      	lsls	r2, r2, #2
 80040d0:	4694      	mov	ip, r2
 80040d2:	4463      	add	r3, ip
 80040d4:	2517      	movs	r5, #23
 80040d6:	197c      	adds	r4, r7, r5
 80040d8:	0018      	movs	r0, r3
 80040da:	f7ff f801 	bl	80030e0 <WIZCHIP_READ>
 80040de:	0003      	movs	r3, r0
 80040e0:	7023      	strb	r3, [r4, #0]
   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP && tmp != SOCK_IPRAW ) return SOCKERR_SOCKSTATUS;
 80040e2:	197b      	adds	r3, r7, r5
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	2b42      	cmp	r3, #66	; 0x42
 80040e8:	d00a      	beq.n	8004100 <wiz_sendto+0xd0>
 80040ea:	197b      	adds	r3, r7, r5
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b22      	cmp	r3, #34	; 0x22
 80040f0:	d006      	beq.n	8004100 <wiz_sendto+0xd0>
 80040f2:	197b      	adds	r3, r7, r5
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b32      	cmp	r3, #50	; 0x32
 80040f8:	d002      	beq.n	8004100 <wiz_sendto+0xd0>
 80040fa:	2307      	movs	r3, #7
 80040fc:	425b      	negs	r3, r3
 80040fe:	e0ef      	b.n	80042e0 <wiz_sendto+0x2b0>
      
   setSn_DIPR(sn,addr);
 8004100:	240f      	movs	r4, #15
 8004102:	193b      	adds	r3, r7, r4
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	3301      	adds	r3, #1
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	22c0      	movs	r2, #192	; 0xc0
 800410e:	0112      	lsls	r2, r2, #4
 8004110:	4694      	mov	ip, r2
 8004112:	4463      	add	r3, ip
 8004114:	0018      	movs	r0, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2204      	movs	r2, #4
 800411a:	0019      	movs	r1, r3
 800411c:	f7ff f8f6 	bl	800330c <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8004120:	193b      	adds	r3, r7, r4
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	3301      	adds	r3, #1
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	2280      	movs	r2, #128	; 0x80
 800412c:	0152      	lsls	r2, r2, #5
 800412e:	4694      	mov	ip, r2
 8004130:	4463      	add	r3, ip
 8004132:	001a      	movs	r2, r3
 8004134:	2528      	movs	r5, #40	; 0x28
 8004136:	197b      	adds	r3, r7, r5
 8004138:	881b      	ldrh	r3, [r3, #0]
 800413a:	0a1b      	lsrs	r3, r3, #8
 800413c:	b29b      	uxth	r3, r3
 800413e:	b2db      	uxtb	r3, r3
 8004140:	0019      	movs	r1, r3
 8004142:	0010      	movs	r0, r2
 8004144:	f7ff f81e 	bl	8003184 <WIZCHIP_WRITE>
 8004148:	193b      	adds	r3, r7, r4
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	3301      	adds	r3, #1
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	2288      	movs	r2, #136	; 0x88
 8004154:	0152      	lsls	r2, r2, #5
 8004156:	4694      	mov	ip, r2
 8004158:	4463      	add	r3, ip
 800415a:	001a      	movs	r2, r3
 800415c:	197b      	adds	r3, r7, r5
 800415e:	881b      	ldrh	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	0019      	movs	r1, r3
 8004164:	0010      	movs	r0, r2
 8004166:	f7ff f80d 	bl	8003184 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 800416a:	193b      	adds	r3, r7, r4
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3301      	adds	r3, #1
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	22f8      	movs	r2, #248	; 0xf8
 8004176:	0152      	lsls	r2, r2, #5
 8004178:	4694      	mov	ip, r2
 800417a:	4463      	add	r3, ip
 800417c:	0018      	movs	r0, r3
 800417e:	f7fe ffaf 	bl	80030e0 <WIZCHIP_READ>
 8004182:	0003      	movs	r3, r0
 8004184:	b29a      	uxth	r2, r3
 8004186:	2114      	movs	r1, #20
 8004188:	187b      	adds	r3, r7, r1
 800418a:	0292      	lsls	r2, r2, #10
 800418c:	801a      	strh	r2, [r3, #0]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800418e:	200c      	movs	r0, #12
 8004190:	183a      	adds	r2, r7, r0
 8004192:	187b      	adds	r3, r7, r1
 8004194:	8812      	ldrh	r2, [r2, #0]
 8004196:	881b      	ldrh	r3, [r3, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d903      	bls.n	80041a4 <wiz_sendto+0x174>
 800419c:	183b      	adds	r3, r7, r0
 800419e:	187a      	adds	r2, r7, r1
 80041a0:	8812      	ldrh	r2, [r2, #0]
 80041a2:	801a      	strh	r2, [r3, #0]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 80041a4:	2314      	movs	r3, #20
 80041a6:	18fc      	adds	r4, r7, r3
 80041a8:	250f      	movs	r5, #15
 80041aa:	197b      	adds	r3, r7, r5
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	0018      	movs	r0, r3
 80041b0:	f7ff f91a 	bl	80033e8 <getSn_TX_FSR>
 80041b4:	0003      	movs	r3, r0
 80041b6:	8023      	strh	r3, [r4, #0]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80041b8:	197b      	adds	r3, r7, r5
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	3301      	adds	r3, #1
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	22c0      	movs	r2, #192	; 0xc0
 80041c4:	0092      	lsls	r2, r2, #2
 80041c6:	4694      	mov	ip, r2
 80041c8:	4463      	add	r3, ip
 80041ca:	0018      	movs	r0, r3
 80041cc:	f7fe ff88 	bl	80030e0 <WIZCHIP_READ>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d102      	bne.n	80041da <wiz_sendto+0x1aa>
 80041d4:	2304      	movs	r3, #4
 80041d6:	425b      	negs	r3, r3
 80041d8:	e082      	b.n	80042e0 <wiz_sendto+0x2b0>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80041da:	4b43      	ldr	r3, [pc, #268]	; (80042e8 <wiz_sendto+0x2b8>)
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	001a      	movs	r2, r3
 80041e0:	230f      	movs	r3, #15
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	411a      	asrs	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	2201      	movs	r2, #1
 80041ec:	4013      	ands	r3, r2
 80041ee:	d009      	beq.n	8004204 <wiz_sendto+0x1d4>
 80041f0:	230c      	movs	r3, #12
 80041f2:	18fa      	adds	r2, r7, r3
 80041f4:	2314      	movs	r3, #20
 80041f6:	18fb      	adds	r3, r7, r3
 80041f8:	8812      	ldrh	r2, [r2, #0]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d901      	bls.n	8004204 <wiz_sendto+0x1d4>
 8004200:	2300      	movs	r3, #0
 8004202:	e06d      	b.n	80042e0 <wiz_sendto+0x2b0>
      if(len <= freesize) break;
 8004204:	230c      	movs	r3, #12
 8004206:	18fa      	adds	r2, r7, r3
 8004208:	2314      	movs	r3, #20
 800420a:	18fb      	adds	r3, r7, r3
 800420c:	8812      	ldrh	r2, [r2, #0]
 800420e:	881b      	ldrh	r3, [r3, #0]
 8004210:	429a      	cmp	r2, r3
 8004212:	d900      	bls.n	8004216 <wiz_sendto+0x1e6>
      freesize = getSn_TX_FSR(sn);
 8004214:	e7c6      	b.n	80041a4 <wiz_sendto+0x174>
      if(len <= freesize) break;
 8004216:	46c0      	nop			; (mov r8, r8)
   };
	wiz_send_data(sn, buf, len);
 8004218:	230c      	movs	r3, #12
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	881a      	ldrh	r2, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	240f      	movs	r4, #15
 8004222:	193b      	adds	r3, r7, r4
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff f9b6 	bl	8003598 <wiz_send_data>

   #if _WIZCHIP_ == 5200   // for W5200 ARP errata
      setSUBR(0);
   #endif

	setSn_CR(sn,Sn_CR_SEND);
 800422c:	193b      	adds	r3, r7, r4
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	3301      	adds	r3, #1
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	3301      	adds	r3, #1
 8004238:	33ff      	adds	r3, #255	; 0xff
 800423a:	2120      	movs	r1, #32
 800423c:	0018      	movs	r0, r3
 800423e:	f7fe ffa1 	bl	8003184 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8004242:	46c0      	nop			; (mov r8, r8)
 8004244:	230f      	movs	r3, #15
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	3301      	adds	r3, #1
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3301      	adds	r3, #1
 8004252:	33ff      	adds	r3, #255	; 0xff
 8004254:	0018      	movs	r0, r3
 8004256:	f7fe ff43 	bl	80030e0 <WIZCHIP_READ>
 800425a:	1e03      	subs	r3, r0, #0
 800425c:	d1f2      	bne.n	8004244 <wiz_sendto+0x214>
   #if _WIZCHIP_ == 5200   // for W5200 ARP errata
      setSUBR((uint8_t*)"\x00\x00\x00\x00");
   #endif
   while(1)
   {
      tmp = getSn_IR(sn);
 800425e:	240f      	movs	r4, #15
 8004260:	193b      	adds	r3, r7, r4
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	3301      	adds	r3, #1
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	2280      	movs	r2, #128	; 0x80
 800426c:	0092      	lsls	r2, r2, #2
 800426e:	4694      	mov	ip, r2
 8004270:	4463      	add	r3, ip
 8004272:	0018      	movs	r0, r3
 8004274:	f7fe ff34 	bl	80030e0 <WIZCHIP_READ>
 8004278:	0003      	movs	r3, r0
 800427a:	0019      	movs	r1, r3
 800427c:	2017      	movs	r0, #23
 800427e:	183b      	adds	r3, r7, r0
 8004280:	221f      	movs	r2, #31
 8004282:	400a      	ands	r2, r1
 8004284:	701a      	strb	r2, [r3, #0]
      if(tmp & Sn_IR_SENDOK)
 8004286:	183b      	adds	r3, r7, r0
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	4013      	ands	r3, r2
 800428e:	d011      	beq.n	80042b4 <wiz_sendto+0x284>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8004290:	193b      	adds	r3, r7, r4
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	3301      	adds	r3, #1
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0092      	lsls	r2, r2, #2
 800429e:	4694      	mov	ip, r2
 80042a0:	4463      	add	r3, ip
 80042a2:	2110      	movs	r1, #16
 80042a4:	0018      	movs	r0, r3
 80042a6:	f7fe ff6d 	bl	8003184 <WIZCHIP_WRITE>
         break;
 80042aa:	46c0      	nop			; (mov r8, r8)
         setSn_IR(sn, Sn_IR_TIMEOUT);
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
	return len;
 80042ac:	230c      	movs	r3, #12
 80042ae:	18fb      	adds	r3, r7, r3
 80042b0:	881b      	ldrh	r3, [r3, #0]
 80042b2:	e015      	b.n	80042e0 <wiz_sendto+0x2b0>
      else if(tmp & Sn_IR_TIMEOUT)
 80042b4:	2317      	movs	r3, #23
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2208      	movs	r2, #8
 80042bc:	4013      	ands	r3, r2
 80042be:	d0ce      	beq.n	800425e <wiz_sendto+0x22e>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80042c0:	230f      	movs	r3, #15
 80042c2:	18fb      	adds	r3, r7, r3
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	3301      	adds	r3, #1
 80042ca:	00db      	lsls	r3, r3, #3
 80042cc:	2280      	movs	r2, #128	; 0x80
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	4694      	mov	ip, r2
 80042d2:	4463      	add	r3, ip
 80042d4:	2108      	movs	r1, #8
 80042d6:	0018      	movs	r0, r3
 80042d8:	f7fe ff54 	bl	8003184 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 80042dc:	230d      	movs	r3, #13
 80042de:	425b      	negs	r3, r3
}
 80042e0:	0018      	movs	r0, r3
 80042e2:	46bd      	mov	sp, r7
 80042e4:	b006      	add	sp, #24
 80042e6:	bdb0      	pop	{r4, r5, r7, pc}
 80042e8:	200000c4 	.word	0x200000c4

080042ec <wiz_recvfrom>:



int32_t wiz_recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 80042ec:	b5b0      	push	{r4, r5, r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	0011      	movs	r1, r2
 80042f6:	607b      	str	r3, [r7, #4]
 80042f8:	240f      	movs	r4, #15
 80042fa:	193b      	adds	r3, r7, r4
 80042fc:	1c02      	adds	r2, r0, #0
 80042fe:	701a      	strb	r2, [r3, #0]
 8004300:	230c      	movs	r3, #12
 8004302:	18fb      	adds	r3, r7, r3
 8004304:	1c0a      	adds	r2, r1, #0
 8004306:	801a      	strh	r2, [r3, #0]
   uint8_t  mr;
   uint8_t  head[8];
	uint16_t pack_len=0;
 8004308:	231e      	movs	r3, #30
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	2200      	movs	r2, #0
 800430e:	801a      	strh	r2, [r3, #0]

   CHECK_SOCKNUM();
 8004310:	193b      	adds	r3, r7, r4
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b08      	cmp	r3, #8
 8004316:	d902      	bls.n	800431e <wiz_recvfrom+0x32>
 8004318:	2301      	movs	r3, #1
 800431a:	425b      	negs	r3, r3
 800431c:	e25b      	b.n	80047d6 <wiz_recvfrom+0x4ea>
   //CHECK_SOCKMODE(Sn_MR_UDP);
   switch((mr=getSn_MR(sn)) & 0x0F)
 800431e:	230f      	movs	r3, #15
 8004320:	18fb      	adds	r3, r7, r3
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3301      	adds	r3, #1
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	251d      	movs	r5, #29
 800432c:	197c      	adds	r4, r7, r5
 800432e:	0018      	movs	r0, r3
 8004330:	f7fe fed6 	bl	80030e0 <WIZCHIP_READ>
 8004334:	0003      	movs	r3, r0
 8004336:	7023      	strb	r3, [r4, #0]
 8004338:	197b      	adds	r3, r7, r5
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	220f      	movs	r2, #15
 800433e:	4013      	ands	r3, r2
 8004340:	3b02      	subs	r3, #2
 8004342:	2b02      	cmp	r3, #2
 8004344:	d902      	bls.n	800434c <wiz_recvfrom+0x60>
   #if ( _WIZCHIP_ < 5200 )
        case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 8004346:	2305      	movs	r3, #5
 8004348:	425b      	negs	r3, r3
 800434a:	e244      	b.n	80047d6 <wiz_recvfrom+0x4ea>
         break;
 800434c:	46c0      	nop			; (mov r8, r8)
   }
   CHECK_SOCKDATA();
 800434e:	230c      	movs	r3, #12
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d102      	bne.n	800435e <wiz_recvfrom+0x72>
 8004358:	230e      	movs	r3, #14
 800435a:	425b      	negs	r3, r3
 800435c:	e23b      	b.n	80047d6 <wiz_recvfrom+0x4ea>
   if(sock_remained_size[sn] == 0)
 800435e:	230f      	movs	r3, #15
 8004360:	18fb      	adds	r3, r7, r3
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4bae      	ldr	r3, [pc, #696]	; (8004620 <wiz_recvfrom+0x334>)
 8004366:	0052      	lsls	r2, r2, #1
 8004368:	5ad3      	ldrh	r3, [r2, r3]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d133      	bne.n	80043d6 <wiz_recvfrom+0xea>
   {
      while(1)
      {
            pack_len = getSn_RX_RSR(sn);
 800436e:	231e      	movs	r3, #30
 8004370:	18fc      	adds	r4, r7, r3
 8004372:	250f      	movs	r5, #15
 8004374:	197b      	adds	r3, r7, r5
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	0018      	movs	r0, r3
 800437a:	f7ff f8a1 	bl	80034c0 <getSn_RX_RSR>
 800437e:	0003      	movs	r3, r0
 8004380:	8023      	strh	r3, [r4, #0]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8004382:	197b      	adds	r3, r7, r5
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	3301      	adds	r3, #1
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	22c0      	movs	r2, #192	; 0xc0
 800438e:	0092      	lsls	r2, r2, #2
 8004390:	4694      	mov	ip, r2
 8004392:	4463      	add	r3, ip
 8004394:	0018      	movs	r0, r3
 8004396:	f7fe fea3 	bl	80030e0 <WIZCHIP_READ>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d102      	bne.n	80043a4 <wiz_recvfrom+0xb8>
 800439e:	2304      	movs	r3, #4
 80043a0:	425b      	negs	r3, r3
 80043a2:	e218      	b.n	80047d6 <wiz_recvfrom+0x4ea>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 80043a4:	4b9f      	ldr	r3, [pc, #636]	; (8004624 <wiz_recvfrom+0x338>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	001a      	movs	r2, r3
 80043aa:	230f      	movs	r3, #15
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	411a      	asrs	r2, r3
 80043b2:	0013      	movs	r3, r2
 80043b4:	2201      	movs	r2, #1
 80043b6:	4013      	ands	r3, r2
 80043b8:	d006      	beq.n	80043c8 <wiz_recvfrom+0xdc>
 80043ba:	231e      	movs	r3, #30
 80043bc:	18fb      	adds	r3, r7, r3
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <wiz_recvfrom+0xdc>
 80043c4:	2300      	movs	r3, #0
 80043c6:	e206      	b.n	80047d6 <wiz_recvfrom+0x4ea>
         if(pack_len != 0) break;
 80043c8:	231e      	movs	r3, #30
 80043ca:	18fb      	adds	r3, r7, r3
 80043cc:	881b      	ldrh	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d100      	bne.n	80043d4 <wiz_recvfrom+0xe8>
            pack_len = getSn_RX_RSR(sn);
 80043d2:	e7cc      	b.n	800436e <wiz_recvfrom+0x82>
         if(pack_len != 0) break;
 80043d4:	46c0      	nop			; (mov r8, r8)

      };
   }
   sock_pack_info[sn] = PACK_COMPLETED;
 80043d6:	230f      	movs	r3, #15
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	781b      	ldrb	r3, [r3, #0]
 80043dc:	4a92      	ldr	r2, [pc, #584]	; (8004628 <wiz_recvfrom+0x33c>)
 80043de:	2100      	movs	r1, #0
 80043e0:	54d1      	strb	r1, [r2, r3]
	switch (mr & 0x07)
 80043e2:	231d      	movs	r3, #29
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2207      	movs	r2, #7
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	d100      	bne.n	80043f2 <wiz_recvfrom+0x106>
 80043f0:	e098      	b.n	8004524 <wiz_recvfrom+0x238>
 80043f2:	dd00      	ble.n	80043f6 <wiz_recvfrom+0x10a>
 80043f4:	e19f      	b.n	8004736 <wiz_recvfrom+0x44a>
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d003      	beq.n	8004402 <wiz_recvfrom+0x116>
 80043fa:	2b03      	cmp	r3, #3
 80043fc:	d100      	bne.n	8004400 <wiz_recvfrom+0x114>
 80043fe:	e119      	b.n	8004634 <wiz_recvfrom+0x348>
 8004400:	e199      	b.n	8004736 <wiz_recvfrom+0x44a>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8004402:	200f      	movs	r0, #15
 8004404:	183b      	adds	r3, r7, r0
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	4b85      	ldr	r3, [pc, #532]	; (8004620 <wiz_recvfrom+0x334>)
 800440a:	0052      	lsls	r2, r2, #1
 800440c:	5ad3      	ldrh	r3, [r2, r3]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d163      	bne.n	80044da <wiz_recvfrom+0x1ee>
	      {
   			wiz_recv_data(sn, head, 8);
 8004412:	2314      	movs	r3, #20
 8004414:	18f9      	adds	r1, r7, r3
 8004416:	0004      	movs	r4, r0
 8004418:	183b      	adds	r3, r7, r0
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2208      	movs	r2, #8
 800441e:	0018      	movs	r0, r3
 8004420:	f7ff f932 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004424:	193b      	adds	r3, r7, r4
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	3301      	adds	r3, #1
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	3301      	adds	r3, #1
 8004430:	33ff      	adds	r3, #255	; 0xff
 8004432:	2140      	movs	r1, #64	; 0x40
 8004434:	0018      	movs	r0, r3
 8004436:	f7fe fea5 	bl	8003184 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	240f      	movs	r4, #15
 800443e:	193b      	adds	r3, r7, r4
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	3301      	adds	r3, #1
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	3301      	adds	r3, #1
 800444a:	33ff      	adds	r3, #255	; 0xff
 800444c:	0018      	movs	r0, r3
 800444e:	f7fe fe47 	bl	80030e0 <WIZCHIP_READ>
 8004452:	1e03      	subs	r3, r0, #0
 8004454:	d1f2      	bne.n	800443c <wiz_recvfrom+0x150>
   			// read peer's IP address, port number & packet length
    			addr[0] = head[0];
 8004456:	2014      	movs	r0, #20
 8004458:	183b      	adds	r3, r7, r0
 800445a:	781a      	ldrb	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	3301      	adds	r3, #1
 8004464:	183a      	adds	r2, r7, r0
 8004466:	7852      	ldrb	r2, [r2, #1]
 8004468:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	3302      	adds	r3, #2
 800446e:	183a      	adds	r2, r7, r0
 8004470:	7892      	ldrb	r2, [r2, #2]
 8004472:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3303      	adds	r3, #3
 8004478:	183a      	adds	r2, r7, r0
 800447a:	78d2      	ldrb	r2, [r2, #3]
 800447c:	701a      	strb	r2, [r3, #0]
   			*port = head[4];
 800447e:	183b      	adds	r3, r7, r0
 8004480:	791b      	ldrb	r3, [r3, #4]
 8004482:	b29a      	uxth	r2, r3
 8004484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004486:	801a      	strh	r2, [r3, #0]
   			*port = (*port << 8) + head[5];
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	021b      	lsls	r3, r3, #8
 800448e:	b29a      	uxth	r2, r3
 8004490:	183b      	adds	r3, r7, r0
 8004492:	795b      	ldrb	r3, [r3, #5]
 8004494:	b29b      	uxth	r3, r3
 8004496:	18d3      	adds	r3, r2, r3
 8004498:	b29a      	uxth	r2, r3
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	801a      	strh	r2, [r3, #0]
   			sock_remained_size[sn] = head[6];
 800449e:	183b      	adds	r3, r7, r0
 80044a0:	7999      	ldrb	r1, [r3, #6]
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	b289      	uxth	r1, r1
 80044a8:	4b5d      	ldr	r3, [pc, #372]	; (8004620 <wiz_recvfrom+0x334>)
 80044aa:	0052      	lsls	r2, r2, #1
 80044ac:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	781a      	ldrb	r2, [r3, #0]
 80044b2:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <wiz_recvfrom+0x334>)
 80044b4:	0052      	lsls	r2, r2, #1
 80044b6:	5ad3      	ldrh	r3, [r2, r3]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	b299      	uxth	r1, r3
 80044bc:	183b      	adds	r3, r7, r0
 80044be:	79db      	ldrb	r3, [r3, #7]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	193a      	adds	r2, r7, r4
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	18cb      	adds	r3, r1, r3
 80044c8:	b299      	uxth	r1, r3
 80044ca:	4b55      	ldr	r3, [pc, #340]	; (8004620 <wiz_recvfrom+0x334>)
 80044cc:	0052      	lsls	r2, r2, #1
 80044ce:	52d1      	strh	r1, [r2, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 80044d0:	193b      	adds	r3, r7, r4
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	4a54      	ldr	r2, [pc, #336]	; (8004628 <wiz_recvfrom+0x33c>)
 80044d6:	2180      	movs	r1, #128	; 0x80
 80044d8:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80044da:	230f      	movs	r3, #15
 80044dc:	18fb      	adds	r3, r7, r3
 80044de:	781a      	ldrb	r2, [r3, #0]
 80044e0:	4b4f      	ldr	r3, [pc, #316]	; (8004620 <wiz_recvfrom+0x334>)
 80044e2:	0052      	lsls	r2, r2, #1
 80044e4:	5ad3      	ldrh	r3, [r2, r3]
 80044e6:	210c      	movs	r1, #12
 80044e8:	187a      	adds	r2, r7, r1
 80044ea:	8812      	ldrh	r2, [r2, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d205      	bcs.n	80044fc <wiz_recvfrom+0x210>
 80044f0:	231e      	movs	r3, #30
 80044f2:	18fb      	adds	r3, r7, r3
 80044f4:	187a      	adds	r2, r7, r1
 80044f6:	8812      	ldrh	r2, [r2, #0]
 80044f8:	801a      	strh	r2, [r3, #0]
 80044fa:	e008      	b.n	800450e <wiz_recvfrom+0x222>
			else pack_len = sock_remained_size[sn];
 80044fc:	230f      	movs	r3, #15
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	7819      	ldrb	r1, [r3, #0]
 8004502:	231e      	movs	r3, #30
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	4a46      	ldr	r2, [pc, #280]	; (8004620 <wiz_recvfrom+0x334>)
 8004508:	0049      	lsls	r1, r1, #1
 800450a:	5a8a      	ldrh	r2, [r1, r2]
 800450c:	801a      	strh	r2, [r3, #0]
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 800450e:	231e      	movs	r3, #30
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	881a      	ldrh	r2, [r3, #0]
 8004514:	68b9      	ldr	r1, [r7, #8]
 8004516:	230f      	movs	r3, #15
 8004518:	18fb      	adds	r3, r7, r3
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	0018      	movs	r0, r3
 800451e:	f7ff f8b3 	bl	8003688 <wiz_recv_data>
			break;
 8004522:	e11a      	b.n	800475a <wiz_recvfrom+0x46e>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8004524:	200f      	movs	r0, #15
 8004526:	183b      	adds	r3, r7, r0
 8004528:	781a      	ldrb	r2, [r3, #0]
 800452a:	4b3d      	ldr	r3, [pc, #244]	; (8004620 <wiz_recvfrom+0x334>)
 800452c:	0052      	lsls	r2, r2, #1
 800452e:	5ad3      	ldrh	r3, [r2, r3]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d150      	bne.n	80045d6 <wiz_recvfrom+0x2ea>
	      {
   			wiz_recv_data(sn, head, 2);
 8004534:	2314      	movs	r3, #20
 8004536:	18f9      	adds	r1, r7, r3
 8004538:	0004      	movs	r4, r0
 800453a:	183b      	adds	r3, r7, r0
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff f8a1 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004546:	193b      	adds	r3, r7, r4
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	3301      	adds	r3, #1
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	3301      	adds	r3, #1
 8004552:	33ff      	adds	r3, #255	; 0xff
 8004554:	2140      	movs	r1, #64	; 0x40
 8004556:	0018      	movs	r0, r3
 8004558:	f7fe fe14 	bl	8003184 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	240f      	movs	r4, #15
 8004560:	193b      	adds	r3, r7, r4
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3301      	adds	r3, #1
 8004568:	00db      	lsls	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	33ff      	adds	r3, #255	; 0xff
 800456e:	0018      	movs	r0, r3
 8004570:	f7fe fdb6 	bl	80030e0 <WIZCHIP_READ>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d1f2      	bne.n	800455e <wiz_recvfrom+0x272>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8004578:	2014      	movs	r0, #20
 800457a:	183b      	adds	r3, r7, r0
 800457c:	7819      	ldrb	r1, [r3, #0]
 800457e:	193b      	adds	r3, r7, r4
 8004580:	781a      	ldrb	r2, [r3, #0]
 8004582:	b289      	uxth	r1, r1
 8004584:	4b26      	ldr	r3, [pc, #152]	; (8004620 <wiz_recvfrom+0x334>)
 8004586:	0052      	lsls	r2, r2, #1
 8004588:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1];
 800458a:	193b      	adds	r3, r7, r4
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <wiz_recvfrom+0x334>)
 8004590:	0052      	lsls	r2, r2, #1
 8004592:	5ad3      	ldrh	r3, [r2, r3]
 8004594:	021b      	lsls	r3, r3, #8
 8004596:	b299      	uxth	r1, r3
 8004598:	183b      	adds	r3, r7, r0
 800459a:	785b      	ldrb	r3, [r3, #1]
 800459c:	b29b      	uxth	r3, r3
 800459e:	193a      	adds	r2, r7, r4
 80045a0:	7812      	ldrb	r2, [r2, #0]
 80045a2:	18cb      	adds	r3, r1, r3
 80045a4:	b299      	uxth	r1, r3
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <wiz_recvfrom+0x334>)
 80045a8:	0052      	lsls	r2, r2, #1
 80045aa:	52d1      	strh	r1, [r2, r3]
   			if(sock_remained_size[sn] > 1514) 
 80045ac:	193b      	adds	r3, r7, r4
 80045ae:	781a      	ldrb	r2, [r3, #0]
 80045b0:	4b1b      	ldr	r3, [pc, #108]	; (8004620 <wiz_recvfrom+0x334>)
 80045b2:	0052      	lsls	r2, r2, #1
 80045b4:	5ad3      	ldrh	r3, [r2, r3]
 80045b6:	4a1d      	ldr	r2, [pc, #116]	; (800462c <wiz_recvfrom+0x340>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d906      	bls.n	80045ca <wiz_recvfrom+0x2de>
   			{
   			   wiz_close(sn);
 80045bc:	193b      	adds	r3, r7, r4
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7ff fa67 	bl	8003a94 <wiz_close>
   			   return SOCKFATAL_PACKLEN;
 80045c6:	4b1a      	ldr	r3, [pc, #104]	; (8004630 <wiz_recvfrom+0x344>)
 80045c8:	e105      	b.n	80047d6 <wiz_recvfrom+0x4ea>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80045ca:	230f      	movs	r3, #15
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <wiz_recvfrom+0x33c>)
 80045d2:	2180      	movs	r1, #128	; 0x80
 80045d4:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80045d6:	230f      	movs	r3, #15
 80045d8:	18fb      	adds	r3, r7, r3
 80045da:	781a      	ldrb	r2, [r3, #0]
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <wiz_recvfrom+0x334>)
 80045de:	0052      	lsls	r2, r2, #1
 80045e0:	5ad3      	ldrh	r3, [r2, r3]
 80045e2:	210c      	movs	r1, #12
 80045e4:	187a      	adds	r2, r7, r1
 80045e6:	8812      	ldrh	r2, [r2, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d205      	bcs.n	80045f8 <wiz_recvfrom+0x30c>
 80045ec:	231e      	movs	r3, #30
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	187a      	adds	r2, r7, r1
 80045f2:	8812      	ldrh	r2, [r2, #0]
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	e008      	b.n	800460a <wiz_recvfrom+0x31e>
			else pack_len = sock_remained_size[sn];
 80045f8:	230f      	movs	r3, #15
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	7819      	ldrb	r1, [r3, #0]
 80045fe:	231e      	movs	r3, #30
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	4a07      	ldr	r2, [pc, #28]	; (8004620 <wiz_recvfrom+0x334>)
 8004604:	0049      	lsls	r1, r1, #1
 8004606:	5a8a      	ldrh	r2, [r1, r2]
 8004608:	801a      	strh	r2, [r3, #0]
			wiz_recv_data(sn,buf,pack_len);
 800460a:	231e      	movs	r3, #30
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	881a      	ldrh	r2, [r3, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	230f      	movs	r3, #15
 8004614:	18fb      	adds	r3, r7, r3
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	0018      	movs	r0, r3
 800461a:	f7ff f835 	bl	8003688 <wiz_recv_data>
		   break;
 800461e:	e09c      	b.n	800475a <wiz_recvfrom+0x46e>
 8004620:	200000c8 	.word	0x200000c8
 8004624:	200000c4 	.word	0x200000c4
 8004628:	200000d8 	.word	0x200000d8
 800462c:	000005ea 	.word	0x000005ea
 8004630:	fffffc17 	.word	0xfffffc17
  // #if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8004634:	200f      	movs	r0, #15
 8004636:	183b      	adds	r3, r7, r0
 8004638:	781a      	ldrb	r2, [r3, #0]
 800463a:	4b69      	ldr	r3, [pc, #420]	; (80047e0 <wiz_recvfrom+0x4f4>)
 800463c:	0052      	lsls	r2, r2, #1
 800463e:	5ad3      	ldrh	r3, [r2, r3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d153      	bne.n	80046ec <wiz_recvfrom+0x400>
		   {
   			wiz_recv_data(sn, head, 6);
 8004644:	2314      	movs	r3, #20
 8004646:	18f9      	adds	r1, r7, r3
 8004648:	0004      	movs	r4, r0
 800464a:	183b      	adds	r3, r7, r0
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2206      	movs	r2, #6
 8004650:	0018      	movs	r0, r3
 8004652:	f7ff f819 	bl	8003688 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8004656:	193b      	adds	r3, r7, r4
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	3301      	adds	r3, #1
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3301      	adds	r3, #1
 8004662:	33ff      	adds	r3, #255	; 0xff
 8004664:	2140      	movs	r1, #64	; 0x40
 8004666:	0018      	movs	r0, r3
 8004668:	f7fe fd8c 	bl	8003184 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800466c:	46c0      	nop			; (mov r8, r8)
 800466e:	240f      	movs	r4, #15
 8004670:	193b      	adds	r3, r7, r4
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	3301      	adds	r3, #1
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	3301      	adds	r3, #1
 800467c:	33ff      	adds	r3, #255	; 0xff
 800467e:	0018      	movs	r0, r3
 8004680:	f7fe fd2e 	bl	80030e0 <WIZCHIP_READ>
 8004684:	1e03      	subs	r3, r0, #0
 8004686:	d1f2      	bne.n	800466e <wiz_recvfrom+0x382>
   			addr[0] = head[0];
 8004688:	2014      	movs	r0, #20
 800468a:	183b      	adds	r3, r7, r0
 800468c:	781a      	ldrb	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	3301      	adds	r3, #1
 8004696:	183a      	adds	r2, r7, r0
 8004698:	7852      	ldrb	r2, [r2, #1]
 800469a:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3302      	adds	r3, #2
 80046a0:	183a      	adds	r2, r7, r0
 80046a2:	7892      	ldrb	r2, [r2, #2]
 80046a4:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3303      	adds	r3, #3
 80046aa:	183a      	adds	r2, r7, r0
 80046ac:	78d2      	ldrb	r2, [r2, #3]
 80046ae:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 80046b0:	183b      	adds	r3, r7, r0
 80046b2:	7919      	ldrb	r1, [r3, #4]
 80046b4:	193b      	adds	r3, r7, r4
 80046b6:	781a      	ldrb	r2, [r3, #0]
 80046b8:	b289      	uxth	r1, r1
 80046ba:	4b49      	ldr	r3, [pc, #292]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80046bc:	0052      	lsls	r2, r2, #1
 80046be:	52d1      	strh	r1, [r2, r3]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80046c6:	0052      	lsls	r2, r2, #1
 80046c8:	5ad3      	ldrh	r3, [r2, r3]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	b299      	uxth	r1, r3
 80046ce:	183b      	adds	r3, r7, r0
 80046d0:	795b      	ldrb	r3, [r3, #5]
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	193a      	adds	r2, r7, r4
 80046d6:	7812      	ldrb	r2, [r2, #0]
 80046d8:	18cb      	adds	r3, r1, r3
 80046da:	b299      	uxth	r1, r3
 80046dc:	4b40      	ldr	r3, [pc, #256]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80046de:	0052      	lsls	r2, r2, #1
 80046e0:	52d1      	strh	r1, [r2, r3]
   			sock_pack_info[sn] = PACK_FIRST;
 80046e2:	193b      	adds	r3, r7, r4
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	4a3f      	ldr	r2, [pc, #252]	; (80047e4 <wiz_recvfrom+0x4f8>)
 80046e8:	2180      	movs	r1, #128	; 0x80
 80046ea:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//

			if(len < sock_remained_size[sn]) pack_len = len;
 80046ec:	230f      	movs	r3, #15
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	4b3b      	ldr	r3, [pc, #236]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80046f4:	0052      	lsls	r2, r2, #1
 80046f6:	5ad3      	ldrh	r3, [r2, r3]
 80046f8:	210c      	movs	r1, #12
 80046fa:	187a      	adds	r2, r7, r1
 80046fc:	8812      	ldrh	r2, [r2, #0]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d205      	bcs.n	800470e <wiz_recvfrom+0x422>
 8004702:	231e      	movs	r3, #30
 8004704:	18fb      	adds	r3, r7, r3
 8004706:	187a      	adds	r2, r7, r1
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	801a      	strh	r2, [r3, #0]
 800470c:	e008      	b.n	8004720 <wiz_recvfrom+0x434>
			else pack_len = sock_remained_size[sn];
 800470e:	230f      	movs	r3, #15
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	7819      	ldrb	r1, [r3, #0]
 8004714:	231e      	movs	r3, #30
 8004716:	18fb      	adds	r3, r7, r3
 8004718:	4a31      	ldr	r2, [pc, #196]	; (80047e0 <wiz_recvfrom+0x4f4>)
 800471a:	0049      	lsls	r1, r1, #1
 800471c:	5a8a      	ldrh	r2, [r1, r2]
 800471e:	801a      	strh	r2, [r3, #0]
			wiz_recv_data(sn, buf, pack_len); // data copy.
 8004720:	231e      	movs	r3, #30
 8004722:	18fb      	adds	r3, r7, r3
 8004724:	881a      	ldrh	r2, [r3, #0]
 8004726:	68b9      	ldr	r1, [r7, #8]
 8004728:	230f      	movs	r3, #15
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	0018      	movs	r0, r3
 8004730:	f7fe ffaa 	bl	8003688 <wiz_recv_data>
   	 		break;
 8004734:	e011      	b.n	800475a <wiz_recvfrom+0x46e>
//   #endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8004736:	241e      	movs	r4, #30
 8004738:	193b      	adds	r3, r7, r4
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	250f      	movs	r5, #15
 800473e:	197b      	adds	r3, r7, r5
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	0011      	movs	r1, r2
 8004744:	0018      	movs	r0, r3
 8004746:	f7ff f817 	bl	8003778 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 800474a:	197b      	adds	r3, r7, r5
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	4b24      	ldr	r3, [pc, #144]	; (80047e0 <wiz_recvfrom+0x4f4>)
 8004750:	0052      	lsls	r2, r2, #1
 8004752:	1939      	adds	r1, r7, r4
 8004754:	8809      	ldrh	r1, [r1, #0]
 8004756:	52d1      	strh	r1, [r2, r3]
         break;
 8004758:	46c0      	nop			; (mov r8, r8)
   }
	setSn_CR(sn,Sn_CR_RECV);
 800475a:	230f      	movs	r3, #15
 800475c:	18fb      	adds	r3, r7, r3
 800475e:	781b      	ldrb	r3, [r3, #0]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	3301      	adds	r3, #1
 8004764:	00db      	lsls	r3, r3, #3
 8004766:	3301      	adds	r3, #1
 8004768:	33ff      	adds	r3, #255	; 0xff
 800476a:	2140      	movs	r1, #64	; 0x40
 800476c:	0018      	movs	r0, r3
 800476e:	f7fe fd09 	bl	8003184 <WIZCHIP_WRITE>
	/* wait to process the command... */
	 while(getSn_CR(sn)) ;
 8004772:	46c0      	nop			; (mov r8, r8)
 8004774:	240f      	movs	r4, #15
 8004776:	193b      	adds	r3, r7, r4
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	3301      	adds	r3, #1
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	3301      	adds	r3, #1
 8004782:	33ff      	adds	r3, #255	; 0xff
 8004784:	0018      	movs	r0, r3
 8004786:	f7fe fcab 	bl	80030e0 <WIZCHIP_READ>
 800478a:	1e03      	subs	r3, r0, #0
 800478c:	d1f2      	bne.n	8004774 <wiz_recvfrom+0x488>
	sock_remained_size[sn] -= pack_len;
 800478e:	193b      	adds	r3, r7, r4
 8004790:	781a      	ldrb	r2, [r3, #0]
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <wiz_recvfrom+0x4f4>)
 8004794:	0052      	lsls	r2, r2, #1
 8004796:	5ad1      	ldrh	r1, [r2, r3]
 8004798:	193b      	adds	r3, r7, r4
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	231e      	movs	r3, #30
 800479e:	18fb      	adds	r3, r7, r3
 80047a0:	881b      	ldrh	r3, [r3, #0]
 80047a2:	1acb      	subs	r3, r1, r3
 80047a4:	b299      	uxth	r1, r3
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80047a8:	0052      	lsls	r2, r2, #1
 80047aa:	52d1      	strh	r1, [r2, r3]
	if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
 80047ac:	193b      	adds	r3, r7, r4
 80047ae:	781a      	ldrb	r2, [r3, #0]
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <wiz_recvfrom+0x4f4>)
 80047b2:	0052      	lsls	r2, r2, #1
 80047b4:	5ad3      	ldrh	r3, [r2, r3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <wiz_recvfrom+0x4e4>
 80047ba:	193b      	adds	r3, r7, r4
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <wiz_recvfrom+0x4f8>)
 80047c0:	5cd2      	ldrb	r2, [r2, r3]
 80047c2:	193b      	adds	r3, r7, r4
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2101      	movs	r1, #1
 80047c8:	430a      	orrs	r2, r1
 80047ca:	b2d1      	uxtb	r1, r2
 80047cc:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <wiz_recvfrom+0x4f8>)
 80047ce:	54d1      	strb	r1, [r2, r3]
 	return pack_len;
 80047d0:	231e      	movs	r3, #30
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	881b      	ldrh	r3, [r3, #0]
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b008      	add	sp, #32
 80047dc:	bdb0      	pop	{r4, r5, r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	200000c8 	.word	0x200000c8
 80047e4:	200000d8 	.word	0x200000d8

080047e8 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_enter(void)           {};
void       wizchip_cris_enter(void)           {}
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void       wizchip_cris_exit(void)          {};
void       wizchip_cris_exit(void)          {}
 80047f2:	b580      	push	{r7, lr}
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	46c0      	nop			; (mov r8, r8)
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <wizchip_cs_select>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_select(void)            {};

void wizchip_cs_select(void) {}
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_cs_deselect(void)          {};
void wizchip_cs_deselect(void) { }
 8004806:	b580      	push	{r7, lr}
 8004808:	af00      	add	r7, sp, #0
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}

08004826 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void     wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void     wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8004826:	b580      	push	{r7, lr}
 8004828:	b082      	sub	sp, #8
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	000a      	movs	r2, r1
 8004830:	1cfb      	adds	r3, r7, #3
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	1cfa      	adds	r2, r7, #3
 8004838:	7812      	ldrb	r2, [r2, #0]
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b002      	add	sp, #8
 8004842:	bd80      	pop	{r7, pc}

08004844 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
 8004848:	2300      	movs	r3, #0
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}

08004850 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writebyte(uint8_t wb) {};
void     wizchip_spi_writebyte(uint8_t wb) {}
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	0002      	movs	r2, r0
 8004858:	1dfb      	adds	r3, r7, #7
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}; 
void     wizchip_spi_readburst(uint8_t* pBuf, uint16_t len)     {}
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	000a      	movs	r2, r1
 800486e:	1cbb      	adds	r3, r7, #2
 8004870:	801a      	strh	r2, [r3, #0]
 8004872:	46c0      	nop			; (mov r8, r8)
 8004874:	46bd      	mov	sp, r7
 8004876:	b002      	add	sp, #8
 8004878:	bd80      	pop	{r7, pc}

0800487a <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void     wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 800487a:	b580      	push	{r7, lr}
 800487c:	b082      	sub	sp, #8
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	000a      	movs	r2, r1
 8004884:	1cbb      	adds	r3, r7, #2
 8004886:	801a      	strh	r2, [r3, #0]
 8004888:	46c0      	nop			; (mov r8, r8)
 800488a:	46bd      	mov	sp, r7
 800488c:	b002      	add	sp, #8
 800488e:	bd80      	pop	{r7, pc}

08004890 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <reg_wizchip_cs_cbfunc+0x16>
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <reg_wizchip_cs_cbfunc+0x3c>)
 80048a8:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <reg_wizchip_cs_cbfunc+0x40>)
 80048aa:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <reg_wizchip_cs_cbfunc+0x3c>)
 80048ae:	4a09      	ldr	r2, [pc, #36]	; (80048d4 <reg_wizchip_cs_cbfunc+0x44>)
 80048b0:	615a      	str	r2, [r3, #20]
 80048b2:	e006      	b.n	80048c2 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <reg_wizchip_cs_cbfunc+0x3c>)
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]
      WIZCHIP.CS._deselect = cs_desel;
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <reg_wizchip_cs_cbfunc+0x3c>)
 80048bc:	683a      	ldr	r2, [r7, #0]
 80048be:	615a      	str	r2, [r3, #20]
   }
}
 80048c0:	46c0      	nop			; (mov r8, r8)
 80048c2:	46c0      	nop			; (mov r8, r8)
 80048c4:	46bd      	mov	sp, r7
 80048c6:	b002      	add	sp, #8
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	46c0      	nop			; (mov r8, r8)
 80048cc:	20000014 	.word	0x20000014
 80048d0:	080047fd 	.word	0x080047fd
 80048d4:	08004807 	.word	0x08004807

080048d8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80048e2:	46c0      	nop			; (mov r8, r8)
 80048e4:	4b0f      	ldr	r3, [pc, #60]	; (8004924 <reg_wizchip_spi_cbfunc+0x4c>)
 80048e6:	881b      	ldrh	r3, [r3, #0]
 80048e8:	001a      	movs	r2, r3
 80048ea:	2380      	movs	r3, #128	; 0x80
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4013      	ands	r3, r2
 80048f0:	d0f8      	beq.n	80048e4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <reg_wizchip_spi_cbfunc+0x26>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d106      	bne.n	800490c <reg_wizchip_spi_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 80048fe:	4b09      	ldr	r3, [pc, #36]	; (8004924 <reg_wizchip_spi_cbfunc+0x4c>)
 8004900:	4a09      	ldr	r2, [pc, #36]	; (8004928 <reg_wizchip_spi_cbfunc+0x50>)
 8004902:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <reg_wizchip_spi_cbfunc+0x4c>)
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <reg_wizchip_spi_cbfunc+0x54>)
 8004908:	61da      	str	r2, [r3, #28]
 800490a:	e006      	b.n	800491a <reg_wizchip_spi_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 800490c:	4b05      	ldr	r3, [pc, #20]	; (8004924 <reg_wizchip_spi_cbfunc+0x4c>)
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	619a      	str	r2, [r3, #24]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <reg_wizchip_spi_cbfunc+0x4c>)
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	61da      	str	r2, [r3, #28]
   }
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	46bd      	mov	sp, r7
 800491e:	b002      	add	sp, #8
 8004920:	bd80      	pop	{r7, pc}
 8004922:	46c0      	nop			; (mov r8, r8)
 8004924:	20000014 	.word	0x20000014
 8004928:	08004845 	.word	0x08004845
 800492c:	08004851 	.word	0x08004851

08004930 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	4b0f      	ldr	r3, [pc, #60]	; (800497c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800493e:	881b      	ldrh	r3, [r3, #0]
 8004940:	001a      	movs	r2, r3
 8004942:	2380      	movs	r3, #128	; 0x80
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4013      	ands	r3, r2
 8004948:	d0f8      	beq.n	800493c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <reg_wizchip_spiburst_cbfunc+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d106      	bne.n	8004964 <reg_wizchip_spiburst_cbfunc+0x34>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004958:	4a09      	ldr	r2, [pc, #36]	; (8004980 <reg_wizchip_spiburst_cbfunc+0x50>)
 800495a:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 800495c:	4b07      	ldr	r3, [pc, #28]	; (800497c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800495e:	4a09      	ldr	r2, [pc, #36]	; (8004984 <reg_wizchip_spiburst_cbfunc+0x54>)
 8004960:	625a      	str	r2, [r3, #36]	; 0x24
 8004962:	e006      	b.n	8004972 <reg_wizchip_spiburst_cbfunc+0x42>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8004964:	4b05      	ldr	r3, [pc, #20]	; (800497c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	621a      	str	r2, [r3, #32]
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 800496a:	4b04      	ldr	r3, [pc, #16]	; (800497c <reg_wizchip_spiburst_cbfunc+0x4c>)
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24
   }
}
 8004970:	46c0      	nop			; (mov r8, r8)
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	46bd      	mov	sp, r7
 8004976:	b002      	add	sp, #8
 8004978:	bd80      	pop	{r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	20000014 	.word	0x20000014
 8004980:	08004865 	.word	0x08004865
 8004984:	0800487b 	.word	0x0800487b

08004988 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8004988:	b590      	push	{r4, r7, lr}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	0002      	movs	r2, r0
 8004990:	6039      	str	r1, [r7, #0]
 8004992:	1dfb      	adds	r3, r7, #7
 8004994:	701a      	strb	r2, [r3, #0]
#if    _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8004996:	2317      	movs	r3, #23
 8004998:	18fb      	adds	r3, r7, r3
 800499a:	2200      	movs	r2, #0
 800499c:	701a      	strb	r2, [r3, #0]
#endif
   uint8_t* ptmp[2] = {0,0};
 800499e:	210c      	movs	r1, #12
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	2200      	movs	r2, #0
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	2200      	movs	r2, #0
 80049aa:	605a      	str	r2, [r3, #4]
   switch(cwtype)
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b0f      	cmp	r3, #15
 80049b2:	d900      	bls.n	80049b6 <ctlwizchip+0x2e>
 80049b4:	e0bc      	b.n	8004b30 <ctlwizchip+0x1a8>
 80049b6:	009a      	lsls	r2, r3, #2
 80049b8:	4b62      	ldr	r3, [pc, #392]	; (8004b44 <ctlwizchip+0x1bc>)
 80049ba:	18d3      	adds	r3, r2, r3
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	469f      	mov	pc, r3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 80049c0:	f000 f8c4 	bl	8004b4c <wizchip_sw_reset>
         break;
 80049c4:	e0b8      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d009      	beq.n	80049e0 <ctlwizchip+0x58>
         {
            ptmp[0] = (uint8_t*)arg;
 80049cc:	210c      	movs	r1, #12
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	601a      	str	r2, [r3, #0]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 80049d4:	187b      	adds	r3, r7, r1
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	001a      	movs	r2, r3
 80049dc:	187b      	adds	r3, r7, r1
 80049de:	605a      	str	r2, [r3, #4]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 80049e0:	210c      	movs	r1, #12
 80049e2:	187b      	adds	r3, r7, r1
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	187b      	adds	r3, r7, r1
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	0019      	movs	r1, r3
 80049ec:	0010      	movs	r0, r2
 80049ee:	f000 f8f6 	bl	8004bde <wizchip_init>
 80049f2:	0003      	movs	r3, r0
 80049f4:	e0a1      	b.n	8004b3a <ctlwizchip+0x1b2>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	0018      	movs	r0, r3
 80049fc:	f000 f9b2 	bl	8004d64 <wizchip_clrinterrupt>
         break;
 8004a00:	e09a      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004a02:	f000 f9d8 	bl	8004db6 <wizchip_getinterrupt>
 8004a06:	0003      	movs	r3, r0
 8004a08:	001a      	movs	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	801a      	strh	r2, [r3, #0]
         break;
 8004a0e:	e093      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	0018      	movs	r0, r3
 8004a16:	f000 fa02 	bl	8004e1e <wizchip_setinterruptmask>
         break;         
 8004a1a:	e08d      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8004a1c:	f000 fa25 	bl	8004e6a <wizchip_getinterruptmask>
 8004a20:	0003      	movs	r3, r0
 8004a22:	001a      	movs	r2, r3
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	801a      	strh	r2, [r3, #0]
         break;
 8004a28:	e086      	b.n	8004b38 <ctlwizchip+0x1b0>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	b2da      	uxtb	r2, r3
 8004a34:	2398      	movs	r3, #152	; 0x98
 8004a36:	015b      	lsls	r3, r3, #5
 8004a38:	0011      	movs	r1, r2
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f7fe fba2 	bl	8003184 <WIZCHIP_WRITE>
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	881b      	ldrh	r3, [r3, #0]
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	23a0      	movs	r3, #160	; 0xa0
 8004a48:	015b      	lsls	r3, r3, #5
 8004a4a:	0011      	movs	r1, r2
 8004a4c:	0018      	movs	r0, r3
 8004a4e:	f7fe fb99 	bl	8003184 <WIZCHIP_WRITE>
         break;
 8004a52:	e071      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004a54:	2398      	movs	r3, #152	; 0x98
 8004a56:	015b      	lsls	r3, r3, #5
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fe fb41 	bl	80030e0 <WIZCHIP_READ>
 8004a5e:	0003      	movs	r3, r0
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	021b      	lsls	r3, r3, #8
 8004a64:	b29c      	uxth	r4, r3
 8004a66:	23a0      	movs	r3, #160	; 0xa0
 8004a68:	015b      	lsls	r3, r3, #5
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fe fb38 	bl	80030e0 <WIZCHIP_READ>
 8004a70:	0003      	movs	r3, r0
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	18e3      	adds	r3, r4, r3
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	801a      	strh	r2, [r3, #0]
         break;
 8004a7c:	e05c      	b.n	8004b38 <ctlwizchip+0x1b0>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004a7e:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <ctlwizchip+0x1c0>)
 8004a80:	789a      	ldrb	r2, [r3, #2]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4a2f      	ldr	r2, [pc, #188]	; (8004b48 <ctlwizchip+0x1c0>)
 8004a8c:	78d2      	ldrb	r2, [r2, #3]
 8004a8e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	3302      	adds	r3, #2
 8004a94:	4a2c      	ldr	r2, [pc, #176]	; (8004b48 <ctlwizchip+0x1c0>)
 8004a96:	7912      	ldrb	r2, [r2, #4]
 8004a98:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	3303      	adds	r3, #3
 8004a9e:	4a2a      	ldr	r2, [pc, #168]	; (8004b48 <ctlwizchip+0x1c0>)
 8004aa0:	7952      	ldrb	r2, [r2, #5]
 8004aa2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4a27      	ldr	r2, [pc, #156]	; (8004b48 <ctlwizchip+0x1c0>)
 8004aaa:	7992      	ldrb	r2, [r2, #6]
 8004aac:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = 0;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	3305      	adds	r3, #5
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
         break;
 8004ab6:	e03f      	b.n	8004b38 <ctlwizchip+0x1b0>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8004ab8:	f000 fa40 	bl	8004f3c <wizphy_reset>
         break;
 8004abc:	e03c      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 fa6f 	bl	8004fa4 <wizphy_setphyconf>
         break;
 8004ac6:	e037      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fac8 	bl	8005060 <wizphy_getphyconf>
         break;
 8004ad0:	e032      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	0018      	movs	r0, r3
 8004ad8:	f000 fb32 	bl	8005140 <wizphy_setphypmode>
 8004adc:	0003      	movs	r3, r0
 8004ade:	e02c      	b.n	8004b3a <ctlwizchip+0x1b2>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8004ae0:	f000 fa0d 	bl	8004efe <wizphy_getphypmode>
 8004ae4:	0003      	movs	r3, r0
 8004ae6:	001a      	movs	r2, r3
 8004ae8:	2117      	movs	r1, #23
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8004aee:	187b      	adds	r3, r7, r1
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	2bff      	cmp	r3, #255	; 0xff
 8004af4:	d102      	bne.n	8004afc <ctlwizchip+0x174>
 8004af6:	2301      	movs	r3, #1
 8004af8:	425b      	negs	r3, r3
 8004afa:	e01e      	b.n	8004b3a <ctlwizchip+0x1b2>
         *(uint8_t*)arg = tmp;
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2217      	movs	r2, #23
 8004b00:	18ba      	adds	r2, r7, r2
 8004b02:	7812      	ldrb	r2, [r2, #0]
 8004b04:	701a      	strb	r2, [r3, #0]
         break;
 8004b06:	e017      	b.n	8004b38 <ctlwizchip+0x1b0>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8004b08:	f000 f9df 	bl	8004eca <wizphy_getphylink>
 8004b0c:	0003      	movs	r3, r0
 8004b0e:	001a      	movs	r2, r3
 8004b10:	2117      	movs	r1, #23
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	701a      	strb	r2, [r3, #0]
         if((int8_t)tmp == -1) return -1;
 8004b16:	187b      	adds	r3, r7, r1
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2bff      	cmp	r3, #255	; 0xff
 8004b1c:	d102      	bne.n	8004b24 <ctlwizchip+0x19c>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	425b      	negs	r3, r3
 8004b22:	e00a      	b.n	8004b3a <ctlwizchip+0x1b2>
         *(uint8_t*)arg = tmp;
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2217      	movs	r2, #23
 8004b28:	18ba      	adds	r2, r7, r2
 8004b2a:	7812      	ldrb	r2, [r2, #0]
 8004b2c:	701a      	strb	r2, [r3, #0]
         break;
 8004b2e:	e003      	b.n	8004b38 <ctlwizchip+0x1b0>
   #endif      
      default:
         return -1;
 8004b30:	2301      	movs	r3, #1
 8004b32:	425b      	negs	r3, r3
 8004b34:	e001      	b.n	8004b3a <ctlwizchip+0x1b2>
         break;
 8004b36:	46c0      	nop			; (mov r8, r8)
   }
   return 0;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	b007      	add	sp, #28
 8004b40:	bd90      	pop	{r4, r7, pc}
 8004b42:	46c0      	nop			; (mov r8, r8)
 8004b44:	0800656c 	.word	0x0800656c
 8004b48:	20000014 	.word	0x20000014

08004b4c <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
   uint8_t gw[4], sn[4], sip[4];
   uint8_t mac[6];
   getSHAR(mac);
 8004b52:	1d39      	adds	r1, r7, #4
 8004b54:	2390      	movs	r3, #144	; 0x90
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	2206      	movs	r2, #6
 8004b5a:	0018      	movs	r0, r3
 8004b5c:	f7fe fb68 	bl	8003230 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8004b60:	2414      	movs	r4, #20
 8004b62:	1939      	adds	r1, r7, r4
 8004b64:	2380      	movs	r3, #128	; 0x80
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	2204      	movs	r2, #4
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f7fe fb60 	bl	8003230 <WIZCHIP_READ_BUF>
 8004b70:	2510      	movs	r5, #16
 8004b72:	1979      	adds	r1, r7, r5
 8004b74:	23a0      	movs	r3, #160	; 0xa0
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	2204      	movs	r2, #4
 8004b7a:	0018      	movs	r0, r3
 8004b7c:	f7fe fb58 	bl	8003230 <WIZCHIP_READ_BUF>
 8004b80:	260c      	movs	r6, #12
 8004b82:	19b9      	adds	r1, r7, r6
 8004b84:	23f0      	movs	r3, #240	; 0xf0
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	2204      	movs	r2, #4
 8004b8a:	0018      	movs	r0, r3
 8004b8c:	f7fe fb50 	bl	8003230 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8004b90:	2180      	movs	r1, #128	; 0x80
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fe faf6 	bl	8003184 <WIZCHIP_WRITE>
   getMR(); // for delay
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fe faa1 	bl	80030e0 <WIZCHIP_READ>
   setSHAR(mac);
 8004b9e:	1d39      	adds	r1, r7, #4
 8004ba0:	2390      	movs	r3, #144	; 0x90
 8004ba2:	011b      	lsls	r3, r3, #4
 8004ba4:	2206      	movs	r2, #6
 8004ba6:	0018      	movs	r0, r3
 8004ba8:	f7fe fbb0 	bl	800330c <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004bac:	1939      	adds	r1, r7, r4
 8004bae:	2380      	movs	r3, #128	; 0x80
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2204      	movs	r2, #4
 8004bb4:	0018      	movs	r0, r3
 8004bb6:	f7fe fba9 	bl	800330c <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004bba:	1979      	adds	r1, r7, r5
 8004bbc:	23a0      	movs	r3, #160	; 0xa0
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	2204      	movs	r2, #4
 8004bc2:	0018      	movs	r0, r3
 8004bc4:	f7fe fba2 	bl	800330c <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004bc8:	19b9      	adds	r1, r7, r6
 8004bca:	23f0      	movs	r3, #240	; 0xf0
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	2204      	movs	r2, #4
 8004bd0:	0018      	movs	r0, r3
 8004bd2:	f7fe fb9b 	bl	800330c <WIZCHIP_WRITE_BUF>
}
 8004bd6:	46c0      	nop			; (mov r8, r8)
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	b007      	add	sp, #28
 8004bdc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bde <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8004bde:	b590      	push	{r4, r7, lr}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
 8004be6:	6039      	str	r1, [r7, #0]
   int8_t i;
   int8_t tmp = 0;
 8004be8:	240e      	movs	r4, #14
 8004bea:	193b      	adds	r3, r7, r4
 8004bec:	2200      	movs	r2, #0
 8004bee:	701a      	strb	r2, [r3, #0]
   wizchip_sw_reset();
 8004bf0:	f7ff ffac 	bl	8004b4c <wizchip_sw_reset>
   if(txsize)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d055      	beq.n	8004ca6 <wizchip_init+0xc8>
   {
	   tmp = 0;
 8004bfa:	193b      	adds	r3, r7, r4
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
	   for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c00:	230f      	movs	r3, #15
 8004c02:	18fb      	adds	r3, r7, r3
 8004c04:	2200      	movs	r2, #0
 8004c06:	701a      	strb	r2, [r3, #0]
 8004c08:	e01e      	b.n	8004c48 <wizchip_init+0x6a>
	   {
		   tmp += txsize[i];
 8004c0a:	230f      	movs	r3, #15
 8004c0c:	18fb      	adds	r3, r7, r3
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	b25b      	sxtb	r3, r3
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	18d3      	adds	r3, r2, r3
 8004c16:	781a      	ldrb	r2, [r3, #0]
 8004c18:	210e      	movs	r1, #14
 8004c1a:	187b      	adds	r3, r7, r1
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	18d3      	adds	r3, r2, r3
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	187b      	adds	r3, r7, r1
 8004c24:	701a      	strb	r2, [r3, #0]
		   if(tmp > 16) return -1;
 8004c26:	187b      	adds	r3, r7, r1
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	b25b      	sxtb	r3, r3
 8004c2c:	2b10      	cmp	r3, #16
 8004c2e:	dd02      	ble.n	8004c36 <wizchip_init+0x58>
 8004c30:	2301      	movs	r3, #1
 8004c32:	425b      	negs	r3, r3
 8004c34:	e092      	b.n	8004d5c <wizchip_init+0x17e>
	   for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c36:	210f      	movs	r1, #15
 8004c38:	187b      	adds	r3, r7, r1
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	b25b      	sxtb	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	187b      	adds	r3, r7, r1
 8004c46:	701a      	strb	r2, [r3, #0]
 8004c48:	220f      	movs	r2, #15
 8004c4a:	18bb      	adds	r3, r7, r2
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	2b07      	cmp	r3, #7
 8004c52:	ddda      	ble.n	8004c0a <wizchip_init+0x2c>
	   }
	   for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c54:	18bb      	adds	r3, r7, r2
 8004c56:	2200      	movs	r2, #0
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e01e      	b.n	8004c9a <wizchip_init+0xbc>
	   {
		   setSn_TXBUF_SIZE(i, txsize[i]);
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	18bb      	adds	r3, r7, r2
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	3301      	adds	r3, #1
 8004c68:	00db      	lsls	r3, r3, #3
 8004c6a:	21f8      	movs	r1, #248	; 0xf8
 8004c6c:	0149      	lsls	r1, r1, #5
 8004c6e:	468c      	mov	ip, r1
 8004c70:	4463      	add	r3, ip
 8004c72:	0018      	movs	r0, r3
 8004c74:	0014      	movs	r4, r2
 8004c76:	18bb      	adds	r3, r7, r2
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	b25b      	sxtb	r3, r3
 8004c7c:	687a      	ldr	r2, [r7, #4]
 8004c7e:	18d3      	adds	r3, r2, r3
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	0019      	movs	r1, r3
 8004c84:	f7fe fa7e 	bl	8003184 <WIZCHIP_WRITE>
	   for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004c88:	0021      	movs	r1, r4
 8004c8a:	187b      	adds	r3, r7, r1
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	b25b      	sxtb	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	3301      	adds	r3, #1
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	187b      	adds	r3, r7, r1
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	230f      	movs	r3, #15
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	2b07      	cmp	r3, #7
 8004ca4:	ddda      	ble.n	8004c5c <wizchip_init+0x7e>
	   }
   }

   if(rxsize)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d056      	beq.n	8004d5a <wizchip_init+0x17c>
   {
      tmp = 0;
 8004cac:	230e      	movs	r3, #14
 8004cae:	18fb      	adds	r3, r7, r3
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	701a      	strb	r2, [r3, #0]
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004cb4:	230f      	movs	r3, #15
 8004cb6:	18fb      	adds	r3, r7, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e01e      	b.n	8004cfc <wizchip_init+0x11e>
      {
    	  tmp += rxsize[i];
 8004cbe:	230f      	movs	r3, #15
 8004cc0:	18fb      	adds	r3, r7, r3
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	b25b      	sxtb	r3, r3
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	18d3      	adds	r3, r2, r3
 8004cca:	781a      	ldrb	r2, [r3, #0]
 8004ccc:	210e      	movs	r1, #14
 8004cce:	187b      	adds	r3, r7, r1
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	18d3      	adds	r3, r2, r3
 8004cd4:	b2da      	uxtb	r2, r3
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	701a      	strb	r2, [r3, #0]
    	  if(tmp > 16) return -1;
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b25b      	sxtb	r3, r3
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	dd02      	ble.n	8004cea <wizchip_init+0x10c>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	425b      	negs	r3, r3
 8004ce8:	e038      	b.n	8004d5c <wizchip_init+0x17e>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004cea:	210f      	movs	r1, #15
 8004cec:	187b      	adds	r3, r7, r1
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	187b      	adds	r3, r7, r1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	220f      	movs	r2, #15
 8004cfe:	18bb      	adds	r3, r7, r2
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	b25b      	sxtb	r3, r3
 8004d04:	2b07      	cmp	r3, #7
 8004d06:	ddda      	ble.n	8004cbe <wizchip_init+0xe0>
      }

      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d08:	18bb      	adds	r3, r7, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
 8004d0e:	e01e      	b.n	8004d4e <wizchip_init+0x170>
      {
    	  setSn_RXBUF_SIZE(i, rxsize[i]);
 8004d10:	220f      	movs	r2, #15
 8004d12:	18bb      	adds	r3, r7, r2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	b25b      	sxtb	r3, r3
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	00db      	lsls	r3, r3, #3
 8004d1e:	21f0      	movs	r1, #240	; 0xf0
 8004d20:	0149      	lsls	r1, r1, #5
 8004d22:	468c      	mov	ip, r1
 8004d24:	4463      	add	r3, ip
 8004d26:	0018      	movs	r0, r3
 8004d28:	0014      	movs	r4, r2
 8004d2a:	18bb      	adds	r3, r7, r2
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b25b      	sxtb	r3, r3
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	18d3      	adds	r3, r2, r3
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	0019      	movs	r1, r3
 8004d38:	f7fe fa24 	bl	8003184 <WIZCHIP_WRITE>
      for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004d3c:	0021      	movs	r1, r4
 8004d3e:	187b      	adds	r3, r7, r1
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	b25b      	sxtb	r3, r3
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	3301      	adds	r3, #1
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	187b      	adds	r3, r7, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	230f      	movs	r3, #15
 8004d50:	18fb      	adds	r3, r7, r3
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	2b07      	cmp	r3, #7
 8004d58:	ddda      	ble.n	8004d10 <wizchip_init+0x132>
      }
   }
   return 0;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	0018      	movs	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	b005      	add	sp, #20
 8004d62:	bd90      	pop	{r4, r7, pc}

08004d64 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	1dbb      	adds	r3, r7, #6
 8004d6e:	801a      	strh	r2, [r3, #0]
   uint8_t ir  = (uint8_t)intr;
 8004d70:	210f      	movs	r1, #15
 8004d72:	187b      	adds	r3, r7, r1
 8004d74:	1dba      	adds	r2, r7, #6
 8004d76:	8812      	ldrh	r2, [r2, #0]
 8004d78:	701a      	strb	r2, [r3, #0]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004d7a:	1dbb      	adds	r3, r7, #6
 8004d7c:	881b      	ldrh	r3, [r3, #0]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	b29a      	uxth	r2, r3
 8004d82:	240e      	movs	r4, #14
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	701a      	strb	r2, [r3, #0]
   setIR(ir);
 8004d88:	187b      	adds	r3, r7, r1
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	220f      	movs	r2, #15
 8004d8e:	4393      	bics	r3, r2
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	23a8      	movs	r3, #168	; 0xa8
 8004d94:	015b      	lsls	r3, r3, #5
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f7fe f9f3 	bl	8003184 <WIZCHIP_WRITE>
   setSIR(sir);
 8004d9e:	193b      	adds	r3, r7, r4
 8004da0:	781a      	ldrb	r2, [r3, #0]
 8004da2:	23b8      	movs	r3, #184	; 0xb8
 8004da4:	015b      	lsls	r3, r3, #5
 8004da6:	0011      	movs	r1, r2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7fe f9eb 	bl	8003184 <WIZCHIP_WRITE>
}
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	46bd      	mov	sp, r7
 8004db2:	b005      	add	sp, #20
 8004db4:	bd90      	pop	{r4, r7, pc}

08004db6 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8004db6:	b590      	push	{r4, r7, lr}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8004dbc:	1dfb      	adds	r3, r7, #7
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
   uint8_t sir = 0;
 8004dc2:	1dbb      	adds	r3, r7, #6
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 8004dc8:	1d3b      	adds	r3, r7, #4
 8004dca:	2200      	movs	r2, #0
 8004dcc:	801a      	strh	r2, [r3, #0]
   ir  = getIR();
 8004dce:	23a8      	movs	r3, #168	; 0xa8
 8004dd0:	015b      	lsls	r3, r3, #5
 8004dd2:	0018      	movs	r0, r3
 8004dd4:	f7fe f984 	bl	80030e0 <WIZCHIP_READ>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	0019      	movs	r1, r3
 8004ddc:	1dfb      	adds	r3, r7, #7
 8004dde:	220f      	movs	r2, #15
 8004de0:	4391      	bics	r1, r2
 8004de2:	000a      	movs	r2, r1
 8004de4:	701a      	strb	r2, [r3, #0]
   sir = getSIR();
 8004de6:	1dbc      	adds	r4, r7, #6
 8004de8:	23b8      	movs	r3, #184	; 0xb8
 8004dea:	015b      	lsls	r3, r3, #5
 8004dec:	0018      	movs	r0, r3
 8004dee:	f7fe f977 	bl	80030e0 <WIZCHIP_READ>
 8004df2:	0003      	movs	r3, r0
 8004df4:	7023      	strb	r3, [r4, #0]
   ret = sir;
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	1dba      	adds	r2, r7, #6
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	801a      	strh	r2, [r3, #0]
   ret = (ret << 8) + ir;
 8004dfe:	1d3b      	adds	r3, r7, #4
 8004e00:	881b      	ldrh	r3, [r3, #0]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	b299      	uxth	r1, r3
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	b29a      	uxth	r2, r3
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	188a      	adds	r2, r1, r2
 8004e10:	801a      	strh	r2, [r3, #0]
   return (intr_kind)ret;
 8004e12:	1d3b      	adds	r3, r7, #4
 8004e14:	881b      	ldrh	r3, [r3, #0]
}
 8004e16:	0018      	movs	r0, r3
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	b003      	add	sp, #12
 8004e1c:	bd90      	pop	{r4, r7, pc}

08004e1e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004e1e:	b590      	push	{r4, r7, lr}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	0002      	movs	r2, r0
 8004e26:	1dbb      	adds	r3, r7, #6
 8004e28:	801a      	strh	r2, [r3, #0]
   uint8_t imr  = (uint8_t)intr;
 8004e2a:	210f      	movs	r1, #15
 8004e2c:	187b      	adds	r3, r7, r1
 8004e2e:	1dba      	adds	r2, r7, #6
 8004e30:	8812      	ldrh	r2, [r2, #0]
 8004e32:	701a      	strb	r2, [r3, #0]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004e34:	1dbb      	adds	r3, r7, #6
 8004e36:	881b      	ldrh	r3, [r3, #0]
 8004e38:	0a1b      	lsrs	r3, r3, #8
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	240e      	movs	r4, #14
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	701a      	strb	r2, [r3, #0]
   setIMR(imr);
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	781a      	ldrb	r2, [r3, #0]
 8004e46:	23b0      	movs	r3, #176	; 0xb0
 8004e48:	015b      	lsls	r3, r3, #5
 8004e4a:	0011      	movs	r1, r2
 8004e4c:	0018      	movs	r0, r3
 8004e4e:	f7fe f999 	bl	8003184 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	781a      	ldrb	r2, [r3, #0]
 8004e56:	23c0      	movs	r3, #192	; 0xc0
 8004e58:	015b      	lsls	r3, r3, #5
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7fe f991 	bl	8003184 <WIZCHIP_WRITE>
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b005      	add	sp, #20
 8004e68:	bd90      	pop	{r4, r7, pc}

08004e6a <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8004e6a:	b590      	push	{r4, r7, lr}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004e70:	1dfb      	adds	r3, r7, #7
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
   uint8_t simr = 0;
 8004e76:	1dbb      	adds	r3, r7, #6
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
   uint16_t ret = 0;
 8004e7c:	1d3b      	adds	r3, r7, #4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	801a      	strh	r2, [r3, #0]
   imr  = getIMR();
 8004e82:	1dfc      	adds	r4, r7, #7
 8004e84:	23b0      	movs	r3, #176	; 0xb0
 8004e86:	015b      	lsls	r3, r3, #5
 8004e88:	0018      	movs	r0, r3
 8004e8a:	f7fe f929 	bl	80030e0 <WIZCHIP_READ>
 8004e8e:	0003      	movs	r3, r0
 8004e90:	7023      	strb	r3, [r4, #0]
   simr = getSIMR();
 8004e92:	1dbc      	adds	r4, r7, #6
 8004e94:	23c0      	movs	r3, #192	; 0xc0
 8004e96:	015b      	lsls	r3, r3, #5
 8004e98:	0018      	movs	r0, r3
 8004e9a:	f7fe f921 	bl	80030e0 <WIZCHIP_READ>
 8004e9e:	0003      	movs	r3, r0
 8004ea0:	7023      	strb	r3, [r4, #0]
   ret = simr;
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	1dba      	adds	r2, r7, #6
 8004ea6:	7812      	ldrb	r2, [r2, #0]
 8004ea8:	801a      	strh	r2, [r3, #0]
   ret = (ret << 8) + imr;
 8004eaa:	1d3b      	adds	r3, r7, #4
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	b299      	uxth	r1, r3
 8004eb2:	1dfb      	adds	r3, r7, #7
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	b29a      	uxth	r2, r3
 8004eb8:	1d3b      	adds	r3, r7, #4
 8004eba:	188a      	adds	r2, r1, r2
 8004ebc:	801a      	strh	r2, [r3, #0]
   return (intr_kind)ret;
 8004ebe:	1d3b      	adds	r3, r7, #4
 8004ec0:	881b      	ldrh	r3, [r3, #0]
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b003      	add	sp, #12
 8004ec8:	bd90      	pop	{r4, r7, pc}

08004eca <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b082      	sub	sp, #8
 8004ece:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8004ed6:	23b8      	movs	r3, #184	; 0xb8
 8004ed8:	019b      	lsls	r3, r3, #6
 8004eda:	0018      	movs	r0, r3
 8004edc:	f7fe f900 	bl	80030e0 <WIZCHIP_READ>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	001a      	movs	r2, r3
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d002      	beq.n	8004ef0 <wizphy_getphylink+0x26>
      tmp = PHY_LINK_ON;
 8004eea:	1dfb      	adds	r3, r7, #7
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
   return tmp;
 8004ef0:	1dfb      	adds	r3, r7, #7
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b25b      	sxtb	r3, r3
}
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	b002      	add	sp, #8
 8004efc:	bd80      	pop	{r7, pc}

08004efe <wizphy_getphypmode>:

int8_t wizphy_getphypmode(void)
{
 8004efe:	b580      	push	{r7, lr}
 8004f00:	b082      	sub	sp, #8
 8004f02:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8004f04:	1dfb      	adds	r3, r7, #7
 8004f06:	2200      	movs	r2, #0
 8004f08:	701a      	strb	r2, [r3, #0]

   if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8004f0a:	23b8      	movs	r3, #184	; 0xb8
 8004f0c:	019b      	lsls	r3, r3, #6
 8004f0e:	0018      	movs	r0, r3
 8004f10:	f7fe f8e6 	bl	80030e0 <WIZCHIP_READ>
 8004f14:	0003      	movs	r3, r0
 8004f16:	001a      	movs	r2, r3
 8004f18:	2338      	movs	r3, #56	; 0x38
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b30      	cmp	r3, #48	; 0x30
 8004f1e:	d103      	bne.n	8004f28 <wizphy_getphypmode+0x2a>
	tmp = PHY_POWER_DOWN;
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <wizphy_getphypmode+0x30>
   else
	tmp = PHY_POWER_NORM;
 8004f28:	1dfb      	adds	r3, r7, #7
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	701a      	strb	r2, [r3, #0]
   return tmp;
 8004f2e:	1dfb      	adds	r3, r7, #7
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b25b      	sxtb	r3, r3
}
 8004f34:	0018      	movs	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <wizphy_reset>:


void wizphy_reset(void)
{
 8004f3c:	b590      	push	{r4, r7, lr}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8004f42:	1dfc      	adds	r4, r7, #7
 8004f44:	23b8      	movs	r3, #184	; 0xb8
 8004f46:	019b      	lsls	r3, r3, #6
 8004f48:	0018      	movs	r0, r3
 8004f4a:	f7fe f8c9 	bl	80030e0 <WIZCHIP_READ>
 8004f4e:	0003      	movs	r3, r0
 8004f50:	7023      	strb	r3, [r4, #0]
   tmp &= PHYCFGR_RST;
 8004f52:	1dfb      	adds	r3, r7, #7
 8004f54:	1dfa      	adds	r2, r7, #7
 8004f56:	7812      	ldrb	r2, [r2, #0]
 8004f58:	217f      	movs	r1, #127	; 0x7f
 8004f5a:	400a      	ands	r2, r1
 8004f5c:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 8004f5e:	1dfb      	adds	r3, r7, #7
 8004f60:	781a      	ldrb	r2, [r3, #0]
 8004f62:	23b8      	movs	r3, #184	; 0xb8
 8004f64:	019b      	lsls	r3, r3, #6
 8004f66:	0011      	movs	r1, r2
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f7fe f90b 	bl	8003184 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004f6e:	1dfc      	adds	r4, r7, #7
 8004f70:	23b8      	movs	r3, #184	; 0xb8
 8004f72:	019b      	lsls	r3, r3, #6
 8004f74:	0018      	movs	r0, r3
 8004f76:	f7fe f8b3 	bl	80030e0 <WIZCHIP_READ>
 8004f7a:	0003      	movs	r3, r0
 8004f7c:	7023      	strb	r3, [r4, #0]
   tmp |= ~PHYCFGR_RST;
 8004f7e:	1dfb      	adds	r3, r7, #7
 8004f80:	1dfa      	adds	r2, r7, #7
 8004f82:	7812      	ldrb	r2, [r2, #0]
 8004f84:	2180      	movs	r1, #128	; 0x80
 8004f86:	4249      	negs	r1, r1
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 8004f8c:	1dfb      	adds	r3, r7, #7
 8004f8e:	781a      	ldrb	r2, [r3, #0]
 8004f90:	23b8      	movs	r3, #184	; 0xb8
 8004f92:	019b      	lsls	r3, r3, #6
 8004f94:	0011      	movs	r1, r2
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7fe f8f4 	bl	8003184 <WIZCHIP_WRITE>
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	b003      	add	sp, #12
 8004fa2:	bd90      	pop	{r4, r7, pc}

08004fa4 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004fac:	210f      	movs	r1, #15
 8004fae:	187b      	adds	r3, r7, r1
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
   if(phyconf->by == PHY_CONFBY_SW)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d106      	bne.n	8004fca <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMD;
 8004fbc:	187b      	adds	r3, r7, r1
 8004fbe:	187a      	adds	r2, r7, r1
 8004fc0:	7812      	ldrb	r2, [r2, #0]
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	701a      	strb	r2, [r3, #0]
 8004fc8:	e006      	b.n	8004fd8 <wizphy_setphyconf+0x34>
   else
      tmp &= ~PHYCFGR_OPMD;
 8004fca:	220f      	movs	r2, #15
 8004fcc:	18bb      	adds	r3, r7, r2
 8004fce:	18ba      	adds	r2, r7, r2
 8004fd0:	7812      	ldrb	r2, [r2, #0]
 8004fd2:	2140      	movs	r1, #64	; 0x40
 8004fd4:	438a      	bics	r2, r1
 8004fd6:	701a      	strb	r2, [r3, #0]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	785b      	ldrb	r3, [r3, #1]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d107      	bne.n	8004ff0 <wizphy_setphyconf+0x4c>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8004fe0:	220f      	movs	r2, #15
 8004fe2:	18bb      	adds	r3, r7, r2
 8004fe4:	18ba      	adds	r2, r7, r2
 8004fe6:	7812      	ldrb	r2, [r2, #0]
 8004fe8:	2138      	movs	r1, #56	; 0x38
 8004fea:	430a      	orrs	r2, r1
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e028      	b.n	8005042 <wizphy_setphyconf+0x9e>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	78db      	ldrb	r3, [r3, #3]
 8004ff4:	2b01      	cmp	r3, #1
 8004ff6:	d113      	bne.n	8005020 <wizphy_setphyconf+0x7c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	789b      	ldrb	r3, [r3, #2]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d107      	bne.n	8005010 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100F;
 8005000:	220f      	movs	r2, #15
 8005002:	18bb      	adds	r3, r7, r2
 8005004:	18ba      	adds	r2, r7, r2
 8005006:	7812      	ldrb	r2, [r2, #0]
 8005008:	2118      	movs	r1, #24
 800500a:	430a      	orrs	r2, r1
 800500c:	701a      	strb	r2, [r3, #0]
 800500e:	e018      	b.n	8005042 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8005010:	220f      	movs	r2, #15
 8005012:	18bb      	adds	r3, r7, r2
 8005014:	18ba      	adds	r2, r7, r2
 8005016:	7812      	ldrb	r2, [r2, #0]
 8005018:	2108      	movs	r1, #8
 800501a:	430a      	orrs	r2, r1
 800501c:	701a      	strb	r2, [r3, #0]
 800501e:	e010      	b.n	8005042 <wizphy_setphyconf+0x9e>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	789b      	ldrb	r3, [r3, #2]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <wizphy_setphyconf+0x94>
            tmp |= PHYCFGR_OPMDC_100H;
 8005028:	220f      	movs	r2, #15
 800502a:	18bb      	adds	r3, r7, r2
 800502c:	18ba      	adds	r2, r7, r2
 800502e:	7812      	ldrb	r2, [r2, #0]
 8005030:	2110      	movs	r1, #16
 8005032:	430a      	orrs	r2, r1
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e004      	b.n	8005042 <wizphy_setphyconf+0x9e>
         else
            tmp |= PHYCFGR_OPMDC_10H;
 8005038:	220f      	movs	r2, #15
 800503a:	18bb      	adds	r3, r7, r2
 800503c:	18ba      	adds	r2, r7, r2
 800503e:	7812      	ldrb	r2, [r2, #0]
 8005040:	701a      	strb	r2, [r3, #0]
      }
   }
   setPHYCFGR(tmp);
 8005042:	230f      	movs	r3, #15
 8005044:	18fb      	adds	r3, r7, r3
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	23b8      	movs	r3, #184	; 0xb8
 800504a:	019b      	lsls	r3, r3, #6
 800504c:	0011      	movs	r1, r2
 800504e:	0018      	movs	r0, r3
 8005050:	f7fe f898 	bl	8003184 <WIZCHIP_WRITE>
   wizphy_reset();
 8005054:	f7ff ff72 	bl	8004f3c <wizphy_reset>
}
 8005058:	46c0      	nop			; (mov r8, r8)
 800505a:	46bd      	mov	sp, r7
 800505c:	b004      	add	sp, #16
 800505e:	bd80      	pop	{r7, pc}

08005060 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8005060:	b5b0      	push	{r4, r5, r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8005068:	250f      	movs	r5, #15
 800506a:	197b      	adds	r3, r7, r5
 800506c:	2200      	movs	r2, #0
 800506e:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 8005070:	197c      	adds	r4, r7, r5
 8005072:	23b8      	movs	r3, #184	; 0xb8
 8005074:	019b      	lsls	r3, r3, #6
 8005076:	0018      	movs	r0, r3
 8005078:	f7fe f832 	bl	80030e0 <WIZCHIP_READ>
 800507c:	0003      	movs	r3, r0
 800507e:	7023      	strb	r3, [r4, #0]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8005080:	0029      	movs	r1, r5
 8005082:	187b      	adds	r3, r7, r1
 8005084:	781b      	ldrb	r3, [r3, #0]
 8005086:	119b      	asrs	r3, r3, #6
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2201      	movs	r2, #1
 800508c:	4013      	ands	r3, r2
 800508e:	b2da      	uxtb	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8005094:	187b      	adds	r3, r7, r1
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2238      	movs	r2, #56	; 0x38
 800509a:	4013      	ands	r3, r2
 800509c:	2b20      	cmp	r3, #32
 800509e:	d001      	beq.n	80050a4 <wizphy_getphyconf+0x44>
 80050a0:	2b38      	cmp	r3, #56	; 0x38
 80050a2:	d103      	bne.n	80050ac <wizphy_getphyconf+0x4c>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	705a      	strb	r2, [r3, #1]
         break;
 80050aa:	e003      	b.n	80050b4 <wizphy_getphyconf+0x54>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	705a      	strb	r2, [r3, #1]
         break;
 80050b2:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80050b4:	230f      	movs	r3, #15
 80050b6:	18fb      	adds	r3, r7, r3
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	2238      	movs	r2, #56	; 0x38
 80050bc:	4013      	ands	r3, r2
 80050be:	3b10      	subs	r3, #16
 80050c0:	2210      	movs	r2, #16
 80050c2:	429a      	cmp	r2, r3
 80050c4:	4192      	sbcs	r2, r2
 80050c6:	4252      	negs	r2, r2
 80050c8:	b2d2      	uxtb	r2, r2
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	d10d      	bne.n	80050ea <wizphy_getphyconf+0x8a>
 80050ce:	2201      	movs	r2, #1
 80050d0:	409a      	lsls	r2, r3
 80050d2:	0013      	movs	r3, r2
 80050d4:	4a18      	ldr	r2, [pc, #96]	; (8005138 <wizphy_getphyconf+0xd8>)
 80050d6:	4013      	ands	r3, r2
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	4193      	sbcs	r3, r2
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <wizphy_getphyconf+0x8a>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	709a      	strb	r2, [r3, #2]
         break;
 80050e8:	e003      	b.n	80050f2 <wizphy_getphyconf+0x92>
      default:
         phyconf->speed = PHY_SPEED_10;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	709a      	strb	r2, [r3, #2]
         break;
 80050f0:	46c0      	nop			; (mov r8, r8)
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80050f2:	230f      	movs	r3, #15
 80050f4:	18fb      	adds	r3, r7, r3
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	2238      	movs	r2, #56	; 0x38
 80050fa:	4013      	ands	r3, r2
 80050fc:	3b08      	subs	r3, #8
 80050fe:	2218      	movs	r2, #24
 8005100:	429a      	cmp	r2, r3
 8005102:	4192      	sbcs	r2, r2
 8005104:	4252      	negs	r2, r2
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	2a00      	cmp	r2, #0
 800510a:	d10d      	bne.n	8005128 <wizphy_getphyconf+0xc8>
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	0013      	movs	r3, r2
 8005112:	4a0a      	ldr	r2, [pc, #40]	; (800513c <wizphy_getphyconf+0xdc>)
 8005114:	4013      	ands	r3, r2
 8005116:	1e5a      	subs	r2, r3, #1
 8005118:	4193      	sbcs	r3, r2
 800511a:	b2db      	uxtb	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	d003      	beq.n	8005128 <wizphy_getphyconf+0xc8>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	70da      	strb	r2, [r3, #3]
         break;
 8005126:	e003      	b.n	8005130 <wizphy_getphyconf+0xd0>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	70da      	strb	r2, [r3, #3]
         break;
 800512e:	46c0      	nop			; (mov r8, r8)
   }
}
 8005130:	46c0      	nop			; (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	b004      	add	sp, #16
 8005136:	bdb0      	pop	{r4, r5, r7, pc}
 8005138:	00010101 	.word	0x00010101
 800513c:	01010001 	.word	0x01010001

08005140 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8005140:	b5b0      	push	{r4, r5, r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	0002      	movs	r2, r0
 8005148:	1dfb      	adds	r3, r7, #7
 800514a:	701a      	strb	r2, [r3, #0]
   uint8_t tmp = 0;
 800514c:	250f      	movs	r5, #15
 800514e:	197b      	adds	r3, r7, r5
 8005150:	2200      	movs	r2, #0
 8005152:	701a      	strb	r2, [r3, #0]
   tmp = getPHYCFGR();
 8005154:	197c      	adds	r4, r7, r5
 8005156:	23b8      	movs	r3, #184	; 0xb8
 8005158:	019b      	lsls	r3, r3, #6
 800515a:	0018      	movs	r0, r3
 800515c:	f7fd ffc0 	bl	80030e0 <WIZCHIP_READ>
 8005160:	0003      	movs	r3, r0
 8005162:	7023      	strb	r3, [r4, #0]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8005164:	197b      	adds	r3, r7, r5
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2240      	movs	r2, #64	; 0x40
 800516a:	4013      	ands	r3, r2
 800516c:	d102      	bne.n	8005174 <wizphy_setphypmode+0x34>
 800516e:	2301      	movs	r3, #1
 8005170:	425b      	negs	r3, r3
 8005172:	e040      	b.n	80051f6 <wizphy_setphypmode+0xb6>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8005174:	200f      	movs	r0, #15
 8005176:	183b      	adds	r3, r7, r0
 8005178:	183a      	adds	r2, r7, r0
 800517a:	7812      	ldrb	r2, [r2, #0]
 800517c:	2138      	movs	r1, #56	; 0x38
 800517e:	438a      	bics	r2, r1
 8005180:	701a      	strb	r2, [r3, #0]
   if( pmode == PHY_POWER_DOWN)
 8005182:	1dfb      	adds	r3, r7, #7
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d106      	bne.n	8005198 <wizphy_setphypmode+0x58>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800518a:	183b      	adds	r3, r7, r0
 800518c:	183a      	adds	r2, r7, r0
 800518e:	7812      	ldrb	r2, [r2, #0]
 8005190:	2130      	movs	r1, #48	; 0x30
 8005192:	430a      	orrs	r2, r1
 8005194:	701a      	strb	r2, [r3, #0]
 8005196:	e006      	b.n	80051a6 <wizphy_setphypmode+0x66>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8005198:	220f      	movs	r2, #15
 800519a:	18bb      	adds	r3, r7, r2
 800519c:	18ba      	adds	r2, r7, r2
 800519e:	7812      	ldrb	r2, [r2, #0]
 80051a0:	2138      	movs	r1, #56	; 0x38
 80051a2:	430a      	orrs	r2, r1
 80051a4:	701a      	strb	r2, [r3, #0]
   setPHYCFGR(tmp);
 80051a6:	250f      	movs	r5, #15
 80051a8:	197b      	adds	r3, r7, r5
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	23b8      	movs	r3, #184	; 0xb8
 80051ae:	019b      	lsls	r3, r3, #6
 80051b0:	0011      	movs	r1, r2
 80051b2:	0018      	movs	r0, r3
 80051b4:	f7fd ffe6 	bl	8003184 <WIZCHIP_WRITE>
   wizphy_reset();
 80051b8:	f7ff fec0 	bl	8004f3c <wizphy_reset>
   tmp = getPHYCFGR();
 80051bc:	197c      	adds	r4, r7, r5
 80051be:	23b8      	movs	r3, #184	; 0xb8
 80051c0:	019b      	lsls	r3, r3, #6
 80051c2:	0018      	movs	r0, r3
 80051c4:	f7fd ff8c 	bl	80030e0 <WIZCHIP_READ>
 80051c8:	0003      	movs	r3, r0
 80051ca:	7023      	strb	r3, [r4, #0]
   if( pmode == PHY_POWER_DOWN)
 80051cc:	1dfb      	adds	r3, r7, #7
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d106      	bne.n	80051e2 <wizphy_setphypmode+0xa2>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80051d4:	197b      	adds	r3, r7, r5
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2230      	movs	r2, #48	; 0x30
 80051da:	4013      	ands	r3, r2
 80051dc:	d009      	beq.n	80051f2 <wizphy_setphypmode+0xb2>
 80051de:	2300      	movs	r3, #0
 80051e0:	e009      	b.n	80051f6 <wizphy_setphypmode+0xb6>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80051e2:	230f      	movs	r3, #15
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	781b      	ldrb	r3, [r3, #0]
 80051e8:	2238      	movs	r2, #56	; 0x38
 80051ea:	4013      	ands	r3, r2
 80051ec:	d001      	beq.n	80051f2 <wizphy_setphypmode+0xb2>
 80051ee:	2300      	movs	r3, #0
 80051f0:	e001      	b.n	80051f6 <wizphy_setphypmode+0xb6>
   }
   return -1;
 80051f2:	2301      	movs	r3, #1
 80051f4:	425b      	negs	r3, r3
}
 80051f6:	0018      	movs	r0, r3
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b004      	add	sp, #16
 80051fc:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005200 <wizchip_setnetinfo>:



void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	2390      	movs	r3, #144	; 0x90
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	2206      	movs	r2, #6
 8005210:	0018      	movs	r0, r3
 8005212:	f7fe f87b 	bl	800330c <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	330e      	adds	r3, #14
 800521a:	0019      	movs	r1, r3
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	2204      	movs	r2, #4
 8005222:	0018      	movs	r0, r3
 8005224:	f7fe f872 	bl	800330c <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	330a      	adds	r3, #10
 800522c:	0019      	movs	r1, r3
 800522e:	23a0      	movs	r3, #160	; 0xa0
 8005230:	00db      	lsls	r3, r3, #3
 8005232:	2204      	movs	r2, #4
 8005234:	0018      	movs	r0, r3
 8005236:	f7fe f869 	bl	800330c <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	1d99      	adds	r1, r3, #6
 800523e:	23f0      	movs	r3, #240	; 0xf0
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	2204      	movs	r2, #4
 8005244:	0018      	movs	r0, r3
 8005246:	f7fe f861 	bl	800330c <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	7c9a      	ldrb	r2, [r3, #18]
 800524e:	4b0b      	ldr	r3, [pc, #44]	; (800527c <wizchip_setnetinfo+0x7c>)
 8005250:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	7cda      	ldrb	r2, [r3, #19]
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <wizchip_setnetinfo+0x7c>)
 8005258:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	7d1a      	ldrb	r2, [r3, #20]
 800525e:	4b07      	ldr	r3, [pc, #28]	; (800527c <wizchip_setnetinfo+0x7c>)
 8005260:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	7d5a      	ldrb	r2, [r3, #21]
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <wizchip_setnetinfo+0x7c>)
 8005268:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	7d9a      	ldrb	r2, [r3, #22]
 800526e:	4b04      	ldr	r3, [pc, #16]	; (8005280 <wizchip_setnetinfo+0x80>)
 8005270:	701a      	strb	r2, [r3, #0]
}
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	46bd      	mov	sp, r7
 8005276:	b002      	add	sp, #8
 8005278:	bd80      	pop	{r7, pc}
 800527a:	46c0      	nop			; (mov r8, r8)
 800527c:	200000e0 	.word	0x200000e0
 8005280:	200000e4 	.word	0x200000e4

08005284 <__errno>:
 8005284:	4b01      	ldr	r3, [pc, #4]	; (800528c <__errno+0x8>)
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	4770      	bx	lr
 800528a:	46c0      	nop			; (mov r8, r8)
 800528c:	2000003c 	.word	0x2000003c

08005290 <__libc_init_array>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	2600      	movs	r6, #0
 8005294:	4d0c      	ldr	r5, [pc, #48]	; (80052c8 <__libc_init_array+0x38>)
 8005296:	4c0d      	ldr	r4, [pc, #52]	; (80052cc <__libc_init_array+0x3c>)
 8005298:	1b64      	subs	r4, r4, r5
 800529a:	10a4      	asrs	r4, r4, #2
 800529c:	42a6      	cmp	r6, r4
 800529e:	d109      	bne.n	80052b4 <__libc_init_array+0x24>
 80052a0:	2600      	movs	r6, #0
 80052a2:	f001 f845 	bl	8006330 <_init>
 80052a6:	4d0a      	ldr	r5, [pc, #40]	; (80052d0 <__libc_init_array+0x40>)
 80052a8:	4c0a      	ldr	r4, [pc, #40]	; (80052d4 <__libc_init_array+0x44>)
 80052aa:	1b64      	subs	r4, r4, r5
 80052ac:	10a4      	asrs	r4, r4, #2
 80052ae:	42a6      	cmp	r6, r4
 80052b0:	d105      	bne.n	80052be <__libc_init_array+0x2e>
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
 80052b4:	00b3      	lsls	r3, r6, #2
 80052b6:	58eb      	ldr	r3, [r5, r3]
 80052b8:	4798      	blx	r3
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7ee      	b.n	800529c <__libc_init_array+0xc>
 80052be:	00b3      	lsls	r3, r6, #2
 80052c0:	58eb      	ldr	r3, [r5, r3]
 80052c2:	4798      	blx	r3
 80052c4:	3601      	adds	r6, #1
 80052c6:	e7f2      	b.n	80052ae <__libc_init_array+0x1e>
 80052c8:	08006644 	.word	0x08006644
 80052cc:	08006644 	.word	0x08006644
 80052d0:	08006644 	.word	0x08006644
 80052d4:	08006648 	.word	0x08006648

080052d8 <memcpy>:
 80052d8:	2300      	movs	r3, #0
 80052da:	b510      	push	{r4, lr}
 80052dc:	429a      	cmp	r2, r3
 80052de:	d100      	bne.n	80052e2 <memcpy+0xa>
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	5ccc      	ldrb	r4, [r1, r3]
 80052e4:	54c4      	strb	r4, [r0, r3]
 80052e6:	3301      	adds	r3, #1
 80052e8:	e7f8      	b.n	80052dc <memcpy+0x4>

080052ea <memset>:
 80052ea:	0003      	movs	r3, r0
 80052ec:	1882      	adds	r2, r0, r2
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d100      	bne.n	80052f4 <memset+0xa>
 80052f2:	4770      	bx	lr
 80052f4:	7019      	strb	r1, [r3, #0]
 80052f6:	3301      	adds	r3, #1
 80052f8:	e7f9      	b.n	80052ee <memset+0x4>
	...

080052fc <iprintf>:
 80052fc:	b40f      	push	{r0, r1, r2, r3}
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <iprintf+0x30>)
 8005300:	b513      	push	{r0, r1, r4, lr}
 8005302:	681c      	ldr	r4, [r3, #0]
 8005304:	2c00      	cmp	r4, #0
 8005306:	d005      	beq.n	8005314 <iprintf+0x18>
 8005308:	69a3      	ldr	r3, [r4, #24]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d102      	bne.n	8005314 <iprintf+0x18>
 800530e:	0020      	movs	r0, r4
 8005310:	f000 fa86 	bl	8005820 <__sinit>
 8005314:	ab05      	add	r3, sp, #20
 8005316:	0020      	movs	r0, r4
 8005318:	9a04      	ldr	r2, [sp, #16]
 800531a:	68a1      	ldr	r1, [r4, #8]
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	f000 fc5f 	bl	8005be0 <_vfiprintf_r>
 8005322:	bc16      	pop	{r1, r2, r4}
 8005324:	bc08      	pop	{r3}
 8005326:	b004      	add	sp, #16
 8005328:	4718      	bx	r3
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	2000003c 	.word	0x2000003c

08005330 <_puts_r>:
 8005330:	b570      	push	{r4, r5, r6, lr}
 8005332:	0005      	movs	r5, r0
 8005334:	000e      	movs	r6, r1
 8005336:	2800      	cmp	r0, #0
 8005338:	d004      	beq.n	8005344 <_puts_r+0x14>
 800533a:	6983      	ldr	r3, [r0, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <_puts_r+0x14>
 8005340:	f000 fa6e 	bl	8005820 <__sinit>
 8005344:	69ab      	ldr	r3, [r5, #24]
 8005346:	68ac      	ldr	r4, [r5, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d102      	bne.n	8005352 <_puts_r+0x22>
 800534c:	0028      	movs	r0, r5
 800534e:	f000 fa67 	bl	8005820 <__sinit>
 8005352:	4b2d      	ldr	r3, [pc, #180]	; (8005408 <_puts_r+0xd8>)
 8005354:	429c      	cmp	r4, r3
 8005356:	d122      	bne.n	800539e <_puts_r+0x6e>
 8005358:	686c      	ldr	r4, [r5, #4]
 800535a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800535c:	07db      	lsls	r3, r3, #31
 800535e:	d405      	bmi.n	800536c <_puts_r+0x3c>
 8005360:	89a3      	ldrh	r3, [r4, #12]
 8005362:	059b      	lsls	r3, r3, #22
 8005364:	d402      	bmi.n	800536c <_puts_r+0x3c>
 8005366:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005368:	f000 fafb 	bl	8005962 <__retarget_lock_acquire_recursive>
 800536c:	89a3      	ldrh	r3, [r4, #12]
 800536e:	071b      	lsls	r3, r3, #28
 8005370:	d502      	bpl.n	8005378 <_puts_r+0x48>
 8005372:	6923      	ldr	r3, [r4, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d129      	bne.n	80053cc <_puts_r+0x9c>
 8005378:	0021      	movs	r1, r4
 800537a:	0028      	movs	r0, r5
 800537c:	f000 f8aa 	bl	80054d4 <__swsetup_r>
 8005380:	2800      	cmp	r0, #0
 8005382:	d023      	beq.n	80053cc <_puts_r+0x9c>
 8005384:	2501      	movs	r5, #1
 8005386:	426d      	negs	r5, r5
 8005388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d405      	bmi.n	800539a <_puts_r+0x6a>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	059b      	lsls	r3, r3, #22
 8005392:	d402      	bmi.n	800539a <_puts_r+0x6a>
 8005394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005396:	f000 fae5 	bl	8005964 <__retarget_lock_release_recursive>
 800539a:	0028      	movs	r0, r5
 800539c:	bd70      	pop	{r4, r5, r6, pc}
 800539e:	4b1b      	ldr	r3, [pc, #108]	; (800540c <_puts_r+0xdc>)
 80053a0:	429c      	cmp	r4, r3
 80053a2:	d101      	bne.n	80053a8 <_puts_r+0x78>
 80053a4:	68ac      	ldr	r4, [r5, #8]
 80053a6:	e7d8      	b.n	800535a <_puts_r+0x2a>
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <_puts_r+0xe0>)
 80053aa:	429c      	cmp	r4, r3
 80053ac:	d1d5      	bne.n	800535a <_puts_r+0x2a>
 80053ae:	68ec      	ldr	r4, [r5, #12]
 80053b0:	e7d3      	b.n	800535a <_puts_r+0x2a>
 80053b2:	3601      	adds	r6, #1
 80053b4:	60a3      	str	r3, [r4, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da04      	bge.n	80053c4 <_puts_r+0x94>
 80053ba:	69a2      	ldr	r2, [r4, #24]
 80053bc:	429a      	cmp	r2, r3
 80053be:	dc16      	bgt.n	80053ee <_puts_r+0xbe>
 80053c0:	290a      	cmp	r1, #10
 80053c2:	d014      	beq.n	80053ee <_puts_r+0xbe>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	1c5a      	adds	r2, r3, #1
 80053c8:	6022      	str	r2, [r4, #0]
 80053ca:	7019      	strb	r1, [r3, #0]
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	7831      	ldrb	r1, [r6, #0]
 80053d0:	3b01      	subs	r3, #1
 80053d2:	2900      	cmp	r1, #0
 80053d4:	d1ed      	bne.n	80053b2 <_puts_r+0x82>
 80053d6:	60a3      	str	r3, [r4, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da0f      	bge.n	80053fc <_puts_r+0xcc>
 80053dc:	0028      	movs	r0, r5
 80053de:	0022      	movs	r2, r4
 80053e0:	310a      	adds	r1, #10
 80053e2:	f000 f821 	bl	8005428 <__swbuf_r>
 80053e6:	250a      	movs	r5, #10
 80053e8:	1c43      	adds	r3, r0, #1
 80053ea:	d1cd      	bne.n	8005388 <_puts_r+0x58>
 80053ec:	e7ca      	b.n	8005384 <_puts_r+0x54>
 80053ee:	0022      	movs	r2, r4
 80053f0:	0028      	movs	r0, r5
 80053f2:	f000 f819 	bl	8005428 <__swbuf_r>
 80053f6:	1c43      	adds	r3, r0, #1
 80053f8:	d1e8      	bne.n	80053cc <_puts_r+0x9c>
 80053fa:	e7c3      	b.n	8005384 <_puts_r+0x54>
 80053fc:	250a      	movs	r5, #10
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	6022      	str	r2, [r4, #0]
 8005404:	701d      	strb	r5, [r3, #0]
 8005406:	e7bf      	b.n	8005388 <_puts_r+0x58>
 8005408:	080065d0 	.word	0x080065d0
 800540c:	080065f0 	.word	0x080065f0
 8005410:	080065b0 	.word	0x080065b0

08005414 <puts>:
 8005414:	b510      	push	{r4, lr}
 8005416:	4b03      	ldr	r3, [pc, #12]	; (8005424 <puts+0x10>)
 8005418:	0001      	movs	r1, r0
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	f7ff ff88 	bl	8005330 <_puts_r>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	2000003c 	.word	0x2000003c

08005428 <__swbuf_r>:
 8005428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542a:	0005      	movs	r5, r0
 800542c:	000e      	movs	r6, r1
 800542e:	0014      	movs	r4, r2
 8005430:	2800      	cmp	r0, #0
 8005432:	d004      	beq.n	800543e <__swbuf_r+0x16>
 8005434:	6983      	ldr	r3, [r0, #24]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d101      	bne.n	800543e <__swbuf_r+0x16>
 800543a:	f000 f9f1 	bl	8005820 <__sinit>
 800543e:	4b22      	ldr	r3, [pc, #136]	; (80054c8 <__swbuf_r+0xa0>)
 8005440:	429c      	cmp	r4, r3
 8005442:	d12e      	bne.n	80054a2 <__swbuf_r+0x7a>
 8005444:	686c      	ldr	r4, [r5, #4]
 8005446:	69a3      	ldr	r3, [r4, #24]
 8005448:	60a3      	str	r3, [r4, #8]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	071b      	lsls	r3, r3, #28
 800544e:	d532      	bpl.n	80054b6 <__swbuf_r+0x8e>
 8005450:	6923      	ldr	r3, [r4, #16]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d02f      	beq.n	80054b6 <__swbuf_r+0x8e>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	6922      	ldr	r2, [r4, #16]
 800545a:	b2f7      	uxtb	r7, r6
 800545c:	1a98      	subs	r0, r3, r2
 800545e:	6963      	ldr	r3, [r4, #20]
 8005460:	b2f6      	uxtb	r6, r6
 8005462:	4283      	cmp	r3, r0
 8005464:	dc05      	bgt.n	8005472 <__swbuf_r+0x4a>
 8005466:	0021      	movs	r1, r4
 8005468:	0028      	movs	r0, r5
 800546a:	f000 f937 	bl	80056dc <_fflush_r>
 800546e:	2800      	cmp	r0, #0
 8005470:	d127      	bne.n	80054c2 <__swbuf_r+0x9a>
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	3001      	adds	r0, #1
 8005476:	3b01      	subs	r3, #1
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6823      	ldr	r3, [r4, #0]
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	6022      	str	r2, [r4, #0]
 8005480:	701f      	strb	r7, [r3, #0]
 8005482:	6963      	ldr	r3, [r4, #20]
 8005484:	4283      	cmp	r3, r0
 8005486:	d004      	beq.n	8005492 <__swbuf_r+0x6a>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	07db      	lsls	r3, r3, #31
 800548c:	d507      	bpl.n	800549e <__swbuf_r+0x76>
 800548e:	2e0a      	cmp	r6, #10
 8005490:	d105      	bne.n	800549e <__swbuf_r+0x76>
 8005492:	0021      	movs	r1, r4
 8005494:	0028      	movs	r0, r5
 8005496:	f000 f921 	bl	80056dc <_fflush_r>
 800549a:	2800      	cmp	r0, #0
 800549c:	d111      	bne.n	80054c2 <__swbuf_r+0x9a>
 800549e:	0030      	movs	r0, r6
 80054a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <__swbuf_r+0xa4>)
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d101      	bne.n	80054ac <__swbuf_r+0x84>
 80054a8:	68ac      	ldr	r4, [r5, #8]
 80054aa:	e7cc      	b.n	8005446 <__swbuf_r+0x1e>
 80054ac:	4b08      	ldr	r3, [pc, #32]	; (80054d0 <__swbuf_r+0xa8>)
 80054ae:	429c      	cmp	r4, r3
 80054b0:	d1c9      	bne.n	8005446 <__swbuf_r+0x1e>
 80054b2:	68ec      	ldr	r4, [r5, #12]
 80054b4:	e7c7      	b.n	8005446 <__swbuf_r+0x1e>
 80054b6:	0021      	movs	r1, r4
 80054b8:	0028      	movs	r0, r5
 80054ba:	f000 f80b 	bl	80054d4 <__swsetup_r>
 80054be:	2800      	cmp	r0, #0
 80054c0:	d0c9      	beq.n	8005456 <__swbuf_r+0x2e>
 80054c2:	2601      	movs	r6, #1
 80054c4:	4276      	negs	r6, r6
 80054c6:	e7ea      	b.n	800549e <__swbuf_r+0x76>
 80054c8:	080065d0 	.word	0x080065d0
 80054cc:	080065f0 	.word	0x080065f0
 80054d0:	080065b0 	.word	0x080065b0

080054d4 <__swsetup_r>:
 80054d4:	4b37      	ldr	r3, [pc, #220]	; (80055b4 <__swsetup_r+0xe0>)
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	681d      	ldr	r5, [r3, #0]
 80054da:	0006      	movs	r6, r0
 80054dc:	000c      	movs	r4, r1
 80054de:	2d00      	cmp	r5, #0
 80054e0:	d005      	beq.n	80054ee <__swsetup_r+0x1a>
 80054e2:	69ab      	ldr	r3, [r5, #24]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <__swsetup_r+0x1a>
 80054e8:	0028      	movs	r0, r5
 80054ea:	f000 f999 	bl	8005820 <__sinit>
 80054ee:	4b32      	ldr	r3, [pc, #200]	; (80055b8 <__swsetup_r+0xe4>)
 80054f0:	429c      	cmp	r4, r3
 80054f2:	d10f      	bne.n	8005514 <__swsetup_r+0x40>
 80054f4:	686c      	ldr	r4, [r5, #4]
 80054f6:	230c      	movs	r3, #12
 80054f8:	5ee2      	ldrsh	r2, [r4, r3]
 80054fa:	b293      	uxth	r3, r2
 80054fc:	0711      	lsls	r1, r2, #28
 80054fe:	d42d      	bmi.n	800555c <__swsetup_r+0x88>
 8005500:	06d9      	lsls	r1, r3, #27
 8005502:	d411      	bmi.n	8005528 <__swsetup_r+0x54>
 8005504:	2309      	movs	r3, #9
 8005506:	2001      	movs	r0, #1
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	3337      	adds	r3, #55	; 0x37
 800550c:	4313      	orrs	r3, r2
 800550e:	81a3      	strh	r3, [r4, #12]
 8005510:	4240      	negs	r0, r0
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	4b29      	ldr	r3, [pc, #164]	; (80055bc <__swsetup_r+0xe8>)
 8005516:	429c      	cmp	r4, r3
 8005518:	d101      	bne.n	800551e <__swsetup_r+0x4a>
 800551a:	68ac      	ldr	r4, [r5, #8]
 800551c:	e7eb      	b.n	80054f6 <__swsetup_r+0x22>
 800551e:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <__swsetup_r+0xec>)
 8005520:	429c      	cmp	r4, r3
 8005522:	d1e8      	bne.n	80054f6 <__swsetup_r+0x22>
 8005524:	68ec      	ldr	r4, [r5, #12]
 8005526:	e7e6      	b.n	80054f6 <__swsetup_r+0x22>
 8005528:	075b      	lsls	r3, r3, #29
 800552a:	d513      	bpl.n	8005554 <__swsetup_r+0x80>
 800552c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552e:	2900      	cmp	r1, #0
 8005530:	d008      	beq.n	8005544 <__swsetup_r+0x70>
 8005532:	0023      	movs	r3, r4
 8005534:	3344      	adds	r3, #68	; 0x44
 8005536:	4299      	cmp	r1, r3
 8005538:	d002      	beq.n	8005540 <__swsetup_r+0x6c>
 800553a:	0030      	movs	r0, r6
 800553c:	f000 fa80 	bl	8005a40 <_free_r>
 8005540:	2300      	movs	r3, #0
 8005542:	6363      	str	r3, [r4, #52]	; 0x34
 8005544:	2224      	movs	r2, #36	; 0x24
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	4393      	bics	r3, r2
 800554a:	81a3      	strh	r3, [r4, #12]
 800554c:	2300      	movs	r3, #0
 800554e:	6063      	str	r3, [r4, #4]
 8005550:	6923      	ldr	r3, [r4, #16]
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	2308      	movs	r3, #8
 8005556:	89a2      	ldrh	r2, [r4, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	81a3      	strh	r3, [r4, #12]
 800555c:	6923      	ldr	r3, [r4, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d10b      	bne.n	800557a <__swsetup_r+0xa6>
 8005562:	21a0      	movs	r1, #160	; 0xa0
 8005564:	2280      	movs	r2, #128	; 0x80
 8005566:	89a3      	ldrh	r3, [r4, #12]
 8005568:	0089      	lsls	r1, r1, #2
 800556a:	0092      	lsls	r2, r2, #2
 800556c:	400b      	ands	r3, r1
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <__swsetup_r+0xa6>
 8005572:	0021      	movs	r1, r4
 8005574:	0030      	movs	r0, r6
 8005576:	f000 fa1f 	bl	80059b8 <__smakebuf_r>
 800557a:	220c      	movs	r2, #12
 800557c:	5ea3      	ldrsh	r3, [r4, r2]
 800557e:	2001      	movs	r0, #1
 8005580:	001a      	movs	r2, r3
 8005582:	b299      	uxth	r1, r3
 8005584:	4002      	ands	r2, r0
 8005586:	4203      	tst	r3, r0
 8005588:	d00f      	beq.n	80055aa <__swsetup_r+0xd6>
 800558a:	2200      	movs	r2, #0
 800558c:	60a2      	str	r2, [r4, #8]
 800558e:	6962      	ldr	r2, [r4, #20]
 8005590:	4252      	negs	r2, r2
 8005592:	61a2      	str	r2, [r4, #24]
 8005594:	2000      	movs	r0, #0
 8005596:	6922      	ldr	r2, [r4, #16]
 8005598:	4282      	cmp	r2, r0
 800559a:	d1ba      	bne.n	8005512 <__swsetup_r+0x3e>
 800559c:	060a      	lsls	r2, r1, #24
 800559e:	d5b8      	bpl.n	8005512 <__swsetup_r+0x3e>
 80055a0:	2240      	movs	r2, #64	; 0x40
 80055a2:	4313      	orrs	r3, r2
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	3801      	subs	r0, #1
 80055a8:	e7b3      	b.n	8005512 <__swsetup_r+0x3e>
 80055aa:	0788      	lsls	r0, r1, #30
 80055ac:	d400      	bmi.n	80055b0 <__swsetup_r+0xdc>
 80055ae:	6962      	ldr	r2, [r4, #20]
 80055b0:	60a2      	str	r2, [r4, #8]
 80055b2:	e7ef      	b.n	8005594 <__swsetup_r+0xc0>
 80055b4:	2000003c 	.word	0x2000003c
 80055b8:	080065d0 	.word	0x080065d0
 80055bc:	080065f0 	.word	0x080065f0
 80055c0:	080065b0 	.word	0x080065b0

080055c4 <__sflush_r>:
 80055c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055c6:	898b      	ldrh	r3, [r1, #12]
 80055c8:	0005      	movs	r5, r0
 80055ca:	000c      	movs	r4, r1
 80055cc:	071a      	lsls	r2, r3, #28
 80055ce:	d45f      	bmi.n	8005690 <__sflush_r+0xcc>
 80055d0:	684a      	ldr	r2, [r1, #4]
 80055d2:	2a00      	cmp	r2, #0
 80055d4:	dc04      	bgt.n	80055e0 <__sflush_r+0x1c>
 80055d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80055d8:	2a00      	cmp	r2, #0
 80055da:	dc01      	bgt.n	80055e0 <__sflush_r+0x1c>
 80055dc:	2000      	movs	r0, #0
 80055de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80055e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80055e2:	2f00      	cmp	r7, #0
 80055e4:	d0fa      	beq.n	80055dc <__sflush_r+0x18>
 80055e6:	2200      	movs	r2, #0
 80055e8:	2180      	movs	r1, #128	; 0x80
 80055ea:	682e      	ldr	r6, [r5, #0]
 80055ec:	602a      	str	r2, [r5, #0]
 80055ee:	001a      	movs	r2, r3
 80055f0:	0149      	lsls	r1, r1, #5
 80055f2:	400a      	ands	r2, r1
 80055f4:	420b      	tst	r3, r1
 80055f6:	d034      	beq.n	8005662 <__sflush_r+0x9e>
 80055f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	075b      	lsls	r3, r3, #29
 80055fe:	d506      	bpl.n	800560e <__sflush_r+0x4a>
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	1ac0      	subs	r0, r0, r3
 8005604:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <__sflush_r+0x4a>
 800560a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800560c:	1ac0      	subs	r0, r0, r3
 800560e:	0002      	movs	r2, r0
 8005610:	6a21      	ldr	r1, [r4, #32]
 8005612:	2300      	movs	r3, #0
 8005614:	0028      	movs	r0, r5
 8005616:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005618:	47b8      	blx	r7
 800561a:	89a1      	ldrh	r1, [r4, #12]
 800561c:	1c43      	adds	r3, r0, #1
 800561e:	d106      	bne.n	800562e <__sflush_r+0x6a>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	2b1d      	cmp	r3, #29
 8005624:	d831      	bhi.n	800568a <__sflush_r+0xc6>
 8005626:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <__sflush_r+0x114>)
 8005628:	40da      	lsrs	r2, r3
 800562a:	07d3      	lsls	r3, r2, #31
 800562c:	d52d      	bpl.n	800568a <__sflush_r+0xc6>
 800562e:	2300      	movs	r3, #0
 8005630:	6063      	str	r3, [r4, #4]
 8005632:	6923      	ldr	r3, [r4, #16]
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	04cb      	lsls	r3, r1, #19
 8005638:	d505      	bpl.n	8005646 <__sflush_r+0x82>
 800563a:	1c43      	adds	r3, r0, #1
 800563c:	d102      	bne.n	8005644 <__sflush_r+0x80>
 800563e:	682b      	ldr	r3, [r5, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d100      	bne.n	8005646 <__sflush_r+0x82>
 8005644:	6560      	str	r0, [r4, #84]	; 0x54
 8005646:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005648:	602e      	str	r6, [r5, #0]
 800564a:	2900      	cmp	r1, #0
 800564c:	d0c6      	beq.n	80055dc <__sflush_r+0x18>
 800564e:	0023      	movs	r3, r4
 8005650:	3344      	adds	r3, #68	; 0x44
 8005652:	4299      	cmp	r1, r3
 8005654:	d002      	beq.n	800565c <__sflush_r+0x98>
 8005656:	0028      	movs	r0, r5
 8005658:	f000 f9f2 	bl	8005a40 <_free_r>
 800565c:	2000      	movs	r0, #0
 800565e:	6360      	str	r0, [r4, #52]	; 0x34
 8005660:	e7bd      	b.n	80055de <__sflush_r+0x1a>
 8005662:	2301      	movs	r3, #1
 8005664:	0028      	movs	r0, r5
 8005666:	6a21      	ldr	r1, [r4, #32]
 8005668:	47b8      	blx	r7
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d1c5      	bne.n	80055fa <__sflush_r+0x36>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0c2      	beq.n	80055fa <__sflush_r+0x36>
 8005674:	2b1d      	cmp	r3, #29
 8005676:	d001      	beq.n	800567c <__sflush_r+0xb8>
 8005678:	2b16      	cmp	r3, #22
 800567a:	d101      	bne.n	8005680 <__sflush_r+0xbc>
 800567c:	602e      	str	r6, [r5, #0]
 800567e:	e7ad      	b.n	80055dc <__sflush_r+0x18>
 8005680:	2340      	movs	r3, #64	; 0x40
 8005682:	89a2      	ldrh	r2, [r4, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	81a3      	strh	r3, [r4, #12]
 8005688:	e7a9      	b.n	80055de <__sflush_r+0x1a>
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	430b      	orrs	r3, r1
 800568e:	e7fa      	b.n	8005686 <__sflush_r+0xc2>
 8005690:	690f      	ldr	r7, [r1, #16]
 8005692:	2f00      	cmp	r7, #0
 8005694:	d0a2      	beq.n	80055dc <__sflush_r+0x18>
 8005696:	680a      	ldr	r2, [r1, #0]
 8005698:	600f      	str	r7, [r1, #0]
 800569a:	1bd2      	subs	r2, r2, r7
 800569c:	9201      	str	r2, [sp, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	079b      	lsls	r3, r3, #30
 80056a2:	d100      	bne.n	80056a6 <__sflush_r+0xe2>
 80056a4:	694a      	ldr	r2, [r1, #20]
 80056a6:	60a2      	str	r2, [r4, #8]
 80056a8:	9b01      	ldr	r3, [sp, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dc00      	bgt.n	80056b0 <__sflush_r+0xec>
 80056ae:	e795      	b.n	80055dc <__sflush_r+0x18>
 80056b0:	003a      	movs	r2, r7
 80056b2:	0028      	movs	r0, r5
 80056b4:	9b01      	ldr	r3, [sp, #4]
 80056b6:	6a21      	ldr	r1, [r4, #32]
 80056b8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056ba:	47b0      	blx	r6
 80056bc:	2800      	cmp	r0, #0
 80056be:	dc06      	bgt.n	80056ce <__sflush_r+0x10a>
 80056c0:	2340      	movs	r3, #64	; 0x40
 80056c2:	2001      	movs	r0, #1
 80056c4:	89a2      	ldrh	r2, [r4, #12]
 80056c6:	4240      	negs	r0, r0
 80056c8:	4313      	orrs	r3, r2
 80056ca:	81a3      	strh	r3, [r4, #12]
 80056cc:	e787      	b.n	80055de <__sflush_r+0x1a>
 80056ce:	9b01      	ldr	r3, [sp, #4]
 80056d0:	183f      	adds	r7, r7, r0
 80056d2:	1a1b      	subs	r3, r3, r0
 80056d4:	9301      	str	r3, [sp, #4]
 80056d6:	e7e7      	b.n	80056a8 <__sflush_r+0xe4>
 80056d8:	20400001 	.word	0x20400001

080056dc <_fflush_r>:
 80056dc:	690b      	ldr	r3, [r1, #16]
 80056de:	b570      	push	{r4, r5, r6, lr}
 80056e0:	0005      	movs	r5, r0
 80056e2:	000c      	movs	r4, r1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d102      	bne.n	80056ee <_fflush_r+0x12>
 80056e8:	2500      	movs	r5, #0
 80056ea:	0028      	movs	r0, r5
 80056ec:	bd70      	pop	{r4, r5, r6, pc}
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d004      	beq.n	80056fc <_fflush_r+0x20>
 80056f2:	6983      	ldr	r3, [r0, #24]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <_fflush_r+0x20>
 80056f8:	f000 f892 	bl	8005820 <__sinit>
 80056fc:	4b14      	ldr	r3, [pc, #80]	; (8005750 <_fflush_r+0x74>)
 80056fe:	429c      	cmp	r4, r3
 8005700:	d11b      	bne.n	800573a <_fflush_r+0x5e>
 8005702:	686c      	ldr	r4, [r5, #4]
 8005704:	220c      	movs	r2, #12
 8005706:	5ea3      	ldrsh	r3, [r4, r2]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0ed      	beq.n	80056e8 <_fflush_r+0xc>
 800570c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800570e:	07d2      	lsls	r2, r2, #31
 8005710:	d404      	bmi.n	800571c <_fflush_r+0x40>
 8005712:	059b      	lsls	r3, r3, #22
 8005714:	d402      	bmi.n	800571c <_fflush_r+0x40>
 8005716:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005718:	f000 f923 	bl	8005962 <__retarget_lock_acquire_recursive>
 800571c:	0028      	movs	r0, r5
 800571e:	0021      	movs	r1, r4
 8005720:	f7ff ff50 	bl	80055c4 <__sflush_r>
 8005724:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005726:	0005      	movs	r5, r0
 8005728:	07db      	lsls	r3, r3, #31
 800572a:	d4de      	bmi.n	80056ea <_fflush_r+0xe>
 800572c:	89a3      	ldrh	r3, [r4, #12]
 800572e:	059b      	lsls	r3, r3, #22
 8005730:	d4db      	bmi.n	80056ea <_fflush_r+0xe>
 8005732:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005734:	f000 f916 	bl	8005964 <__retarget_lock_release_recursive>
 8005738:	e7d7      	b.n	80056ea <_fflush_r+0xe>
 800573a:	4b06      	ldr	r3, [pc, #24]	; (8005754 <_fflush_r+0x78>)
 800573c:	429c      	cmp	r4, r3
 800573e:	d101      	bne.n	8005744 <_fflush_r+0x68>
 8005740:	68ac      	ldr	r4, [r5, #8]
 8005742:	e7df      	b.n	8005704 <_fflush_r+0x28>
 8005744:	4b04      	ldr	r3, [pc, #16]	; (8005758 <_fflush_r+0x7c>)
 8005746:	429c      	cmp	r4, r3
 8005748:	d1dc      	bne.n	8005704 <_fflush_r+0x28>
 800574a:	68ec      	ldr	r4, [r5, #12]
 800574c:	e7da      	b.n	8005704 <_fflush_r+0x28>
 800574e:	46c0      	nop			; (mov r8, r8)
 8005750:	080065d0 	.word	0x080065d0
 8005754:	080065f0 	.word	0x080065f0
 8005758:	080065b0 	.word	0x080065b0

0800575c <std>:
 800575c:	2300      	movs	r3, #0
 800575e:	b510      	push	{r4, lr}
 8005760:	0004      	movs	r4, r0
 8005762:	6003      	str	r3, [r0, #0]
 8005764:	6043      	str	r3, [r0, #4]
 8005766:	6083      	str	r3, [r0, #8]
 8005768:	8181      	strh	r1, [r0, #12]
 800576a:	6643      	str	r3, [r0, #100]	; 0x64
 800576c:	0019      	movs	r1, r3
 800576e:	81c2      	strh	r2, [r0, #14]
 8005770:	6103      	str	r3, [r0, #16]
 8005772:	6143      	str	r3, [r0, #20]
 8005774:	6183      	str	r3, [r0, #24]
 8005776:	2208      	movs	r2, #8
 8005778:	305c      	adds	r0, #92	; 0x5c
 800577a:	f7ff fdb6 	bl	80052ea <memset>
 800577e:	4b05      	ldr	r3, [pc, #20]	; (8005794 <std+0x38>)
 8005780:	6263      	str	r3, [r4, #36]	; 0x24
 8005782:	4b05      	ldr	r3, [pc, #20]	; (8005798 <std+0x3c>)
 8005784:	6224      	str	r4, [r4, #32]
 8005786:	62a3      	str	r3, [r4, #40]	; 0x28
 8005788:	4b04      	ldr	r3, [pc, #16]	; (800579c <std+0x40>)
 800578a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800578c:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <std+0x44>)
 800578e:	6323      	str	r3, [r4, #48]	; 0x30
 8005790:	bd10      	pop	{r4, pc}
 8005792:	46c0      	nop			; (mov r8, r8)
 8005794:	0800617d 	.word	0x0800617d
 8005798:	080061a5 	.word	0x080061a5
 800579c:	080061dd 	.word	0x080061dd
 80057a0:	08006209 	.word	0x08006209

080057a4 <_cleanup_r>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	4902      	ldr	r1, [pc, #8]	; (80057b0 <_cleanup_r+0xc>)
 80057a8:	f000 f8ba 	bl	8005920 <_fwalk_reent>
 80057ac:	bd10      	pop	{r4, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	080056dd 	.word	0x080056dd

080057b4 <__sfmoreglue>:
 80057b4:	b570      	push	{r4, r5, r6, lr}
 80057b6:	2568      	movs	r5, #104	; 0x68
 80057b8:	1e4a      	subs	r2, r1, #1
 80057ba:	4355      	muls	r5, r2
 80057bc:	000e      	movs	r6, r1
 80057be:	0029      	movs	r1, r5
 80057c0:	3174      	adds	r1, #116	; 0x74
 80057c2:	f000 f987 	bl	8005ad4 <_malloc_r>
 80057c6:	1e04      	subs	r4, r0, #0
 80057c8:	d008      	beq.n	80057dc <__sfmoreglue+0x28>
 80057ca:	2100      	movs	r1, #0
 80057cc:	002a      	movs	r2, r5
 80057ce:	6001      	str	r1, [r0, #0]
 80057d0:	6046      	str	r6, [r0, #4]
 80057d2:	300c      	adds	r0, #12
 80057d4:	60a0      	str	r0, [r4, #8]
 80057d6:	3268      	adds	r2, #104	; 0x68
 80057d8:	f7ff fd87 	bl	80052ea <memset>
 80057dc:	0020      	movs	r0, r4
 80057de:	bd70      	pop	{r4, r5, r6, pc}

080057e0 <__sfp_lock_acquire>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	4802      	ldr	r0, [pc, #8]	; (80057ec <__sfp_lock_acquire+0xc>)
 80057e4:	f000 f8bd 	bl	8005962 <__retarget_lock_acquire_recursive>
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	200001b0 	.word	0x200001b0

080057f0 <__sfp_lock_release>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4802      	ldr	r0, [pc, #8]	; (80057fc <__sfp_lock_release+0xc>)
 80057f4:	f000 f8b6 	bl	8005964 <__retarget_lock_release_recursive>
 80057f8:	bd10      	pop	{r4, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	200001b0 	.word	0x200001b0

08005800 <__sinit_lock_acquire>:
 8005800:	b510      	push	{r4, lr}
 8005802:	4802      	ldr	r0, [pc, #8]	; (800580c <__sinit_lock_acquire+0xc>)
 8005804:	f000 f8ad 	bl	8005962 <__retarget_lock_acquire_recursive>
 8005808:	bd10      	pop	{r4, pc}
 800580a:	46c0      	nop			; (mov r8, r8)
 800580c:	200001ab 	.word	0x200001ab

08005810 <__sinit_lock_release>:
 8005810:	b510      	push	{r4, lr}
 8005812:	4802      	ldr	r0, [pc, #8]	; (800581c <__sinit_lock_release+0xc>)
 8005814:	f000 f8a6 	bl	8005964 <__retarget_lock_release_recursive>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	46c0      	nop			; (mov r8, r8)
 800581c:	200001ab 	.word	0x200001ab

08005820 <__sinit>:
 8005820:	b513      	push	{r0, r1, r4, lr}
 8005822:	0004      	movs	r4, r0
 8005824:	f7ff ffec 	bl	8005800 <__sinit_lock_acquire>
 8005828:	69a3      	ldr	r3, [r4, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d002      	beq.n	8005834 <__sinit+0x14>
 800582e:	f7ff ffef 	bl	8005810 <__sinit_lock_release>
 8005832:	bd13      	pop	{r0, r1, r4, pc}
 8005834:	64a3      	str	r3, [r4, #72]	; 0x48
 8005836:	64e3      	str	r3, [r4, #76]	; 0x4c
 8005838:	6523      	str	r3, [r4, #80]	; 0x50
 800583a:	4b13      	ldr	r3, [pc, #76]	; (8005888 <__sinit+0x68>)
 800583c:	4a13      	ldr	r2, [pc, #76]	; (800588c <__sinit+0x6c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	62a2      	str	r2, [r4, #40]	; 0x28
 8005842:	9301      	str	r3, [sp, #4]
 8005844:	42a3      	cmp	r3, r4
 8005846:	d101      	bne.n	800584c <__sinit+0x2c>
 8005848:	2301      	movs	r3, #1
 800584a:	61a3      	str	r3, [r4, #24]
 800584c:	0020      	movs	r0, r4
 800584e:	f000 f81f 	bl	8005890 <__sfp>
 8005852:	6060      	str	r0, [r4, #4]
 8005854:	0020      	movs	r0, r4
 8005856:	f000 f81b 	bl	8005890 <__sfp>
 800585a:	60a0      	str	r0, [r4, #8]
 800585c:	0020      	movs	r0, r4
 800585e:	f000 f817 	bl	8005890 <__sfp>
 8005862:	2200      	movs	r2, #0
 8005864:	2104      	movs	r1, #4
 8005866:	60e0      	str	r0, [r4, #12]
 8005868:	6860      	ldr	r0, [r4, #4]
 800586a:	f7ff ff77 	bl	800575c <std>
 800586e:	2201      	movs	r2, #1
 8005870:	2109      	movs	r1, #9
 8005872:	68a0      	ldr	r0, [r4, #8]
 8005874:	f7ff ff72 	bl	800575c <std>
 8005878:	2202      	movs	r2, #2
 800587a:	2112      	movs	r1, #18
 800587c:	68e0      	ldr	r0, [r4, #12]
 800587e:	f7ff ff6d 	bl	800575c <std>
 8005882:	2301      	movs	r3, #1
 8005884:	61a3      	str	r3, [r4, #24]
 8005886:	e7d2      	b.n	800582e <__sinit+0xe>
 8005888:	080065ac 	.word	0x080065ac
 800588c:	080057a5 	.word	0x080057a5

08005890 <__sfp>:
 8005890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005892:	0007      	movs	r7, r0
 8005894:	f7ff ffa4 	bl	80057e0 <__sfp_lock_acquire>
 8005898:	4b1f      	ldr	r3, [pc, #124]	; (8005918 <__sfp+0x88>)
 800589a:	681e      	ldr	r6, [r3, #0]
 800589c:	69b3      	ldr	r3, [r6, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d102      	bne.n	80058a8 <__sfp+0x18>
 80058a2:	0030      	movs	r0, r6
 80058a4:	f7ff ffbc 	bl	8005820 <__sinit>
 80058a8:	3648      	adds	r6, #72	; 0x48
 80058aa:	68b4      	ldr	r4, [r6, #8]
 80058ac:	6873      	ldr	r3, [r6, #4]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	d504      	bpl.n	80058bc <__sfp+0x2c>
 80058b2:	6833      	ldr	r3, [r6, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d022      	beq.n	80058fe <__sfp+0x6e>
 80058b8:	6836      	ldr	r6, [r6, #0]
 80058ba:	e7f6      	b.n	80058aa <__sfp+0x1a>
 80058bc:	220c      	movs	r2, #12
 80058be:	5ea5      	ldrsh	r5, [r4, r2]
 80058c0:	2d00      	cmp	r5, #0
 80058c2:	d11a      	bne.n	80058fa <__sfp+0x6a>
 80058c4:	0020      	movs	r0, r4
 80058c6:	4b15      	ldr	r3, [pc, #84]	; (800591c <__sfp+0x8c>)
 80058c8:	3058      	adds	r0, #88	; 0x58
 80058ca:	60e3      	str	r3, [r4, #12]
 80058cc:	6665      	str	r5, [r4, #100]	; 0x64
 80058ce:	f000 f847 	bl	8005960 <__retarget_lock_init_recursive>
 80058d2:	f7ff ff8d 	bl	80057f0 <__sfp_lock_release>
 80058d6:	0020      	movs	r0, r4
 80058d8:	2208      	movs	r2, #8
 80058da:	0029      	movs	r1, r5
 80058dc:	6025      	str	r5, [r4, #0]
 80058de:	60a5      	str	r5, [r4, #8]
 80058e0:	6065      	str	r5, [r4, #4]
 80058e2:	6125      	str	r5, [r4, #16]
 80058e4:	6165      	str	r5, [r4, #20]
 80058e6:	61a5      	str	r5, [r4, #24]
 80058e8:	305c      	adds	r0, #92	; 0x5c
 80058ea:	f7ff fcfe 	bl	80052ea <memset>
 80058ee:	6365      	str	r5, [r4, #52]	; 0x34
 80058f0:	63a5      	str	r5, [r4, #56]	; 0x38
 80058f2:	64a5      	str	r5, [r4, #72]	; 0x48
 80058f4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80058f6:	0020      	movs	r0, r4
 80058f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058fa:	3468      	adds	r4, #104	; 0x68
 80058fc:	e7d7      	b.n	80058ae <__sfp+0x1e>
 80058fe:	2104      	movs	r1, #4
 8005900:	0038      	movs	r0, r7
 8005902:	f7ff ff57 	bl	80057b4 <__sfmoreglue>
 8005906:	1e04      	subs	r4, r0, #0
 8005908:	6030      	str	r0, [r6, #0]
 800590a:	d1d5      	bne.n	80058b8 <__sfp+0x28>
 800590c:	f7ff ff70 	bl	80057f0 <__sfp_lock_release>
 8005910:	230c      	movs	r3, #12
 8005912:	603b      	str	r3, [r7, #0]
 8005914:	e7ef      	b.n	80058f6 <__sfp+0x66>
 8005916:	46c0      	nop			; (mov r8, r8)
 8005918:	080065ac 	.word	0x080065ac
 800591c:	ffff0001 	.word	0xffff0001

08005920 <_fwalk_reent>:
 8005920:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005922:	0004      	movs	r4, r0
 8005924:	0006      	movs	r6, r0
 8005926:	2700      	movs	r7, #0
 8005928:	9101      	str	r1, [sp, #4]
 800592a:	3448      	adds	r4, #72	; 0x48
 800592c:	6863      	ldr	r3, [r4, #4]
 800592e:	68a5      	ldr	r5, [r4, #8]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	9b00      	ldr	r3, [sp, #0]
 8005934:	3b01      	subs	r3, #1
 8005936:	9300      	str	r3, [sp, #0]
 8005938:	d504      	bpl.n	8005944 <_fwalk_reent+0x24>
 800593a:	6824      	ldr	r4, [r4, #0]
 800593c:	2c00      	cmp	r4, #0
 800593e:	d1f5      	bne.n	800592c <_fwalk_reent+0xc>
 8005940:	0038      	movs	r0, r7
 8005942:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005944:	89ab      	ldrh	r3, [r5, #12]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d908      	bls.n	800595c <_fwalk_reent+0x3c>
 800594a:	220e      	movs	r2, #14
 800594c:	5eab      	ldrsh	r3, [r5, r2]
 800594e:	3301      	adds	r3, #1
 8005950:	d004      	beq.n	800595c <_fwalk_reent+0x3c>
 8005952:	0029      	movs	r1, r5
 8005954:	0030      	movs	r0, r6
 8005956:	9b01      	ldr	r3, [sp, #4]
 8005958:	4798      	blx	r3
 800595a:	4307      	orrs	r7, r0
 800595c:	3568      	adds	r5, #104	; 0x68
 800595e:	e7e8      	b.n	8005932 <_fwalk_reent+0x12>

08005960 <__retarget_lock_init_recursive>:
 8005960:	4770      	bx	lr

08005962 <__retarget_lock_acquire_recursive>:
 8005962:	4770      	bx	lr

08005964 <__retarget_lock_release_recursive>:
 8005964:	4770      	bx	lr
	...

08005968 <__swhatbuf_r>:
 8005968:	b570      	push	{r4, r5, r6, lr}
 800596a:	000e      	movs	r6, r1
 800596c:	001d      	movs	r5, r3
 800596e:	230e      	movs	r3, #14
 8005970:	5ec9      	ldrsh	r1, [r1, r3]
 8005972:	0014      	movs	r4, r2
 8005974:	b096      	sub	sp, #88	; 0x58
 8005976:	2900      	cmp	r1, #0
 8005978:	da07      	bge.n	800598a <__swhatbuf_r+0x22>
 800597a:	2300      	movs	r3, #0
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	89b3      	ldrh	r3, [r6, #12]
 8005980:	061b      	lsls	r3, r3, #24
 8005982:	d411      	bmi.n	80059a8 <__swhatbuf_r+0x40>
 8005984:	2380      	movs	r3, #128	; 0x80
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	e00f      	b.n	80059aa <__swhatbuf_r+0x42>
 800598a:	466a      	mov	r2, sp
 800598c:	f000 fc68 	bl	8006260 <_fstat_r>
 8005990:	2800      	cmp	r0, #0
 8005992:	dbf2      	blt.n	800597a <__swhatbuf_r+0x12>
 8005994:	23f0      	movs	r3, #240	; 0xf0
 8005996:	9901      	ldr	r1, [sp, #4]
 8005998:	021b      	lsls	r3, r3, #8
 800599a:	4019      	ands	r1, r3
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <__swhatbuf_r+0x4c>)
 800599e:	18c9      	adds	r1, r1, r3
 80059a0:	424b      	negs	r3, r1
 80059a2:	4159      	adcs	r1, r3
 80059a4:	6029      	str	r1, [r5, #0]
 80059a6:	e7ed      	b.n	8005984 <__swhatbuf_r+0x1c>
 80059a8:	2340      	movs	r3, #64	; 0x40
 80059aa:	2000      	movs	r0, #0
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	b016      	add	sp, #88	; 0x58
 80059b0:	bd70      	pop	{r4, r5, r6, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	ffffe000 	.word	0xffffe000

080059b8 <__smakebuf_r>:
 80059b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ba:	2602      	movs	r6, #2
 80059bc:	898b      	ldrh	r3, [r1, #12]
 80059be:	0005      	movs	r5, r0
 80059c0:	000c      	movs	r4, r1
 80059c2:	4233      	tst	r3, r6
 80059c4:	d006      	beq.n	80059d4 <__smakebuf_r+0x1c>
 80059c6:	0023      	movs	r3, r4
 80059c8:	3347      	adds	r3, #71	; 0x47
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2301      	movs	r3, #1
 80059d0:	6163      	str	r3, [r4, #20]
 80059d2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80059d4:	466a      	mov	r2, sp
 80059d6:	ab01      	add	r3, sp, #4
 80059d8:	f7ff ffc6 	bl	8005968 <__swhatbuf_r>
 80059dc:	9900      	ldr	r1, [sp, #0]
 80059de:	0007      	movs	r7, r0
 80059e0:	0028      	movs	r0, r5
 80059e2:	f000 f877 	bl	8005ad4 <_malloc_r>
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d108      	bne.n	80059fc <__smakebuf_r+0x44>
 80059ea:	220c      	movs	r2, #12
 80059ec:	5ea3      	ldrsh	r3, [r4, r2]
 80059ee:	059a      	lsls	r2, r3, #22
 80059f0:	d4ef      	bmi.n	80059d2 <__smakebuf_r+0x1a>
 80059f2:	2203      	movs	r2, #3
 80059f4:	4393      	bics	r3, r2
 80059f6:	431e      	orrs	r6, r3
 80059f8:	81a6      	strh	r6, [r4, #12]
 80059fa:	e7e4      	b.n	80059c6 <__smakebuf_r+0xe>
 80059fc:	4b0f      	ldr	r3, [pc, #60]	; (8005a3c <__smakebuf_r+0x84>)
 80059fe:	62ab      	str	r3, [r5, #40]	; 0x28
 8005a00:	2380      	movs	r3, #128	; 0x80
 8005a02:	89a2      	ldrh	r2, [r4, #12]
 8005a04:	6020      	str	r0, [r4, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	81a3      	strh	r3, [r4, #12]
 8005a0a:	9b00      	ldr	r3, [sp, #0]
 8005a0c:	6120      	str	r0, [r4, #16]
 8005a0e:	6163      	str	r3, [r4, #20]
 8005a10:	9b01      	ldr	r3, [sp, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <__smakebuf_r+0x7a>
 8005a16:	0028      	movs	r0, r5
 8005a18:	230e      	movs	r3, #14
 8005a1a:	5ee1      	ldrsh	r1, [r4, r3]
 8005a1c:	f000 fc32 	bl	8006284 <_isatty_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d006      	beq.n	8005a32 <__smakebuf_r+0x7a>
 8005a24:	2203      	movs	r2, #3
 8005a26:	89a3      	ldrh	r3, [r4, #12]
 8005a28:	4393      	bics	r3, r2
 8005a2a:	001a      	movs	r2, r3
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	81a3      	strh	r3, [r4, #12]
 8005a32:	89a0      	ldrh	r0, [r4, #12]
 8005a34:	4307      	orrs	r7, r0
 8005a36:	81a7      	strh	r7, [r4, #12]
 8005a38:	e7cb      	b.n	80059d2 <__smakebuf_r+0x1a>
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	080057a5 	.word	0x080057a5

08005a40 <_free_r>:
 8005a40:	b570      	push	{r4, r5, r6, lr}
 8005a42:	0005      	movs	r5, r0
 8005a44:	2900      	cmp	r1, #0
 8005a46:	d010      	beq.n	8005a6a <_free_r+0x2a>
 8005a48:	1f0c      	subs	r4, r1, #4
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	da00      	bge.n	8005a52 <_free_r+0x12>
 8005a50:	18e4      	adds	r4, r4, r3
 8005a52:	0028      	movs	r0, r5
 8005a54:	f000 fc48 	bl	80062e8 <__malloc_lock>
 8005a58:	4a1d      	ldr	r2, [pc, #116]	; (8005ad0 <_free_r+0x90>)
 8005a5a:	6813      	ldr	r3, [r2, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d105      	bne.n	8005a6c <_free_r+0x2c>
 8005a60:	6063      	str	r3, [r4, #4]
 8005a62:	6014      	str	r4, [r2, #0]
 8005a64:	0028      	movs	r0, r5
 8005a66:	f000 fc47 	bl	80062f8 <__malloc_unlock>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d908      	bls.n	8005a82 <_free_r+0x42>
 8005a70:	6821      	ldr	r1, [r4, #0]
 8005a72:	1860      	adds	r0, r4, r1
 8005a74:	4283      	cmp	r3, r0
 8005a76:	d1f3      	bne.n	8005a60 <_free_r+0x20>
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	1841      	adds	r1, r0, r1
 8005a7e:	6021      	str	r1, [r4, #0]
 8005a80:	e7ee      	b.n	8005a60 <_free_r+0x20>
 8005a82:	001a      	movs	r2, r3
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d001      	beq.n	8005a8e <_free_r+0x4e>
 8005a8a:	42a3      	cmp	r3, r4
 8005a8c:	d9f9      	bls.n	8005a82 <_free_r+0x42>
 8005a8e:	6811      	ldr	r1, [r2, #0]
 8005a90:	1850      	adds	r0, r2, r1
 8005a92:	42a0      	cmp	r0, r4
 8005a94:	d10b      	bne.n	8005aae <_free_r+0x6e>
 8005a96:	6820      	ldr	r0, [r4, #0]
 8005a98:	1809      	adds	r1, r1, r0
 8005a9a:	1850      	adds	r0, r2, r1
 8005a9c:	6011      	str	r1, [r2, #0]
 8005a9e:	4283      	cmp	r3, r0
 8005aa0:	d1e0      	bne.n	8005a64 <_free_r+0x24>
 8005aa2:	6818      	ldr	r0, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	1841      	adds	r1, r0, r1
 8005aa8:	6011      	str	r1, [r2, #0]
 8005aaa:	6053      	str	r3, [r2, #4]
 8005aac:	e7da      	b.n	8005a64 <_free_r+0x24>
 8005aae:	42a0      	cmp	r0, r4
 8005ab0:	d902      	bls.n	8005ab8 <_free_r+0x78>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	602b      	str	r3, [r5, #0]
 8005ab6:	e7d5      	b.n	8005a64 <_free_r+0x24>
 8005ab8:	6821      	ldr	r1, [r4, #0]
 8005aba:	1860      	adds	r0, r4, r1
 8005abc:	4283      	cmp	r3, r0
 8005abe:	d103      	bne.n	8005ac8 <_free_r+0x88>
 8005ac0:	6818      	ldr	r0, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	1841      	adds	r1, r0, r1
 8005ac6:	6021      	str	r1, [r4, #0]
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6054      	str	r4, [r2, #4]
 8005acc:	e7ca      	b.n	8005a64 <_free_r+0x24>
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	200000e8 	.word	0x200000e8

08005ad4 <_malloc_r>:
 8005ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	1ccd      	adds	r5, r1, #3
 8005ada:	439d      	bics	r5, r3
 8005adc:	3508      	adds	r5, #8
 8005ade:	0006      	movs	r6, r0
 8005ae0:	2d0c      	cmp	r5, #12
 8005ae2:	d21f      	bcs.n	8005b24 <_malloc_r+0x50>
 8005ae4:	250c      	movs	r5, #12
 8005ae6:	42a9      	cmp	r1, r5
 8005ae8:	d81e      	bhi.n	8005b28 <_malloc_r+0x54>
 8005aea:	0030      	movs	r0, r6
 8005aec:	f000 fbfc 	bl	80062e8 <__malloc_lock>
 8005af0:	4925      	ldr	r1, [pc, #148]	; (8005b88 <_malloc_r+0xb4>)
 8005af2:	680a      	ldr	r2, [r1, #0]
 8005af4:	0014      	movs	r4, r2
 8005af6:	2c00      	cmp	r4, #0
 8005af8:	d11a      	bne.n	8005b30 <_malloc_r+0x5c>
 8005afa:	4f24      	ldr	r7, [pc, #144]	; (8005b8c <_malloc_r+0xb8>)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d104      	bne.n	8005b0c <_malloc_r+0x38>
 8005b02:	0021      	movs	r1, r4
 8005b04:	0030      	movs	r0, r6
 8005b06:	f000 fb27 	bl	8006158 <_sbrk_r>
 8005b0a:	6038      	str	r0, [r7, #0]
 8005b0c:	0029      	movs	r1, r5
 8005b0e:	0030      	movs	r0, r6
 8005b10:	f000 fb22 	bl	8006158 <_sbrk_r>
 8005b14:	1c43      	adds	r3, r0, #1
 8005b16:	d12b      	bne.n	8005b70 <_malloc_r+0x9c>
 8005b18:	230c      	movs	r3, #12
 8005b1a:	0030      	movs	r0, r6
 8005b1c:	6033      	str	r3, [r6, #0]
 8005b1e:	f000 fbeb 	bl	80062f8 <__malloc_unlock>
 8005b22:	e003      	b.n	8005b2c <_malloc_r+0x58>
 8005b24:	2d00      	cmp	r5, #0
 8005b26:	dade      	bge.n	8005ae6 <_malloc_r+0x12>
 8005b28:	230c      	movs	r3, #12
 8005b2a:	6033      	str	r3, [r6, #0]
 8005b2c:	2000      	movs	r0, #0
 8005b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b30:	6823      	ldr	r3, [r4, #0]
 8005b32:	1b5b      	subs	r3, r3, r5
 8005b34:	d419      	bmi.n	8005b6a <_malloc_r+0x96>
 8005b36:	2b0b      	cmp	r3, #11
 8005b38:	d903      	bls.n	8005b42 <_malloc_r+0x6e>
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	18e4      	adds	r4, r4, r3
 8005b3e:	6025      	str	r5, [r4, #0]
 8005b40:	e003      	b.n	8005b4a <_malloc_r+0x76>
 8005b42:	6863      	ldr	r3, [r4, #4]
 8005b44:	42a2      	cmp	r2, r4
 8005b46:	d10e      	bne.n	8005b66 <_malloc_r+0x92>
 8005b48:	600b      	str	r3, [r1, #0]
 8005b4a:	0030      	movs	r0, r6
 8005b4c:	f000 fbd4 	bl	80062f8 <__malloc_unlock>
 8005b50:	0020      	movs	r0, r4
 8005b52:	2207      	movs	r2, #7
 8005b54:	300b      	adds	r0, #11
 8005b56:	1d23      	adds	r3, r4, #4
 8005b58:	4390      	bics	r0, r2
 8005b5a:	1ac2      	subs	r2, r0, r3
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	d0e6      	beq.n	8005b2e <_malloc_r+0x5a>
 8005b60:	1a1b      	subs	r3, r3, r0
 8005b62:	50a3      	str	r3, [r4, r2]
 8005b64:	e7e3      	b.n	8005b2e <_malloc_r+0x5a>
 8005b66:	6053      	str	r3, [r2, #4]
 8005b68:	e7ef      	b.n	8005b4a <_malloc_r+0x76>
 8005b6a:	0022      	movs	r2, r4
 8005b6c:	6864      	ldr	r4, [r4, #4]
 8005b6e:	e7c2      	b.n	8005af6 <_malloc_r+0x22>
 8005b70:	2303      	movs	r3, #3
 8005b72:	1cc4      	adds	r4, r0, #3
 8005b74:	439c      	bics	r4, r3
 8005b76:	42a0      	cmp	r0, r4
 8005b78:	d0e1      	beq.n	8005b3e <_malloc_r+0x6a>
 8005b7a:	1a21      	subs	r1, r4, r0
 8005b7c:	0030      	movs	r0, r6
 8005b7e:	f000 faeb 	bl	8006158 <_sbrk_r>
 8005b82:	1c43      	adds	r3, r0, #1
 8005b84:	d1db      	bne.n	8005b3e <_malloc_r+0x6a>
 8005b86:	e7c7      	b.n	8005b18 <_malloc_r+0x44>
 8005b88:	200000e8 	.word	0x200000e8
 8005b8c:	200000ec 	.word	0x200000ec

08005b90 <__sfputc_r>:
 8005b90:	6893      	ldr	r3, [r2, #8]
 8005b92:	b510      	push	{r4, lr}
 8005b94:	3b01      	subs	r3, #1
 8005b96:	6093      	str	r3, [r2, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	da04      	bge.n	8005ba6 <__sfputc_r+0x16>
 8005b9c:	6994      	ldr	r4, [r2, #24]
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	db07      	blt.n	8005bb2 <__sfputc_r+0x22>
 8005ba2:	290a      	cmp	r1, #10
 8005ba4:	d005      	beq.n	8005bb2 <__sfputc_r+0x22>
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	1c58      	adds	r0, r3, #1
 8005baa:	6010      	str	r0, [r2, #0]
 8005bac:	7019      	strb	r1, [r3, #0]
 8005bae:	0008      	movs	r0, r1
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	f7ff fc39 	bl	8005428 <__swbuf_r>
 8005bb6:	0001      	movs	r1, r0
 8005bb8:	e7f9      	b.n	8005bae <__sfputc_r+0x1e>

08005bba <__sfputs_r>:
 8005bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bbc:	0006      	movs	r6, r0
 8005bbe:	000f      	movs	r7, r1
 8005bc0:	0014      	movs	r4, r2
 8005bc2:	18d5      	adds	r5, r2, r3
 8005bc4:	42ac      	cmp	r4, r5
 8005bc6:	d101      	bne.n	8005bcc <__sfputs_r+0x12>
 8005bc8:	2000      	movs	r0, #0
 8005bca:	e007      	b.n	8005bdc <__sfputs_r+0x22>
 8005bcc:	7821      	ldrb	r1, [r4, #0]
 8005bce:	003a      	movs	r2, r7
 8005bd0:	0030      	movs	r0, r6
 8005bd2:	f7ff ffdd 	bl	8005b90 <__sfputc_r>
 8005bd6:	3401      	adds	r4, #1
 8005bd8:	1c43      	adds	r3, r0, #1
 8005bda:	d1f3      	bne.n	8005bc4 <__sfputs_r+0xa>
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005be0 <_vfiprintf_r>:
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b0a1      	sub	sp, #132	; 0x84
 8005be4:	0006      	movs	r6, r0
 8005be6:	000c      	movs	r4, r1
 8005be8:	001f      	movs	r7, r3
 8005bea:	9203      	str	r2, [sp, #12]
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d004      	beq.n	8005bfa <_vfiprintf_r+0x1a>
 8005bf0:	6983      	ldr	r3, [r0, #24]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <_vfiprintf_r+0x1a>
 8005bf6:	f7ff fe13 	bl	8005820 <__sinit>
 8005bfa:	4b8e      	ldr	r3, [pc, #568]	; (8005e34 <_vfiprintf_r+0x254>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	d11c      	bne.n	8005c3a <_vfiprintf_r+0x5a>
 8005c00:	6874      	ldr	r4, [r6, #4]
 8005c02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c04:	07db      	lsls	r3, r3, #31
 8005c06:	d405      	bmi.n	8005c14 <_vfiprintf_r+0x34>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	059b      	lsls	r3, r3, #22
 8005c0c:	d402      	bmi.n	8005c14 <_vfiprintf_r+0x34>
 8005c0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c10:	f7ff fea7 	bl	8005962 <__retarget_lock_acquire_recursive>
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	071b      	lsls	r3, r3, #28
 8005c18:	d502      	bpl.n	8005c20 <_vfiprintf_r+0x40>
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d11d      	bne.n	8005c5c <_vfiprintf_r+0x7c>
 8005c20:	0021      	movs	r1, r4
 8005c22:	0030      	movs	r0, r6
 8005c24:	f7ff fc56 	bl	80054d4 <__swsetup_r>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d017      	beq.n	8005c5c <_vfiprintf_r+0x7c>
 8005c2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c2e:	07db      	lsls	r3, r3, #31
 8005c30:	d50d      	bpl.n	8005c4e <_vfiprintf_r+0x6e>
 8005c32:	2001      	movs	r0, #1
 8005c34:	4240      	negs	r0, r0
 8005c36:	b021      	add	sp, #132	; 0x84
 8005c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3a:	4b7f      	ldr	r3, [pc, #508]	; (8005e38 <_vfiprintf_r+0x258>)
 8005c3c:	429c      	cmp	r4, r3
 8005c3e:	d101      	bne.n	8005c44 <_vfiprintf_r+0x64>
 8005c40:	68b4      	ldr	r4, [r6, #8]
 8005c42:	e7de      	b.n	8005c02 <_vfiprintf_r+0x22>
 8005c44:	4b7d      	ldr	r3, [pc, #500]	; (8005e3c <_vfiprintf_r+0x25c>)
 8005c46:	429c      	cmp	r4, r3
 8005c48:	d1db      	bne.n	8005c02 <_vfiprintf_r+0x22>
 8005c4a:	68f4      	ldr	r4, [r6, #12]
 8005c4c:	e7d9      	b.n	8005c02 <_vfiprintf_r+0x22>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	059b      	lsls	r3, r3, #22
 8005c52:	d4ee      	bmi.n	8005c32 <_vfiprintf_r+0x52>
 8005c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c56:	f7ff fe85 	bl	8005964 <__retarget_lock_release_recursive>
 8005c5a:	e7ea      	b.n	8005c32 <_vfiprintf_r+0x52>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	ad08      	add	r5, sp, #32
 8005c60:	616b      	str	r3, [r5, #20]
 8005c62:	3320      	adds	r3, #32
 8005c64:	766b      	strb	r3, [r5, #25]
 8005c66:	3310      	adds	r3, #16
 8005c68:	76ab      	strb	r3, [r5, #26]
 8005c6a:	9707      	str	r7, [sp, #28]
 8005c6c:	9f03      	ldr	r7, [sp, #12]
 8005c6e:	783b      	ldrb	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <_vfiprintf_r+0x98>
 8005c74:	2b25      	cmp	r3, #37	; 0x25
 8005c76:	d14e      	bne.n	8005d16 <_vfiprintf_r+0x136>
 8005c78:	9b03      	ldr	r3, [sp, #12]
 8005c7a:	1afb      	subs	r3, r7, r3
 8005c7c:	9305      	str	r3, [sp, #20]
 8005c7e:	9b03      	ldr	r3, [sp, #12]
 8005c80:	429f      	cmp	r7, r3
 8005c82:	d00d      	beq.n	8005ca0 <_vfiprintf_r+0xc0>
 8005c84:	9b05      	ldr	r3, [sp, #20]
 8005c86:	0021      	movs	r1, r4
 8005c88:	0030      	movs	r0, r6
 8005c8a:	9a03      	ldr	r2, [sp, #12]
 8005c8c:	f7ff ff95 	bl	8005bba <__sfputs_r>
 8005c90:	1c43      	adds	r3, r0, #1
 8005c92:	d100      	bne.n	8005c96 <_vfiprintf_r+0xb6>
 8005c94:	e0b5      	b.n	8005e02 <_vfiprintf_r+0x222>
 8005c96:	696a      	ldr	r2, [r5, #20]
 8005c98:	9b05      	ldr	r3, [sp, #20]
 8005c9a:	4694      	mov	ip, r2
 8005c9c:	4463      	add	r3, ip
 8005c9e:	616b      	str	r3, [r5, #20]
 8005ca0:	783b      	ldrb	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d100      	bne.n	8005ca8 <_vfiprintf_r+0xc8>
 8005ca6:	e0ac      	b.n	8005e02 <_vfiprintf_r+0x222>
 8005ca8:	2201      	movs	r2, #1
 8005caa:	1c7b      	adds	r3, r7, #1
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	4252      	negs	r2, r2
 8005cb2:	606a      	str	r2, [r5, #4]
 8005cb4:	a904      	add	r1, sp, #16
 8005cb6:	3254      	adds	r2, #84	; 0x54
 8005cb8:	1852      	adds	r2, r2, r1
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	60eb      	str	r3, [r5, #12]
 8005cbe:	60ab      	str	r3, [r5, #8]
 8005cc0:	7013      	strb	r3, [r2, #0]
 8005cc2:	65ab      	str	r3, [r5, #88]	; 0x58
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	2205      	movs	r2, #5
 8005cc8:	7819      	ldrb	r1, [r3, #0]
 8005cca:	485d      	ldr	r0, [pc, #372]	; (8005e40 <_vfiprintf_r+0x260>)
 8005ccc:	f000 fb00 	bl	80062d0 <memchr>
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	1c5f      	adds	r7, r3, #1
 8005cd4:	2800      	cmp	r0, #0
 8005cd6:	d120      	bne.n	8005d1a <_vfiprintf_r+0x13a>
 8005cd8:	682a      	ldr	r2, [r5, #0]
 8005cda:	06d3      	lsls	r3, r2, #27
 8005cdc:	d504      	bpl.n	8005ce8 <_vfiprintf_r+0x108>
 8005cde:	2353      	movs	r3, #83	; 0x53
 8005ce0:	a904      	add	r1, sp, #16
 8005ce2:	185b      	adds	r3, r3, r1
 8005ce4:	2120      	movs	r1, #32
 8005ce6:	7019      	strb	r1, [r3, #0]
 8005ce8:	0713      	lsls	r3, r2, #28
 8005cea:	d504      	bpl.n	8005cf6 <_vfiprintf_r+0x116>
 8005cec:	2353      	movs	r3, #83	; 0x53
 8005cee:	a904      	add	r1, sp, #16
 8005cf0:	185b      	adds	r3, r3, r1
 8005cf2:	212b      	movs	r1, #43	; 0x2b
 8005cf4:	7019      	strb	r1, [r3, #0]
 8005cf6:	9b03      	ldr	r3, [sp, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	2b2a      	cmp	r3, #42	; 0x2a
 8005cfc:	d016      	beq.n	8005d2c <_vfiprintf_r+0x14c>
 8005cfe:	2100      	movs	r1, #0
 8005d00:	68eb      	ldr	r3, [r5, #12]
 8005d02:	9f03      	ldr	r7, [sp, #12]
 8005d04:	783a      	ldrb	r2, [r7, #0]
 8005d06:	1c78      	adds	r0, r7, #1
 8005d08:	3a30      	subs	r2, #48	; 0x30
 8005d0a:	4684      	mov	ip, r0
 8005d0c:	2a09      	cmp	r2, #9
 8005d0e:	d94f      	bls.n	8005db0 <_vfiprintf_r+0x1d0>
 8005d10:	2900      	cmp	r1, #0
 8005d12:	d111      	bne.n	8005d38 <_vfiprintf_r+0x158>
 8005d14:	e017      	b.n	8005d46 <_vfiprintf_r+0x166>
 8005d16:	3701      	adds	r7, #1
 8005d18:	e7a9      	b.n	8005c6e <_vfiprintf_r+0x8e>
 8005d1a:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <_vfiprintf_r+0x260>)
 8005d1c:	682a      	ldr	r2, [r5, #0]
 8005d1e:	1ac0      	subs	r0, r0, r3
 8005d20:	2301      	movs	r3, #1
 8005d22:	4083      	lsls	r3, r0
 8005d24:	4313      	orrs	r3, r2
 8005d26:	602b      	str	r3, [r5, #0]
 8005d28:	9703      	str	r7, [sp, #12]
 8005d2a:	e7cb      	b.n	8005cc4 <_vfiprintf_r+0xe4>
 8005d2c:	9b07      	ldr	r3, [sp, #28]
 8005d2e:	1d19      	adds	r1, r3, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	9107      	str	r1, [sp, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	db01      	blt.n	8005d3c <_vfiprintf_r+0x15c>
 8005d38:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d3a:	e004      	b.n	8005d46 <_vfiprintf_r+0x166>
 8005d3c:	425b      	negs	r3, r3
 8005d3e:	60eb      	str	r3, [r5, #12]
 8005d40:	2302      	movs	r3, #2
 8005d42:	4313      	orrs	r3, r2
 8005d44:	602b      	str	r3, [r5, #0]
 8005d46:	783b      	ldrb	r3, [r7, #0]
 8005d48:	2b2e      	cmp	r3, #46	; 0x2e
 8005d4a:	d10a      	bne.n	8005d62 <_vfiprintf_r+0x182>
 8005d4c:	787b      	ldrb	r3, [r7, #1]
 8005d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8005d50:	d137      	bne.n	8005dc2 <_vfiprintf_r+0x1e2>
 8005d52:	9b07      	ldr	r3, [sp, #28]
 8005d54:	3702      	adds	r7, #2
 8005d56:	1d1a      	adds	r2, r3, #4
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	9207      	str	r2, [sp, #28]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	db2d      	blt.n	8005dbc <_vfiprintf_r+0x1dc>
 8005d60:	9309      	str	r3, [sp, #36]	; 0x24
 8005d62:	2203      	movs	r2, #3
 8005d64:	7839      	ldrb	r1, [r7, #0]
 8005d66:	4837      	ldr	r0, [pc, #220]	; (8005e44 <_vfiprintf_r+0x264>)
 8005d68:	f000 fab2 	bl	80062d0 <memchr>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d007      	beq.n	8005d80 <_vfiprintf_r+0x1a0>
 8005d70:	4b34      	ldr	r3, [pc, #208]	; (8005e44 <_vfiprintf_r+0x264>)
 8005d72:	682a      	ldr	r2, [r5, #0]
 8005d74:	1ac0      	subs	r0, r0, r3
 8005d76:	2340      	movs	r3, #64	; 0x40
 8005d78:	4083      	lsls	r3, r0
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	3701      	adds	r7, #1
 8005d7e:	602b      	str	r3, [r5, #0]
 8005d80:	7839      	ldrb	r1, [r7, #0]
 8005d82:	1c7b      	adds	r3, r7, #1
 8005d84:	2206      	movs	r2, #6
 8005d86:	4830      	ldr	r0, [pc, #192]	; (8005e48 <_vfiprintf_r+0x268>)
 8005d88:	9303      	str	r3, [sp, #12]
 8005d8a:	7629      	strb	r1, [r5, #24]
 8005d8c:	f000 faa0 	bl	80062d0 <memchr>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d045      	beq.n	8005e20 <_vfiprintf_r+0x240>
 8005d94:	4b2d      	ldr	r3, [pc, #180]	; (8005e4c <_vfiprintf_r+0x26c>)
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d127      	bne.n	8005dea <_vfiprintf_r+0x20a>
 8005d9a:	2207      	movs	r2, #7
 8005d9c:	9b07      	ldr	r3, [sp, #28]
 8005d9e:	3307      	adds	r3, #7
 8005da0:	4393      	bics	r3, r2
 8005da2:	3308      	adds	r3, #8
 8005da4:	9307      	str	r3, [sp, #28]
 8005da6:	696b      	ldr	r3, [r5, #20]
 8005da8:	9a04      	ldr	r2, [sp, #16]
 8005daa:	189b      	adds	r3, r3, r2
 8005dac:	616b      	str	r3, [r5, #20]
 8005dae:	e75d      	b.n	8005c6c <_vfiprintf_r+0x8c>
 8005db0:	210a      	movs	r1, #10
 8005db2:	434b      	muls	r3, r1
 8005db4:	4667      	mov	r7, ip
 8005db6:	189b      	adds	r3, r3, r2
 8005db8:	3909      	subs	r1, #9
 8005dba:	e7a3      	b.n	8005d04 <_vfiprintf_r+0x124>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	425b      	negs	r3, r3
 8005dc0:	e7ce      	b.n	8005d60 <_vfiprintf_r+0x180>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	001a      	movs	r2, r3
 8005dc6:	3701      	adds	r7, #1
 8005dc8:	606b      	str	r3, [r5, #4]
 8005dca:	7839      	ldrb	r1, [r7, #0]
 8005dcc:	1c78      	adds	r0, r7, #1
 8005dce:	3930      	subs	r1, #48	; 0x30
 8005dd0:	4684      	mov	ip, r0
 8005dd2:	2909      	cmp	r1, #9
 8005dd4:	d903      	bls.n	8005dde <_vfiprintf_r+0x1fe>
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0c3      	beq.n	8005d62 <_vfiprintf_r+0x182>
 8005dda:	9209      	str	r2, [sp, #36]	; 0x24
 8005ddc:	e7c1      	b.n	8005d62 <_vfiprintf_r+0x182>
 8005dde:	230a      	movs	r3, #10
 8005de0:	435a      	muls	r2, r3
 8005de2:	4667      	mov	r7, ip
 8005de4:	1852      	adds	r2, r2, r1
 8005de6:	3b09      	subs	r3, #9
 8005de8:	e7ef      	b.n	8005dca <_vfiprintf_r+0x1ea>
 8005dea:	ab07      	add	r3, sp, #28
 8005dec:	9300      	str	r3, [sp, #0]
 8005dee:	0022      	movs	r2, r4
 8005df0:	0029      	movs	r1, r5
 8005df2:	0030      	movs	r0, r6
 8005df4:	4b16      	ldr	r3, [pc, #88]	; (8005e50 <_vfiprintf_r+0x270>)
 8005df6:	e000      	b.n	8005dfa <_vfiprintf_r+0x21a>
 8005df8:	bf00      	nop
 8005dfa:	9004      	str	r0, [sp, #16]
 8005dfc:	9b04      	ldr	r3, [sp, #16]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	d1d1      	bne.n	8005da6 <_vfiprintf_r+0x1c6>
 8005e02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e04:	07db      	lsls	r3, r3, #31
 8005e06:	d405      	bmi.n	8005e14 <_vfiprintf_r+0x234>
 8005e08:	89a3      	ldrh	r3, [r4, #12]
 8005e0a:	059b      	lsls	r3, r3, #22
 8005e0c:	d402      	bmi.n	8005e14 <_vfiprintf_r+0x234>
 8005e0e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e10:	f7ff fda8 	bl	8005964 <__retarget_lock_release_recursive>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	065b      	lsls	r3, r3, #25
 8005e18:	d500      	bpl.n	8005e1c <_vfiprintf_r+0x23c>
 8005e1a:	e70a      	b.n	8005c32 <_vfiprintf_r+0x52>
 8005e1c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005e1e:	e70a      	b.n	8005c36 <_vfiprintf_r+0x56>
 8005e20:	ab07      	add	r3, sp, #28
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	0022      	movs	r2, r4
 8005e26:	0029      	movs	r1, r5
 8005e28:	0030      	movs	r0, r6
 8005e2a:	4b09      	ldr	r3, [pc, #36]	; (8005e50 <_vfiprintf_r+0x270>)
 8005e2c:	f000 f882 	bl	8005f34 <_printf_i>
 8005e30:	e7e3      	b.n	8005dfa <_vfiprintf_r+0x21a>
 8005e32:	46c0      	nop			; (mov r8, r8)
 8005e34:	080065d0 	.word	0x080065d0
 8005e38:	080065f0 	.word	0x080065f0
 8005e3c:	080065b0 	.word	0x080065b0
 8005e40:	08006610 	.word	0x08006610
 8005e44:	08006616 	.word	0x08006616
 8005e48:	0800661a 	.word	0x0800661a
 8005e4c:	00000000 	.word	0x00000000
 8005e50:	08005bbb 	.word	0x08005bbb

08005e54 <_printf_common>:
 8005e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e56:	0015      	movs	r5, r2
 8005e58:	9301      	str	r3, [sp, #4]
 8005e5a:	688a      	ldr	r2, [r1, #8]
 8005e5c:	690b      	ldr	r3, [r1, #16]
 8005e5e:	000c      	movs	r4, r1
 8005e60:	9000      	str	r0, [sp, #0]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	da00      	bge.n	8005e68 <_printf_common+0x14>
 8005e66:	0013      	movs	r3, r2
 8005e68:	0022      	movs	r2, r4
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	3243      	adds	r2, #67	; 0x43
 8005e6e:	7812      	ldrb	r2, [r2, #0]
 8005e70:	2a00      	cmp	r2, #0
 8005e72:	d001      	beq.n	8005e78 <_printf_common+0x24>
 8005e74:	3301      	adds	r3, #1
 8005e76:	602b      	str	r3, [r5, #0]
 8005e78:	6823      	ldr	r3, [r4, #0]
 8005e7a:	069b      	lsls	r3, r3, #26
 8005e7c:	d502      	bpl.n	8005e84 <_printf_common+0x30>
 8005e7e:	682b      	ldr	r3, [r5, #0]
 8005e80:	3302      	adds	r3, #2
 8005e82:	602b      	str	r3, [r5, #0]
 8005e84:	6822      	ldr	r2, [r4, #0]
 8005e86:	2306      	movs	r3, #6
 8005e88:	0017      	movs	r7, r2
 8005e8a:	401f      	ands	r7, r3
 8005e8c:	421a      	tst	r2, r3
 8005e8e:	d027      	beq.n	8005ee0 <_printf_common+0x8c>
 8005e90:	0023      	movs	r3, r4
 8005e92:	3343      	adds	r3, #67	; 0x43
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	1e5a      	subs	r2, r3, #1
 8005e98:	4193      	sbcs	r3, r2
 8005e9a:	6822      	ldr	r2, [r4, #0]
 8005e9c:	0692      	lsls	r2, r2, #26
 8005e9e:	d430      	bmi.n	8005f02 <_printf_common+0xae>
 8005ea0:	0022      	movs	r2, r4
 8005ea2:	9901      	ldr	r1, [sp, #4]
 8005ea4:	9800      	ldr	r0, [sp, #0]
 8005ea6:	9e08      	ldr	r6, [sp, #32]
 8005ea8:	3243      	adds	r2, #67	; 0x43
 8005eaa:	47b0      	blx	r6
 8005eac:	1c43      	adds	r3, r0, #1
 8005eae:	d025      	beq.n	8005efc <_printf_common+0xa8>
 8005eb0:	2306      	movs	r3, #6
 8005eb2:	6820      	ldr	r0, [r4, #0]
 8005eb4:	682a      	ldr	r2, [r5, #0]
 8005eb6:	68e1      	ldr	r1, [r4, #12]
 8005eb8:	2500      	movs	r5, #0
 8005eba:	4003      	ands	r3, r0
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d103      	bne.n	8005ec8 <_printf_common+0x74>
 8005ec0:	1a8d      	subs	r5, r1, r2
 8005ec2:	43eb      	mvns	r3, r5
 8005ec4:	17db      	asrs	r3, r3, #31
 8005ec6:	401d      	ands	r5, r3
 8005ec8:	68a3      	ldr	r3, [r4, #8]
 8005eca:	6922      	ldr	r2, [r4, #16]
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	dd01      	ble.n	8005ed4 <_printf_common+0x80>
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	18ed      	adds	r5, r5, r3
 8005ed4:	2700      	movs	r7, #0
 8005ed6:	42bd      	cmp	r5, r7
 8005ed8:	d120      	bne.n	8005f1c <_printf_common+0xc8>
 8005eda:	2000      	movs	r0, #0
 8005edc:	e010      	b.n	8005f00 <_printf_common+0xac>
 8005ede:	3701      	adds	r7, #1
 8005ee0:	68e3      	ldr	r3, [r4, #12]
 8005ee2:	682a      	ldr	r2, [r5, #0]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	42bb      	cmp	r3, r7
 8005ee8:	ddd2      	ble.n	8005e90 <_printf_common+0x3c>
 8005eea:	0022      	movs	r2, r4
 8005eec:	2301      	movs	r3, #1
 8005eee:	9901      	ldr	r1, [sp, #4]
 8005ef0:	9800      	ldr	r0, [sp, #0]
 8005ef2:	9e08      	ldr	r6, [sp, #32]
 8005ef4:	3219      	adds	r2, #25
 8005ef6:	47b0      	blx	r6
 8005ef8:	1c43      	adds	r3, r0, #1
 8005efa:	d1f0      	bne.n	8005ede <_printf_common+0x8a>
 8005efc:	2001      	movs	r0, #1
 8005efe:	4240      	negs	r0, r0
 8005f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f02:	2030      	movs	r0, #48	; 0x30
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	3143      	adds	r1, #67	; 0x43
 8005f08:	7008      	strb	r0, [r1, #0]
 8005f0a:	0021      	movs	r1, r4
 8005f0c:	1c5a      	adds	r2, r3, #1
 8005f0e:	3145      	adds	r1, #69	; 0x45
 8005f10:	7809      	ldrb	r1, [r1, #0]
 8005f12:	18a2      	adds	r2, r4, r2
 8005f14:	3243      	adds	r2, #67	; 0x43
 8005f16:	3302      	adds	r3, #2
 8005f18:	7011      	strb	r1, [r2, #0]
 8005f1a:	e7c1      	b.n	8005ea0 <_printf_common+0x4c>
 8005f1c:	0022      	movs	r2, r4
 8005f1e:	2301      	movs	r3, #1
 8005f20:	9901      	ldr	r1, [sp, #4]
 8005f22:	9800      	ldr	r0, [sp, #0]
 8005f24:	9e08      	ldr	r6, [sp, #32]
 8005f26:	321a      	adds	r2, #26
 8005f28:	47b0      	blx	r6
 8005f2a:	1c43      	adds	r3, r0, #1
 8005f2c:	d0e6      	beq.n	8005efc <_printf_common+0xa8>
 8005f2e:	3701      	adds	r7, #1
 8005f30:	e7d1      	b.n	8005ed6 <_printf_common+0x82>
	...

08005f34 <_printf_i>:
 8005f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f36:	b08b      	sub	sp, #44	; 0x2c
 8005f38:	9206      	str	r2, [sp, #24]
 8005f3a:	000a      	movs	r2, r1
 8005f3c:	3243      	adds	r2, #67	; 0x43
 8005f3e:	9307      	str	r3, [sp, #28]
 8005f40:	9005      	str	r0, [sp, #20]
 8005f42:	9204      	str	r2, [sp, #16]
 8005f44:	7e0a      	ldrb	r2, [r1, #24]
 8005f46:	000c      	movs	r4, r1
 8005f48:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f4a:	2a78      	cmp	r2, #120	; 0x78
 8005f4c:	d806      	bhi.n	8005f5c <_printf_i+0x28>
 8005f4e:	2a62      	cmp	r2, #98	; 0x62
 8005f50:	d808      	bhi.n	8005f64 <_printf_i+0x30>
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d100      	bne.n	8005f58 <_printf_i+0x24>
 8005f56:	e0c0      	b.n	80060da <_printf_i+0x1a6>
 8005f58:	2a58      	cmp	r2, #88	; 0x58
 8005f5a:	d052      	beq.n	8006002 <_printf_i+0xce>
 8005f5c:	0026      	movs	r6, r4
 8005f5e:	3642      	adds	r6, #66	; 0x42
 8005f60:	7032      	strb	r2, [r6, #0]
 8005f62:	e022      	b.n	8005faa <_printf_i+0x76>
 8005f64:	0010      	movs	r0, r2
 8005f66:	3863      	subs	r0, #99	; 0x63
 8005f68:	2815      	cmp	r0, #21
 8005f6a:	d8f7      	bhi.n	8005f5c <_printf_i+0x28>
 8005f6c:	f7fa f8cc 	bl	8000108 <__gnu_thumb1_case_shi>
 8005f70:	001f0016 	.word	0x001f0016
 8005f74:	fff6fff6 	.word	0xfff6fff6
 8005f78:	fff6fff6 	.word	0xfff6fff6
 8005f7c:	fff6001f 	.word	0xfff6001f
 8005f80:	fff6fff6 	.word	0xfff6fff6
 8005f84:	00a8fff6 	.word	0x00a8fff6
 8005f88:	009a0036 	.word	0x009a0036
 8005f8c:	fff6fff6 	.word	0xfff6fff6
 8005f90:	fff600b9 	.word	0xfff600b9
 8005f94:	fff60036 	.word	0xfff60036
 8005f98:	009efff6 	.word	0x009efff6
 8005f9c:	0026      	movs	r6, r4
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	3642      	adds	r6, #66	; 0x42
 8005fa2:	1d11      	adds	r1, r2, #4
 8005fa4:	6019      	str	r1, [r3, #0]
 8005fa6:	6813      	ldr	r3, [r2, #0]
 8005fa8:	7033      	strb	r3, [r6, #0]
 8005faa:	2301      	movs	r3, #1
 8005fac:	e0a7      	b.n	80060fe <_printf_i+0x1ca>
 8005fae:	6808      	ldr	r0, [r1, #0]
 8005fb0:	6819      	ldr	r1, [r3, #0]
 8005fb2:	1d0a      	adds	r2, r1, #4
 8005fb4:	0605      	lsls	r5, r0, #24
 8005fb6:	d50b      	bpl.n	8005fd0 <_printf_i+0x9c>
 8005fb8:	680d      	ldr	r5, [r1, #0]
 8005fba:	601a      	str	r2, [r3, #0]
 8005fbc:	2d00      	cmp	r5, #0
 8005fbe:	da03      	bge.n	8005fc8 <_printf_i+0x94>
 8005fc0:	232d      	movs	r3, #45	; 0x2d
 8005fc2:	9a04      	ldr	r2, [sp, #16]
 8005fc4:	426d      	negs	r5, r5
 8005fc6:	7013      	strb	r3, [r2, #0]
 8005fc8:	4b61      	ldr	r3, [pc, #388]	; (8006150 <_printf_i+0x21c>)
 8005fca:	270a      	movs	r7, #10
 8005fcc:	9303      	str	r3, [sp, #12]
 8005fce:	e032      	b.n	8006036 <_printf_i+0x102>
 8005fd0:	680d      	ldr	r5, [r1, #0]
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	0641      	lsls	r1, r0, #25
 8005fd6:	d5f1      	bpl.n	8005fbc <_printf_i+0x88>
 8005fd8:	b22d      	sxth	r5, r5
 8005fda:	e7ef      	b.n	8005fbc <_printf_i+0x88>
 8005fdc:	680d      	ldr	r5, [r1, #0]
 8005fde:	6819      	ldr	r1, [r3, #0]
 8005fe0:	1d08      	adds	r0, r1, #4
 8005fe2:	6018      	str	r0, [r3, #0]
 8005fe4:	062e      	lsls	r6, r5, #24
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0xb8>
 8005fe8:	680d      	ldr	r5, [r1, #0]
 8005fea:	e003      	b.n	8005ff4 <_printf_i+0xc0>
 8005fec:	066d      	lsls	r5, r5, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0xb4>
 8005ff0:	680d      	ldr	r5, [r1, #0]
 8005ff2:	b2ad      	uxth	r5, r5
 8005ff4:	4b56      	ldr	r3, [pc, #344]	; (8006150 <_printf_i+0x21c>)
 8005ff6:	270a      	movs	r7, #10
 8005ff8:	9303      	str	r3, [sp, #12]
 8005ffa:	2a6f      	cmp	r2, #111	; 0x6f
 8005ffc:	d117      	bne.n	800602e <_printf_i+0xfa>
 8005ffe:	2708      	movs	r7, #8
 8006000:	e015      	b.n	800602e <_printf_i+0xfa>
 8006002:	3145      	adds	r1, #69	; 0x45
 8006004:	700a      	strb	r2, [r1, #0]
 8006006:	4a52      	ldr	r2, [pc, #328]	; (8006150 <_printf_i+0x21c>)
 8006008:	9203      	str	r2, [sp, #12]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	6821      	ldr	r1, [r4, #0]
 800600e:	ca20      	ldmia	r2!, {r5}
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	0608      	lsls	r0, r1, #24
 8006014:	d550      	bpl.n	80060b8 <_printf_i+0x184>
 8006016:	07cb      	lsls	r3, r1, #31
 8006018:	d502      	bpl.n	8006020 <_printf_i+0xec>
 800601a:	2320      	movs	r3, #32
 800601c:	4319      	orrs	r1, r3
 800601e:	6021      	str	r1, [r4, #0]
 8006020:	2710      	movs	r7, #16
 8006022:	2d00      	cmp	r5, #0
 8006024:	d103      	bne.n	800602e <_printf_i+0xfa>
 8006026:	2320      	movs	r3, #32
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	439a      	bics	r2, r3
 800602c:	6022      	str	r2, [r4, #0]
 800602e:	0023      	movs	r3, r4
 8006030:	2200      	movs	r2, #0
 8006032:	3343      	adds	r3, #67	; 0x43
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6863      	ldr	r3, [r4, #4]
 8006038:	60a3      	str	r3, [r4, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	db03      	blt.n	8006046 <_printf_i+0x112>
 800603e:	2204      	movs	r2, #4
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	4391      	bics	r1, r2
 8006044:	6021      	str	r1, [r4, #0]
 8006046:	2d00      	cmp	r5, #0
 8006048:	d102      	bne.n	8006050 <_printf_i+0x11c>
 800604a:	9e04      	ldr	r6, [sp, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d00c      	beq.n	800606a <_printf_i+0x136>
 8006050:	9e04      	ldr	r6, [sp, #16]
 8006052:	0028      	movs	r0, r5
 8006054:	0039      	movs	r1, r7
 8006056:	f7fa f8e7 	bl	8000228 <__aeabi_uidivmod>
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	3e01      	subs	r6, #1
 800605e:	5c5b      	ldrb	r3, [r3, r1]
 8006060:	7033      	strb	r3, [r6, #0]
 8006062:	002b      	movs	r3, r5
 8006064:	0005      	movs	r5, r0
 8006066:	429f      	cmp	r7, r3
 8006068:	d9f3      	bls.n	8006052 <_printf_i+0x11e>
 800606a:	2f08      	cmp	r7, #8
 800606c:	d109      	bne.n	8006082 <_printf_i+0x14e>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	07db      	lsls	r3, r3, #31
 8006072:	d506      	bpl.n	8006082 <_printf_i+0x14e>
 8006074:	6863      	ldr	r3, [r4, #4]
 8006076:	6922      	ldr	r2, [r4, #16]
 8006078:	4293      	cmp	r3, r2
 800607a:	dc02      	bgt.n	8006082 <_printf_i+0x14e>
 800607c:	2330      	movs	r3, #48	; 0x30
 800607e:	3e01      	subs	r6, #1
 8006080:	7033      	strb	r3, [r6, #0]
 8006082:	9b04      	ldr	r3, [sp, #16]
 8006084:	1b9b      	subs	r3, r3, r6
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	9b07      	ldr	r3, [sp, #28]
 800608a:	0021      	movs	r1, r4
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	9805      	ldr	r0, [sp, #20]
 8006090:	9b06      	ldr	r3, [sp, #24]
 8006092:	aa09      	add	r2, sp, #36	; 0x24
 8006094:	f7ff fede 	bl	8005e54 <_printf_common>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d135      	bne.n	8006108 <_printf_i+0x1d4>
 800609c:	2001      	movs	r0, #1
 800609e:	4240      	negs	r0, r0
 80060a0:	b00b      	add	sp, #44	; 0x2c
 80060a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060a4:	2220      	movs	r2, #32
 80060a6:	6809      	ldr	r1, [r1, #0]
 80060a8:	430a      	orrs	r2, r1
 80060aa:	6022      	str	r2, [r4, #0]
 80060ac:	0022      	movs	r2, r4
 80060ae:	2178      	movs	r1, #120	; 0x78
 80060b0:	3245      	adds	r2, #69	; 0x45
 80060b2:	7011      	strb	r1, [r2, #0]
 80060b4:	4a27      	ldr	r2, [pc, #156]	; (8006154 <_printf_i+0x220>)
 80060b6:	e7a7      	b.n	8006008 <_printf_i+0xd4>
 80060b8:	0648      	lsls	r0, r1, #25
 80060ba:	d5ac      	bpl.n	8006016 <_printf_i+0xe2>
 80060bc:	b2ad      	uxth	r5, r5
 80060be:	e7aa      	b.n	8006016 <_printf_i+0xe2>
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	680d      	ldr	r5, [r1, #0]
 80060c4:	1d10      	adds	r0, r2, #4
 80060c6:	6949      	ldr	r1, [r1, #20]
 80060c8:	6018      	str	r0, [r3, #0]
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	062e      	lsls	r6, r5, #24
 80060ce:	d501      	bpl.n	80060d4 <_printf_i+0x1a0>
 80060d0:	6019      	str	r1, [r3, #0]
 80060d2:	e002      	b.n	80060da <_printf_i+0x1a6>
 80060d4:	066d      	lsls	r5, r5, #25
 80060d6:	d5fb      	bpl.n	80060d0 <_printf_i+0x19c>
 80060d8:	8019      	strh	r1, [r3, #0]
 80060da:	2300      	movs	r3, #0
 80060dc:	9e04      	ldr	r6, [sp, #16]
 80060de:	6123      	str	r3, [r4, #16]
 80060e0:	e7d2      	b.n	8006088 <_printf_i+0x154>
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	1d11      	adds	r1, r2, #4
 80060e6:	6019      	str	r1, [r3, #0]
 80060e8:	6816      	ldr	r6, [r2, #0]
 80060ea:	2100      	movs	r1, #0
 80060ec:	0030      	movs	r0, r6
 80060ee:	6862      	ldr	r2, [r4, #4]
 80060f0:	f000 f8ee 	bl	80062d0 <memchr>
 80060f4:	2800      	cmp	r0, #0
 80060f6:	d001      	beq.n	80060fc <_printf_i+0x1c8>
 80060f8:	1b80      	subs	r0, r0, r6
 80060fa:	6060      	str	r0, [r4, #4]
 80060fc:	6863      	ldr	r3, [r4, #4]
 80060fe:	6123      	str	r3, [r4, #16]
 8006100:	2300      	movs	r3, #0
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	7013      	strb	r3, [r2, #0]
 8006106:	e7bf      	b.n	8006088 <_printf_i+0x154>
 8006108:	6923      	ldr	r3, [r4, #16]
 800610a:	0032      	movs	r2, r6
 800610c:	9906      	ldr	r1, [sp, #24]
 800610e:	9805      	ldr	r0, [sp, #20]
 8006110:	9d07      	ldr	r5, [sp, #28]
 8006112:	47a8      	blx	r5
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	d0c1      	beq.n	800609c <_printf_i+0x168>
 8006118:	6823      	ldr	r3, [r4, #0]
 800611a:	079b      	lsls	r3, r3, #30
 800611c:	d415      	bmi.n	800614a <_printf_i+0x216>
 800611e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006120:	68e0      	ldr	r0, [r4, #12]
 8006122:	4298      	cmp	r0, r3
 8006124:	dabc      	bge.n	80060a0 <_printf_i+0x16c>
 8006126:	0018      	movs	r0, r3
 8006128:	e7ba      	b.n	80060a0 <_printf_i+0x16c>
 800612a:	0022      	movs	r2, r4
 800612c:	2301      	movs	r3, #1
 800612e:	9906      	ldr	r1, [sp, #24]
 8006130:	9805      	ldr	r0, [sp, #20]
 8006132:	9e07      	ldr	r6, [sp, #28]
 8006134:	3219      	adds	r2, #25
 8006136:	47b0      	blx	r6
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d0af      	beq.n	800609c <_printf_i+0x168>
 800613c:	3501      	adds	r5, #1
 800613e:	68e3      	ldr	r3, [r4, #12]
 8006140:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	42ab      	cmp	r3, r5
 8006146:	dcf0      	bgt.n	800612a <_printf_i+0x1f6>
 8006148:	e7e9      	b.n	800611e <_printf_i+0x1ea>
 800614a:	2500      	movs	r5, #0
 800614c:	e7f7      	b.n	800613e <_printf_i+0x20a>
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	08006621 	.word	0x08006621
 8006154:	08006632 	.word	0x08006632

08006158 <_sbrk_r>:
 8006158:	2300      	movs	r3, #0
 800615a:	b570      	push	{r4, r5, r6, lr}
 800615c:	4d06      	ldr	r5, [pc, #24]	; (8006178 <_sbrk_r+0x20>)
 800615e:	0004      	movs	r4, r0
 8006160:	0008      	movs	r0, r1
 8006162:	602b      	str	r3, [r5, #0]
 8006164:	f7fa ffb0 	bl	80010c8 <_sbrk>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d103      	bne.n	8006174 <_sbrk_r+0x1c>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d000      	beq.n	8006174 <_sbrk_r+0x1c>
 8006172:	6023      	str	r3, [r4, #0]
 8006174:	bd70      	pop	{r4, r5, r6, pc}
 8006176:	46c0      	nop			; (mov r8, r8)
 8006178:	200001b4 	.word	0x200001b4

0800617c <__sread>:
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	000c      	movs	r4, r1
 8006180:	250e      	movs	r5, #14
 8006182:	5f49      	ldrsh	r1, [r1, r5]
 8006184:	f000 f8c0 	bl	8006308 <_read_r>
 8006188:	2800      	cmp	r0, #0
 800618a:	db03      	blt.n	8006194 <__sread+0x18>
 800618c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800618e:	181b      	adds	r3, r3, r0
 8006190:	6563      	str	r3, [r4, #84]	; 0x54
 8006192:	bd70      	pop	{r4, r5, r6, pc}
 8006194:	89a3      	ldrh	r3, [r4, #12]
 8006196:	4a02      	ldr	r2, [pc, #8]	; (80061a0 <__sread+0x24>)
 8006198:	4013      	ands	r3, r2
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	e7f9      	b.n	8006192 <__sread+0x16>
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	ffffefff 	.word	0xffffefff

080061a4 <__swrite>:
 80061a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061a6:	001f      	movs	r7, r3
 80061a8:	898b      	ldrh	r3, [r1, #12]
 80061aa:	0005      	movs	r5, r0
 80061ac:	000c      	movs	r4, r1
 80061ae:	0016      	movs	r6, r2
 80061b0:	05db      	lsls	r3, r3, #23
 80061b2:	d505      	bpl.n	80061c0 <__swrite+0x1c>
 80061b4:	230e      	movs	r3, #14
 80061b6:	5ec9      	ldrsh	r1, [r1, r3]
 80061b8:	2200      	movs	r2, #0
 80061ba:	2302      	movs	r3, #2
 80061bc:	f000 f874 	bl	80062a8 <_lseek_r>
 80061c0:	89a3      	ldrh	r3, [r4, #12]
 80061c2:	4a05      	ldr	r2, [pc, #20]	; (80061d8 <__swrite+0x34>)
 80061c4:	0028      	movs	r0, r5
 80061c6:	4013      	ands	r3, r2
 80061c8:	81a3      	strh	r3, [r4, #12]
 80061ca:	0032      	movs	r2, r6
 80061cc:	230e      	movs	r3, #14
 80061ce:	5ee1      	ldrsh	r1, [r4, r3]
 80061d0:	003b      	movs	r3, r7
 80061d2:	f000 f81f 	bl	8006214 <_write_r>
 80061d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061d8:	ffffefff 	.word	0xffffefff

080061dc <__sseek>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	000c      	movs	r4, r1
 80061e0:	250e      	movs	r5, #14
 80061e2:	5f49      	ldrsh	r1, [r1, r5]
 80061e4:	f000 f860 	bl	80062a8 <_lseek_r>
 80061e8:	89a3      	ldrh	r3, [r4, #12]
 80061ea:	1c42      	adds	r2, r0, #1
 80061ec:	d103      	bne.n	80061f6 <__sseek+0x1a>
 80061ee:	4a05      	ldr	r2, [pc, #20]	; (8006204 <__sseek+0x28>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	81a3      	strh	r3, [r4, #12]
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	2280      	movs	r2, #128	; 0x80
 80061f8:	0152      	lsls	r2, r2, #5
 80061fa:	4313      	orrs	r3, r2
 80061fc:	81a3      	strh	r3, [r4, #12]
 80061fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006200:	e7f8      	b.n	80061f4 <__sseek+0x18>
 8006202:	46c0      	nop			; (mov r8, r8)
 8006204:	ffffefff 	.word	0xffffefff

08006208 <__sclose>:
 8006208:	b510      	push	{r4, lr}
 800620a:	230e      	movs	r3, #14
 800620c:	5ec9      	ldrsh	r1, [r1, r3]
 800620e:	f000 f815 	bl	800623c <_close_r>
 8006212:	bd10      	pop	{r4, pc}

08006214 <_write_r>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	0004      	movs	r4, r0
 8006218:	0008      	movs	r0, r1
 800621a:	0011      	movs	r1, r2
 800621c:	001a      	movs	r2, r3
 800621e:	2300      	movs	r3, #0
 8006220:	4d05      	ldr	r5, [pc, #20]	; (8006238 <_write_r+0x24>)
 8006222:	602b      	str	r3, [r5, #0]
 8006224:	f7fa ff08 	bl	8001038 <_write>
 8006228:	1c43      	adds	r3, r0, #1
 800622a:	d103      	bne.n	8006234 <_write_r+0x20>
 800622c:	682b      	ldr	r3, [r5, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d000      	beq.n	8006234 <_write_r+0x20>
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	bd70      	pop	{r4, r5, r6, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	200001b4 	.word	0x200001b4

0800623c <_close_r>:
 800623c:	2300      	movs	r3, #0
 800623e:	b570      	push	{r4, r5, r6, lr}
 8006240:	4d06      	ldr	r5, [pc, #24]	; (800625c <_close_r+0x20>)
 8006242:	0004      	movs	r4, r0
 8006244:	0008      	movs	r0, r1
 8006246:	602b      	str	r3, [r5, #0]
 8006248:	f7fa ff12 	bl	8001070 <_close>
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	d103      	bne.n	8006258 <_close_r+0x1c>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d000      	beq.n	8006258 <_close_r+0x1c>
 8006256:	6023      	str	r3, [r4, #0]
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	46c0      	nop			; (mov r8, r8)
 800625c:	200001b4 	.word	0x200001b4

08006260 <_fstat_r>:
 8006260:	2300      	movs	r3, #0
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	4d06      	ldr	r5, [pc, #24]	; (8006280 <_fstat_r+0x20>)
 8006266:	0004      	movs	r4, r0
 8006268:	0008      	movs	r0, r1
 800626a:	0011      	movs	r1, r2
 800626c:	602b      	str	r3, [r5, #0]
 800626e:	f7fa ff09 	bl	8001084 <_fstat>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	d103      	bne.n	800627e <_fstat_r+0x1e>
 8006276:	682b      	ldr	r3, [r5, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d000      	beq.n	800627e <_fstat_r+0x1e>
 800627c:	6023      	str	r3, [r4, #0]
 800627e:	bd70      	pop	{r4, r5, r6, pc}
 8006280:	200001b4 	.word	0x200001b4

08006284 <_isatty_r>:
 8006284:	2300      	movs	r3, #0
 8006286:	b570      	push	{r4, r5, r6, lr}
 8006288:	4d06      	ldr	r5, [pc, #24]	; (80062a4 <_isatty_r+0x20>)
 800628a:	0004      	movs	r4, r0
 800628c:	0008      	movs	r0, r1
 800628e:	602b      	str	r3, [r5, #0]
 8006290:	f7fa ff06 	bl	80010a0 <_isatty>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d103      	bne.n	80062a0 <_isatty_r+0x1c>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d000      	beq.n	80062a0 <_isatty_r+0x1c>
 800629e:	6023      	str	r3, [r4, #0]
 80062a0:	bd70      	pop	{r4, r5, r6, pc}
 80062a2:	46c0      	nop			; (mov r8, r8)
 80062a4:	200001b4 	.word	0x200001b4

080062a8 <_lseek_r>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	0004      	movs	r4, r0
 80062ac:	0008      	movs	r0, r1
 80062ae:	0011      	movs	r1, r2
 80062b0:	001a      	movs	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	4d05      	ldr	r5, [pc, #20]	; (80062cc <_lseek_r+0x24>)
 80062b6:	602b      	str	r3, [r5, #0]
 80062b8:	f7fa fefb 	bl	80010b2 <_lseek>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d103      	bne.n	80062c8 <_lseek_r+0x20>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d000      	beq.n	80062c8 <_lseek_r+0x20>
 80062c6:	6023      	str	r3, [r4, #0]
 80062c8:	bd70      	pop	{r4, r5, r6, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	200001b4 	.word	0x200001b4

080062d0 <memchr>:
 80062d0:	b2c9      	uxtb	r1, r1
 80062d2:	1882      	adds	r2, r0, r2
 80062d4:	4290      	cmp	r0, r2
 80062d6:	d101      	bne.n	80062dc <memchr+0xc>
 80062d8:	2000      	movs	r0, #0
 80062da:	4770      	bx	lr
 80062dc:	7803      	ldrb	r3, [r0, #0]
 80062de:	428b      	cmp	r3, r1
 80062e0:	d0fb      	beq.n	80062da <memchr+0xa>
 80062e2:	3001      	adds	r0, #1
 80062e4:	e7f6      	b.n	80062d4 <memchr+0x4>
	...

080062e8 <__malloc_lock>:
 80062e8:	b510      	push	{r4, lr}
 80062ea:	4802      	ldr	r0, [pc, #8]	; (80062f4 <__malloc_lock+0xc>)
 80062ec:	f7ff fb39 	bl	8005962 <__retarget_lock_acquire_recursive>
 80062f0:	bd10      	pop	{r4, pc}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	200001ac 	.word	0x200001ac

080062f8 <__malloc_unlock>:
 80062f8:	b510      	push	{r4, lr}
 80062fa:	4802      	ldr	r0, [pc, #8]	; (8006304 <__malloc_unlock+0xc>)
 80062fc:	f7ff fb32 	bl	8005964 <__retarget_lock_release_recursive>
 8006300:	bd10      	pop	{r4, pc}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	200001ac 	.word	0x200001ac

08006308 <_read_r>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	0004      	movs	r4, r0
 800630c:	0008      	movs	r0, r1
 800630e:	0011      	movs	r1, r2
 8006310:	001a      	movs	r2, r3
 8006312:	2300      	movs	r3, #0
 8006314:	4d05      	ldr	r5, [pc, #20]	; (800632c <_read_r+0x24>)
 8006316:	602b      	str	r3, [r5, #0]
 8006318:	f7fa fe71 	bl	8000ffe <_read>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d103      	bne.n	8006328 <_read_r+0x20>
 8006320:	682b      	ldr	r3, [r5, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d000      	beq.n	8006328 <_read_r+0x20>
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	bd70      	pop	{r4, r5, r6, pc}
 800632a:	46c0      	nop			; (mov r8, r8)
 800632c:	200001b4 	.word	0x200001b4

08006330 <_init>:
 8006330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006332:	46c0      	nop			; (mov r8, r8)
 8006334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006336:	bc08      	pop	{r3}
 8006338:	469e      	mov	lr, r3
 800633a:	4770      	bx	lr

0800633c <_fini>:
 800633c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006342:	bc08      	pop	{r3}
 8006344:	469e      	mov	lr, r3
 8006346:	4770      	bx	lr
